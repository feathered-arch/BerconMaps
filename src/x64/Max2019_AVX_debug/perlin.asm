; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27031.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?noise@Perlin@@SAMM@Z				; Perlin::noise
PUBLIC	?noise@Perlin@@SAMMM@Z				; Perlin::noise
PUBLIC	?noise@Perlin@@SAMMMM@Z				; Perlin::noise
PUBLIC	?noise@Perlin@@SAMMMMM@Z			; Perlin::noise
PUBLIC	?snoise@Perlin@@SAMM@Z				; Perlin::snoise
PUBLIC	?snoise@Perlin@@SAMMM@Z				; Perlin::snoise
PUBLIC	?snoise@Perlin@@SAMMMM@Z			; Perlin::snoise
PUBLIC	?snoise@Perlin@@SAMMMMM@Z			; Perlin::snoise
PUBLIC	?fnoise2D@Perlin@@SAMMMM@Z			; Perlin::fnoise2D
PUBLIC	?fnoise3D@Perlin@@SAMMMMM@Z			; Perlin::fnoise3D
PUBLIC	?fnoise4D@Perlin@@SAMMMMMM@Z			; Perlin::fnoise4D
PUBLIC	?fsnoise2D@Perlin@@SAMMMM@Z			; Perlin::fsnoise2D
PUBLIC	?fsnoise3D@Perlin@@SAMMMMM@Z			; Perlin::fsnoise3D
PUBLIC	?fsnoise4D@Perlin@@SAMMMMMM@Z			; Perlin::fsnoise4D
PUBLIC	?grad@Perlin@@CAMHM@Z				; Perlin::grad
PUBLIC	?grad@Perlin@@CAMHMM@Z				; Perlin::grad
PUBLIC	?grad@Perlin@@CAMHMMM@Z				; Perlin::grad
PUBLIC	?grad@Perlin@@CAMHMMMM@Z			; Perlin::grad
PUBLIC	?point@Perlin@@CAMMMMHHH@Z			; Perlin::point
PUBLIC	?point@Perlin@@CAMMMMMHHHH@Z			; Perlin::point
PUBLIC	?lerp2@@YAMMMM@Z				; lerp2
PUBLIC	__real@3e0d8369
PUBLIC	__real@3e2aaaab
PUBLIC	__real@3e408312
PUBLIC	__real@3e58658c
PUBLIC	__real@3e8d8369
PUBLIC	__real@3e9e377a
PUBLIC	__real@3eaaaaab
PUBLIC	__real@3ebb67ae
PUBLIC	__real@3eca4588
PUBLIC	__real@3ed4451e
PUBLIC	__real@3ed8658c
PUBLIC	__real@3ee4f92e
PUBLIC	__real@3f000000
PUBLIC	__real@3f01cac1
PUBLIC	__real@3f19999a
PUBLIC	__real@3f5eb852
PUBLIC	__real@3f6f9db2
PUBLIC	__real@3f7ff972
PUBLIC	__real@3f800000
PUBLIC	__real@3f99999a
PUBLIC	__real@400ccccd
PUBLIC	__real@40c00000
PUBLIC	__real@41200000
PUBLIC	__real@41700000
PUBLIC	__real@41d80000
PUBLIC	__real@42000000
PUBLIC	__real@42200000
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	?smooth@@YAMMMM@Z:PROC				; smooth
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?noise@Perlin@@SAMM@Z DD imagerel $LN14
	DD	imagerel $LN14+228
	DD	imagerel $unwind$?noise@Perlin@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?noise@Perlin@@SAMMM@Z DD imagerel $LN38
	DD	imagerel $LN38+692
	DD	imagerel $unwind$?noise@Perlin@@SAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?noise@Perlin@@SAMMMM@Z DD imagerel $LN24
	DD	imagerel $LN24+851
	DD	imagerel $unwind$?noise@Perlin@@SAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?noise@Perlin@@SAMMMMM@Z DD imagerel $LN42
	DD	imagerel $LN42+1638
	DD	imagerel $unwind$?noise@Perlin@@SAMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?snoise@Perlin@@SAMM@Z DD imagerel $LN16
	DD	imagerel $LN16+223
	DD	imagerel $unwind$?snoise@Perlin@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?snoise@Perlin@@SAMMM@Z DD imagerel $LN21
	DD	imagerel $LN21+649
	DD	imagerel $unwind$?snoise@Perlin@@SAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?snoise@Perlin@@SAMMMM@Z DD imagerel $LN24
	DD	imagerel $LN24+733
	DD	imagerel $unwind$?snoise@Perlin@@SAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?snoise@Perlin@@SAMMMMM@Z DD imagerel $LN16
	DD	imagerel $LN16+1147
	DD	imagerel $unwind$?snoise@Perlin@@SAMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fnoise2D@Perlin@@SAMMMM@Z DD imagerel $LN7
	DD	imagerel $LN7+128
	DD	imagerel $unwind$?fnoise2D@Perlin@@SAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fnoise3D@Perlin@@SAMMMMM@Z DD imagerel $LN7
	DD	imagerel $LN7+149
	DD	imagerel $unwind$?fnoise3D@Perlin@@SAMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fnoise4D@Perlin@@SAMMMMMM@Z DD imagerel $LN7
	DD	imagerel $LN7+179
	DD	imagerel $unwind$?fnoise4D@Perlin@@SAMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fsnoise2D@Perlin@@SAMMMM@Z DD imagerel $LN7
	DD	imagerel $LN7+128
	DD	imagerel $unwind$?fsnoise2D@Perlin@@SAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fsnoise3D@Perlin@@SAMMMMM@Z DD imagerel $LN7
	DD	imagerel $LN7+149
	DD	imagerel $unwind$?fsnoise3D@Perlin@@SAMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fsnoise4D@Perlin@@SAMMMMMM@Z DD imagerel $LN7
	DD	imagerel $LN7+179
	DD	imagerel $unwind$?fsnoise4D@Perlin@@SAMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?grad@Perlin@@CAMHMMM@Z DD imagerel $LN13
	DD	imagerel $LN13+149
	DD	imagerel $unwind$?grad@Perlin@@CAMHMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?grad@Perlin@@CAMHMMMM@Z DD imagerel $LN10
	DD	imagerel $LN10+149
	DD	imagerel $unwind$?grad@Perlin@@CAMHMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?point@Perlin@@CAMMMHH@Z DD imagerel $LN5
	DD	imagerel $LN5+52
	DD	imagerel $unwind$?point@Perlin@@CAMMMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?point@Perlin@@CAMMMHH@Z DD imagerel $LN5+52
	DD	imagerel $LN5+103
	DD	imagerel $chain$0$?point@Perlin@@CAMMMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?point@Perlin@@CAMMMHH@Z DD imagerel $LN5+103
	DD	imagerel $LN5+108
	DD	imagerel $chain$1$?point@Perlin@@CAMMMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?point@Perlin@@CAMMMMHHH@Z DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$?point@Perlin@@CAMMMMHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?point@Perlin@@CAMMMMHHH@Z DD imagerel $LN5+76
	DD	imagerel $LN5+134
	DD	imagerel $chain$0$?point@Perlin@@CAMMMMHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?point@Perlin@@CAMMMMHHH@Z DD imagerel $LN5+134
	DD	imagerel $LN5+145
	DD	imagerel $chain$1$?point@Perlin@@CAMMMMHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?point@Perlin@@CAMMMMMHHHH@Z DD imagerel $LN5
	DD	imagerel $LN5+107
	DD	imagerel $unwind$?point@Perlin@@CAMMMMMHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?point@Perlin@@CAMMMMMHHHH@Z DD imagerel $LN5+107
	DD	imagerel $LN5+172
	DD	imagerel $chain$0$?point@Perlin@@CAMMMMMHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?point@Perlin@@CAMMMMMHHHH@Z DD imagerel $LN5+172
	DD	imagerel $LN5+183
	DD	imagerel $chain$1$?point@Perlin@@CAMMMMMHHHH@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41d80000
CONST	SEGMENT
__real@41d80000 DD 041d80000r			; 27
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@400ccccd
CONST	SEGMENT
__real@400ccccd DD 0400ccccdr			; 2.2
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7ff972
CONST	SEGMENT
__real@3f7ff972 DD 03f7ff972r			; 0.9999
CONST	ENDS
;	COMDAT __real@3f6f9db2
CONST	SEGMENT
__real@3f6f9db2 DD 03f6f9db2r			; 0.936
CONST	ENDS
;	COMDAT __real@3f5eb852
CONST	SEGMENT
__real@3f5eb852 DD 03f5eb852r			; 0.87
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f01cac1
CONST	SEGMENT
__real@3f01cac1 DD 03f01cac1r			; 0.507
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ee4f92e
CONST	SEGMENT
__real@3ee4f92e DD 03ee4f92er			; 0.447214
CONST	ENDS
;	COMDAT __real@3ed8658c
CONST	SEGMENT
__real@3ed8658c DD 03ed8658cr			; 0.42265
CONST	ENDS
;	COMDAT __real@3ed4451e
CONST	SEGMENT
__real@3ed4451e DD 03ed4451er			; 0.41459
CONST	ENDS
;	COMDAT __real@3eca4588
CONST	SEGMENT
__real@3eca4588 DD 03eca4588r			; 0.395062
CONST	ENDS
;	COMDAT __real@3ebb67ae
CONST	SEGMENT
__real@3ebb67ae DD 03ebb67aer			; 0.366025
CONST	ENDS
;	COMDAT __real@3eaaaaab
CONST	SEGMENT
__real@3eaaaaab DD 03eaaaaabr			; 0.333333
CONST	ENDS
;	COMDAT __real@3e9e377a
CONST	SEGMENT
__real@3e9e377a DD 03e9e377ar			; 0.309017
CONST	ENDS
;	COMDAT __real@3e8d8369
CONST	SEGMENT
__real@3e8d8369 DD 03e8d8369r			; 0.276393
CONST	ENDS
;	COMDAT __real@3e58658c
CONST	SEGMENT
__real@3e58658c DD 03e58658cr			; 0.211325
CONST	ENDS
;	COMDAT __real@3e408312
CONST	SEGMENT
__real@3e408312 DD 03e408312r			; 0.188
CONST	ENDS
;	COMDAT __real@3e2aaaab
CONST	SEGMENT
__real@3e2aaaab DD 03e2aaaabr			; 0.166667
CONST	ENDS
;	COMDAT __real@3e0d8369
CONST	SEGMENT
__real@3e0d8369 DD 03e0d8369r			; 0.138197
CONST	ENDS
_DATA	SEGMENT
?perm@@3PAEA DB	097H					; perm
	DB	0a0H
	DB	089H
	DB	05bH
	DB	05aH
	DB	0fH
	DB	083H
	DB	0dH
	DB	0c9H
	DB	05fH
	DB	060H
	DB	035H
	DB	0c2H
	DB	0e9H
	DB	07H
	DB	0e1H
	DB	08cH
	DB	024H
	DB	067H
	DB	01eH
	DB	045H
	DB	08eH
	DB	08H
	DB	063H
	DB	025H
	DB	0f0H
	DB	015H
	DB	0aH
	DB	017H
	DB	0beH
	DB	06H
	DB	094H
	DB	0f7H
	DB	078H
	DB	0eaH
	DB	04bH
	DB	00H
	DB	01aH
	DB	0c5H
	DB	03eH
	DB	05eH
	DB	0fcH
	DB	0dbH
	DB	0cbH
	DB	075H
	DB	023H
	DB	0bH
	DB	020H
	DB	039H
	DB	0b1H
	DB	021H
	DB	058H
	DB	0edH
	DB	095H
	DB	038H
	DB	057H
	DB	0aeH
	DB	014H
	DB	07dH
	DB	088H
	DB	0abH
	DB	0a8H
	DB	044H
	DB	0afH
	DB	04aH
	DB	0a5H
	DB	047H
	DB	086H
	DB	08bH
	DB	030H
	DB	01bH
	DB	0a6H
	DB	04dH
	DB	092H
	DB	09eH
	DB	0e7H
	DB	053H
	DB	06fH
	DB	0e5H
	DB	07aH
	DB	03cH
	DB	0d3H
	DB	085H
	DB	0e6H
	DB	0dcH
	DB	069H
	DB	05cH
	DB	029H
	DB	037H
	DB	02eH
	DB	0f5H
	DB	028H
	DB	0f4H
	DB	066H
	DB	08fH
	DB	036H
	DB	041H
	DB	019H
	DB	03fH
	DB	0a1H
	DB	01H
	DB	0d8H
	DB	050H
	DB	049H
	DB	0d1H
	DB	04cH
	DB	084H
	DB	0bbH
	DB	0d0H
	DB	059H
	DB	012H
	DB	0a9H
	DB	0c8H
	DB	0c4H
	DB	087H
	DB	082H
	DB	074H
	DB	0bcH
	DB	09fH
	DB	056H
	DB	0a4H
	DB	064H
	DB	06dH
	DB	0c6H
	DB	0adH
	DB	0baH
	DB	03H
	DB	040H
	DB	034H
	DB	0d9H
	DB	0e2H
	DB	0faH
	DB	07cH
	DB	07bH
	DB	05H
	DB	0caH
	DB	026H
	DB	093H
	DB	076H
	DB	07eH
	DB	0ffH
	DB	052H
	DB	055H
	DB	0d4H
	DB	0cfH
	DB	0ceH
	DB	03bH
	DB	0e3H
	DB	02fH
	DB	010H
	DB	03aH
	DB	011H
	DB	0b6H
	DB	0bdH
	DB	01cH
	DB	02aH
	DB	0dfH
	DB	0b7H
	DB	0aaH
	DB	0d5H
	DB	077H
	DB	0f8H
	DB	098H
	DB	02H
	DB	02cH
	DB	09aH
	DB	0a3H
	DB	046H
	DB	0ddH
	DB	099H
	DB	065H
	DB	09bH
	DB	0a7H
	DB	02bH
	DB	0acH
	DB	09H
	DB	081H
	DB	016H
	DB	027H
	DB	0fdH
	DB	013H
	DB	062H
	DB	06cH
	DB	06eH
	DB	04fH
	DB	071H
	DB	0e0H
	DB	0e8H
	DB	0b2H
	DB	0b9H
	DB	070H
	DB	068H
	DB	0daH
	DB	0f6H
	DB	061H
	DB	0e4H
	DB	0fbH
	DB	022H
	DB	0f2H
	DB	0c1H
	DB	0eeH
	DB	0d2H
	DB	090H
	DB	0cH
	DB	0bfH
	DB	0b3H
	DB	0a2H
	DB	0f1H
	DB	051H
	DB	033H
	DB	091H
	DB	0ebH
	DB	0f9H
	DB	0eH
	DB	0efH
	DB	06bH
	DB	031H
	DB	0c0H
	DB	0d6H
	DB	01fH
	DB	0b5H
	DB	0c7H
	DB	06aH
	DB	09dH
	DB	0b8H
	DB	054H
	DB	0ccH
	DB	0b0H
	DB	073H
	DB	079H
	DB	032H
	DB	02dH
	DB	07fH
	DB	04H
	DB	096H
	DB	0feH
	DB	08aH
	DB	0ecH
	DB	0cdH
	DB	05dH
	DB	0deH
	DB	072H
	DB	043H
	DB	01dH
	DB	018H
	DB	048H
	DB	0f3H
	DB	08dH
	DB	080H
	DB	0c3H
	DB	04eH
	DB	042H
	DB	0d7H
	DB	03dH
	DB	09cH
	DB	0b4H
	DB	097H
	DB	0a0H
	DB	089H
	DB	05bH
	DB	05aH
	DB	0fH
	DB	083H
	DB	0dH
	DB	0c9H
	DB	05fH
	DB	060H
	DB	035H
	DB	0c2H
	DB	0e9H
	DB	07H
	DB	0e1H
	DB	08cH
	DB	024H
	DB	067H
	DB	01eH
	DB	045H
	DB	08eH
	DB	08H
	DB	063H
	DB	025H
	DB	0f0H
	DB	015H
	DB	0aH
	DB	017H
	DB	0beH
	DB	06H
	DB	094H
	DB	0f7H
	DB	078H
	DB	0eaH
	DB	04bH
	DB	00H
	DB	01aH
	DB	0c5H
	DB	03eH
	DB	05eH
	DB	0fcH
	DB	0dbH
	DB	0cbH
	DB	075H
	DB	023H
	DB	0bH
	DB	020H
	DB	039H
	DB	0b1H
	DB	021H
	DB	058H
	DB	0edH
	DB	095H
	DB	038H
	DB	057H
	DB	0aeH
	DB	014H
	DB	07dH
	DB	088H
	DB	0abH
	DB	0a8H
	DB	044H
	DB	0afH
	DB	04aH
	DB	0a5H
	DB	047H
	DB	086H
	DB	08bH
	DB	030H
	DB	01bH
	DB	0a6H
	DB	04dH
	DB	092H
	DB	09eH
	DB	0e7H
	DB	053H
	DB	06fH
	DB	0e5H
	DB	07aH
	DB	03cH
	DB	0d3H
	DB	085H
	DB	0e6H
	DB	0dcH
	DB	069H
	DB	05cH
	DB	029H
	DB	037H
	DB	02eH
	DB	0f5H
	DB	028H
	DB	0f4H
	DB	066H
	DB	08fH
	DB	036H
	DB	041H
	DB	019H
	DB	03fH
	DB	0a1H
	DB	01H
	DB	0d8H
	DB	050H
	DB	049H
	DB	0d1H
	DB	04cH
	DB	084H
	DB	0bbH
	DB	0d0H
	DB	059H
	DB	012H
	DB	0a9H
	DB	0c8H
	DB	0c4H
	DB	087H
	DB	082H
	DB	074H
	DB	0bcH
	DB	09fH
	DB	056H
	DB	0a4H
	DB	064H
	DB	06dH
	DB	0c6H
	DB	0adH
	DB	0baH
	DB	03H
	DB	040H
	DB	034H
	DB	0d9H
	DB	0e2H
	DB	0faH
	DB	07cH
	DB	07bH
	DB	05H
	DB	0caH
	DB	026H
	DB	093H
	DB	076H
	DB	07eH
	DB	0ffH
	DB	052H
	DB	055H
	DB	0d4H
	DB	0cfH
	DB	0ceH
	DB	03bH
	DB	0e3H
	DB	02fH
	DB	010H
	DB	03aH
	DB	011H
	DB	0b6H
	DB	0bdH
	DB	01cH
	DB	02aH
	DB	0dfH
	DB	0b7H
	DB	0aaH
	DB	0d5H
	DB	077H
	DB	0f8H
	DB	098H
	DB	02H
	DB	02cH
	DB	09aH
	DB	0a3H
	DB	046H
	DB	0ddH
	DB	099H
	DB	065H
	DB	09bH
	DB	0a7H
	DB	02bH
	DB	0acH
	DB	09H
	DB	081H
	DB	016H
	DB	027H
	DB	0fdH
	DB	013H
	DB	062H
	DB	06cH
	DB	06eH
	DB	04fH
	DB	071H
	DB	0e0H
	DB	0e8H
	DB	0b2H
	DB	0b9H
	DB	070H
	DB	068H
	DB	0daH
	DB	0f6H
	DB	061H
	DB	0e4H
	DB	0fbH
	DB	022H
	DB	0f2H
	DB	0c1H
	DB	0eeH
	DB	0d2H
	DB	090H
	DB	0cH
	DB	0bfH
	DB	0b3H
	DB	0a2H
	DB	0f1H
	DB	051H
	DB	033H
	DB	091H
	DB	0ebH
	DB	0f9H
	DB	0eH
	DB	0efH
	DB	06bH
	DB	031H
	DB	0c0H
	DB	0d6H
	DB	01fH
	DB	0b5H
	DB	0c7H
	DB	06aH
	DB	09dH
	DB	0b8H
	DB	054H
	DB	0ccH
	DB	0b0H
	DB	073H
	DB	079H
	DB	032H
	DB	02dH
	DB	07fH
	DB	04H
	DB	096H
	DB	0feH
	DB	08aH
	DB	0ecH
	DB	0cdH
	DB	05dH
	DB	0deH
	DB	072H
	DB	043H
	DB	01dH
	DB	018H
	DB	048H
	DB	0f3H
	DB	08dH
	DB	080H
	DB	0c3H
	DB	04eH
	DB	042H
	DB	0d7H
	DB	03dH
	DB	09cH
	DB	0b4H
?simplex@@3PAY03EA DB 00H				; simplex
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	01H
	DB	02H
	DB	00H
	DB	03H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	03H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	01H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	01H
	DB	02H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	01H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	02H
	DB	00H
	DB	01H
	DB	03H
	DB	02H
	DB	01H
	DB	00H
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?point@Perlin@@CAMMMMMHHHH@Z DD 021H
	DD	imagerel $LN5
	DD	imagerel $LN5+107
	DD	imagerel $unwind$?point@Perlin@@CAMMMMMHHHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?point@Perlin@@CAMMMMMHHHH@Z DD 020621H
	DD	046806H
	DD	imagerel $LN5
	DD	imagerel $LN5+107
	DD	imagerel $unwind$?point@Perlin@@CAMMMMMHHHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?point@Perlin@@CAMMMMMHHHH@Z DD 032e01H
	DD	03782eH
	DD	0a204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?point@Perlin@@CAMMMMHHH@Z DD 021H
	DD	imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$?point@Perlin@@CAMMMMHHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?point@Perlin@@CAMMMMHHH@Z DD 020621H
	DD	036806H
	DD	imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$?point@Perlin@@CAMMMMHHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?point@Perlin@@CAMMMMHHH@Z DD 032201H
	DD	027822H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?point@Perlin@@CAMMMHH@Z DD 021H
	DD	imagerel $LN5
	DD	imagerel $LN5+52
	DD	imagerel $unwind$?point@Perlin@@CAMMMHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?point@Perlin@@CAMMMHH@Z DD 020621H
	DD	026806H
	DD	imagerel $LN5
	DD	imagerel $LN5+52
	DD	imagerel $unwind$?point@Perlin@@CAMMMHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?point@Perlin@@CAMMMHH@Z DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?grad@Perlin@@CAMHMMMM@Z DD 030e01H
	DD	0680eH
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?grad@Perlin@@CAMHMMM@Z DD 051401H
	DD	07814H
	DD	01680aH
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fsnoise4D@Perlin@@SAMMMMMM@Z DD 0b4301H
	DD	02a843H
	DD	039825H
	DD	04881fH
	DD	057819H
	DD	066813H
	DD	0e204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fsnoise3D@Perlin@@SAMMMMM@Z DD 093401H
	DD	029834H
	DD	038816H
	DD	047810H
	DD	05680aH
	DD	0c204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fsnoise2D@Perlin@@SAMMMM@Z DD 072201H
	DD	028822H
	DD	037810H
	DD	04680aH
	DD	0a204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fnoise4D@Perlin@@SAMMMMMM@Z DD 0b4301H
	DD	02a843H
	DD	039825H
	DD	04881fH
	DD	057819H
	DD	066813H
	DD	0e204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fnoise3D@Perlin@@SAMMMMM@Z DD 093401H
	DD	029834H
	DD	038816H
	DD	047810H
	DD	05680aH
	DD	0c204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fnoise2D@Perlin@@SAMMMM@Z DD 072201H
	DD	028822H
	DD	037810H
	DD	04680aH
	DD	0a204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?snoise@Perlin@@SAMMMMM@Z DD 0168001H
	DD	05b880H
	DD	06a872H
	DD	079858H
	DD	08882aH
	DD	097825H
	DD	0a681bH
	DD	0170116H
	DD	0e00df00fH
	DD	0c009d00bH
	DD	060067007H
	DD	030045005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?snoise@Perlin@@SAMMMM@Z DD 0174101H
	DD	03b841H
	DD	04a83cH
	DD	059833H
	DD	06882eH
	DD	077825H
	DD	086820H
	DD	018641bH
	DD	017541bH
	DD	016341bH
	DD	012011bH
	DD	0e012f014H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?snoise@Perlin@@SAMMM@Z DD 01d9201H
	DD	02e892H
	DD	03d880H
	DD	04c877H
	DD	05b851H
	DD	06a84cH
	DD	079843H
	DD	08883eH
	DD	097835H
	DD	0a6830H
	DD	01c641bH
	DD	01b541bH
	DD	01a341bH
	DD	016011bH
	DD	0e012f014H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?snoise@Perlin@@SAMM@Z DD 052d01H
	DD	0782dH
	DD	016825H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?noise@Perlin@@SAMMMMM@Z DD 01e9001H
	DD	05f890H
	DD	06e886H
	DD	07d86fH
	DD	08c855H
	DD	09b84dH
	DD	0aa845H
	DD	0b983dH
	DD	0c8831H
	DD	0d7828H
	DD	0e681bH
	DD	01f0116H
	DD	0e00df00fH
	DD	0c009d00bH
	DD	060067007H
	DD	030045005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?noise@Perlin@@SAMMMM@Z DD 01d8f01H
	DD	02f88fH
	DD	03e889H
	DD	04d876H
	DD	05c86cH
	DD	06b862H
	DD	07a841H
	DD	08983cH
	DD	098833H
	DD	0a7826H
	DD	0b681aH
	DD	0203415H
	DD	0180115H
	DD	0e00cf00eH
	DD	06009700aH
	DD	05008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?noise@Perlin@@SAMMM@Z DD 0148601H
	DD	0e886H
	DD	01d86cH
	DD	02c852H
	DD	03b849H
	DD	04a844H
	DD	05983bH
	DD	068832H
	DD	077827H
	DD	086817H
	DD	013010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?noise@Perlin@@SAMM@Z DD 052d01H
	DD	0782dH
	DD	016825H
	DD	04204H
xdata	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?lerp2@@YAMMMM@Z
_TEXT	SEGMENT
t$ = 8
a$ = 16
b$ = 24
?lerp2@@YAMMMM@Z PROC					; lerp2, COMDAT

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm2, xmm2, xmm1
	vmulss	xmm0, xmm2, xmm0
	vaddss	xmm0, xmm0, xmm1
	ret	0
?lerp2@@YAMMMM@Z ENDP					; lerp2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?point@Perlin@@CAMMMMMHHHH@Z
_TEXT	SEGMENT
x$ = 96
y$ = 104
z$ = 112
w$ = 120
i$ = 128
j$ = 136
k$ = 144
l$ = 152
?point@Perlin@@CAMMMMMHHHH@Z PROC			; Perlin::point, COMDAT

; 231  : inline float Perlin::point(float x, float y, float z, float w, int i, int j, int k, int l) {

$LN5:
	sub	rsp, 88					; 00000058H

; 232  : 	float t = 0.6f - x*x - y*y - z*z - w*w;

	vmovss	xmm4, DWORD PTR __real@3f19999a
	vmulss	xmm5, xmm0, xmm0
	vsubss	xmm4, xmm4, xmm5
	vmulss	xmm5, xmm1, xmm1
	vsubss	xmm5, xmm4, xmm5
	vmulss	xmm4, xmm2, xmm2
	vsubss	xmm4, xmm5, xmm4
	vmulss	xmm5, xmm3, xmm3
	vmovaps	XMMWORD PTR [rsp+48], xmm7
	vmovaps	xmm7, xmm0
	vsubss	xmm4, xmm4, xmm5
	vxorps	xmm0, xmm0, xmm0

; 233  : 	if(t < 0.0f)

	vcomiss	xmm0, xmm4
	ja	SHORT $LN1@point

; 234  : 		return 0.0f;	
; 235  : 	t *= t;
; 236  : 	return t * t * grad(perm[i+perm[j+perm[k+perm[l]]]], x, y, z, w);	

	movsxd	rax, DWORD PTR l$[rsp]
	lea	rdx, OFFSET FLAT:?perm@@3PAEA
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovaps	xmm3, xmm2
	vmovaps	xmm2, xmm1
	movzx	eax, BYTE PTR [rax+rdx]
	add	eax, DWORD PTR k$[rsp]
	movsxd	rcx, eax
	vmovaps	XMMWORD PTR [rsp+64], xmm6
	vmovaps	xmm1, xmm7
	vmulss	xmm6, xmm4, xmm4
	movzx	eax, BYTE PTR [rcx+rdx]
	add	eax, DWORD PTR j$[rsp]
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rcx+rdx]
	add	eax, DWORD PTR i$[rsp]
	movsxd	rcx, eax
	movzx	ecx, BYTE PTR [rcx+rdx]
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	vmulss	xmm1, xmm6, xmm6
	vmovaps	xmm6, XMMWORD PTR [rsp+64]
	vmulss	xmm0, xmm0, xmm1
$LN1@point:

; 237  : }

	vmovaps	xmm7, XMMWORD PTR [rsp+48]
	add	rsp, 88					; 00000058H
	ret	0
?point@Perlin@@CAMMMMMHHHH@Z ENDP			; Perlin::point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?point@Perlin@@CAMMMMHHH@Z
_TEXT	SEGMENT
x$ = 80
y$ = 88
z$ = 96
i$ = 104
j$ = 112
k$ = 120
?point@Perlin@@CAMMMMHHH@Z PROC				; Perlin::point, COMDAT

; 223  : inline float Perlin::point(float x, float y, float z, int i, int j, int k) {

$LN5:
	sub	rsp, 72					; 00000048H

; 224  : 	float t = 0.6f - x*x - y*y - z*z;

	vmovss	xmm3, DWORD PTR __real@3f19999a
	vmulss	xmm4, xmm0, xmm0
	vsubss	xmm5, xmm3, xmm4
	vmulss	xmm4, xmm1, xmm1
	vsubss	xmm4, xmm5, xmm4
	vmovaps	XMMWORD PTR [rsp+32], xmm7
	vmulss	xmm3, xmm2, xmm2
	vmovaps	xmm7, xmm0
	vsubss	xmm5, xmm4, xmm3
	vxorps	xmm0, xmm0, xmm0

; 225  : 	if(t < 0.0f) 

	vcomiss	xmm0, xmm5
	ja	SHORT $LN1@point

; 226  : 		return 0.0f;
; 227  : 	t *= t;
; 228  : 	return t * t * grad(perm[i+perm[j+perm[k]]], x, y, z);

	movsxd	rax, DWORD PTR k$[rsp]
	lea	rdx, OFFSET FLAT:?perm@@3PAEA
	vmovaps	xmm3, xmm2
	vmovaps	xmm2, xmm1
	vmovaps	XMMWORD PTR [rsp+48], xmm6
	movzx	eax, BYTE PTR [rax+rdx]
	add	eax, DWORD PTR j$[rsp]
	movsxd	rcx, eax
	vmovaps	xmm1, xmm7
	vmulss	xmm6, xmm5, xmm5
	movzx	eax, BYTE PTR [rcx+rdx]
	add	eax, r9d
	movsxd	rcx, eax
	movzx	ecx, BYTE PTR [rcx+rdx]
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	vmulss	xmm1, xmm6, xmm6
	vmovaps	xmm6, XMMWORD PTR [rsp+48]
	vmulss	xmm0, xmm0, xmm1
$LN1@point:

; 229  : }

	vmovaps	xmm7, XMMWORD PTR [rsp+32]
	add	rsp, 72					; 00000048H
	ret	0
?point@Perlin@@CAMMMMHHH@Z ENDP				; Perlin::point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?point@Perlin@@CAMMMHH@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
i$ = 80
j$ = 88
?point@Perlin@@CAMMMHH@Z PROC				; Perlin::point, COMDAT

; 215  : inline float Perlin::point(float x, float y, int i, int j) {

$LN5:
	sub	rsp, 56					; 00000038H

; 216  :     float t = 0.5f - x*x - y*y;

	vmovss	xmm2, DWORD PTR __real@3f000000
	vmulss	xmm3, xmm0, xmm0
	vsubss	xmm4, xmm2, xmm3
	vmulss	xmm3, xmm1, xmm1
	vmovaps	xmm5, xmm0
	vsubss	xmm2, xmm4, xmm3
	vxorps	xmm0, xmm0, xmm0

; 217  :     if(t < 0.0f) 

	vcomiss	xmm0, xmm2
	ja	SHORT $LN1@point

; 218  : 		return 0.0f;
; 219  :     t *= t;
; 220  :     return t * t * grad(perm[i+perm[j]], x, y);

	lea	rdx, OFFSET FLAT:?perm@@3PAEA
	movsxd	rax, r9d
	vmovaps	XMMWORD PTR [rsp+32], xmm6
	vmulss	xmm6, xmm2, xmm2
	vmovaps	xmm2, xmm1
	movzx	eax, BYTE PTR [rax+rdx]
	add	eax, r8d
	movsxd	rcx, eax
	vmovaps	xmm1, xmm5
	movzx	ecx, BYTE PTR [rcx+rdx]
	call	?grad@Perlin@@CAMHMM@Z			; Perlin::grad
	vmulss	xmm1, xmm6, xmm6
	vmovaps	xmm6, XMMWORD PTR [rsp+32]
	vmulss	xmm0, xmm0, xmm1
$LN1@point:

; 221  : }

	add	rsp, 56					; 00000038H
	ret	0
?point@Perlin@@CAMMMHH@Z ENDP				; Perlin::point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?point@Perlin@@CAMMH@Z
_TEXT	SEGMENT
x$ = 8
i$ = 16
?point@Perlin@@CAMMH@Z PROC				; Perlin::point, COMDAT

; 210  : 	float t = 1.0f - x*x;

	vmovss	xmm2, DWORD PTR __real@3f800000

; 211  : 	t *= t;
; 212  : 	return t * t * grad(perm[i & 255], x);

	lea	rax, OFFSET FLAT:?perm@@3PAEA
	movzx	ecx, dl
	vmulss	xmm1, xmm0, xmm0
	vsubss	xmm1, xmm2, xmm1
	vmulss	xmm4, xmm1, xmm1
	movzx	edx, BYTE PTR [rcx+rax]

; 69   :     float grad = 1.0f + (h & 7);

	mov	eax, edx
	and	eax, 7
	vxorps	xmm1, xmm1, xmm1
	vcvtsi2ss xmm1, xmm1, eax
	vaddss	xmm3, xmm1, xmm2

; 70   :     if (h&8) grad = -grad;

	test	dl, 8
	je	SHORT $LN4@point
	vxorps	xmm3, xmm3, DWORD PTR __xmm@80000000800000008000000080000000
$LN4@point:

; 71   :     return ( grad * x );

	vmulss	xmm1, xmm3, xmm0

; 211  : 	t *= t;
; 212  : 	return t * t * grad(perm[i & 255], x);

	vmulss	xmm0, xmm4, xmm4
	vmulss	xmm0, xmm1, xmm0

; 213  : }

	ret	0
?point@Perlin@@CAMMH@Z ENDP				; Perlin::point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?grad@Perlin@@CAMHMMMM@Z
_TEXT	SEGMENT
hash$ = 32
x$ = 40
y$ = 48
z$ = 56
w$ = 64
?grad@Perlin@@CAMHMMMM@Z PROC				; Perlin::grad, COMDAT

; 88   : float Perlin::grad(int hash, float x, float y, float z, float w) {

$LN10:
	sub	rsp, 24

; 89   : 	int h = hash & 31;
; 90   :     float i = h<24 ? x : y;

	mov	edx, 24
	vmovaps	XMMWORD PTR [rsp], xmm6
	vmovaps	xmm6, xmm2
	vmovd	xmm0, edx
	mov	eax, ecx

; 91   :     float j = h<16 ? y : z;

	mov	edx, 16
	and	eax, 31
	vmovd	xmm4, eax
	vpcmpgtq xmm5, xmm0, xmm4
	vblendvps xmm5, xmm6, xmm1, xmm5
	vmovd	xmm1, eax
	vmovd	xmm0, edx
	vpcmpgtq xmm2, xmm0, xmm1

; 92   :     float k = h<8 ? z : w;

	vmovd	xmm1, eax
	mov	eax, 8
	vmovd	xmm0, eax
	vblendvps xmm6, xmm3, xmm6, xmm2
	vpcmpgtq xmm2, xmm0, xmm1
	vmovss	xmm1, DWORD PTR w$[rsp]

; 93   :     return ((h&1)? -i : i) + ((h&2)? -j : j) + ((h&4)? -k : k);

	vmovss	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vblendvps xmm4, xmm1, xmm3, xmm2
	test	cl, 1
	je	SHORT $LN3@grad
	vxorps	xmm5, xmm5, xmm0
$LN3@grad:
	test	cl, 2
	je	SHORT $LN5@grad
	vxorps	xmm6, xmm6, xmm0
$LN5@grad:
	test	cl, 4
	je	SHORT $LN7@grad
	vxorps	xmm4, xmm4, xmm0
$LN7@grad:
	vaddss	xmm0, xmm6, xmm5

; 94   : }

	vmovaps	xmm6, XMMWORD PTR [rsp]
	vaddss	xmm0, xmm0, xmm4
	add	rsp, 24
	ret	0
?grad@Perlin@@CAMHMMMM@Z ENDP				; Perlin::grad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?grad@Perlin@@CAMHMMM@Z
_TEXT	SEGMENT
hash$ = 48
x$ = 56
y$ = 64
z$ = 72
?grad@Perlin@@CAMHMMM@Z PROC				; Perlin::grad, COMDAT

; 81   : float Perlin::grad(int hash, float x, float y, float z) {

$LN13:
	sub	rsp, 40					; 00000028H
	vmovaps	XMMWORD PTR [rsp+16], xmm6

; 82   :     int h = hash & 15;

	mov	eax, ecx
	and	eax, 15
	vmovaps	XMMWORD PTR [rsp], xmm7

; 83   :     float i = h<8 ? x : y;

	mov	edx, 8
	vmovd	xmm4, eax
	vmovd	xmm0, edx
	vpcmpgtq xmm5, xmm0, xmm4
	vmovaps	xmm6, xmm1
	vmovaps	xmm7, xmm3
	vblendvps xmm3, xmm2, xmm6, xmm5

; 84   :     float j = h<4 ? y : h==12||h==14 ? x : z;

	cmp	eax, 4
	jb	SHORT $LN3@grad
	add	eax, -12				; fffffff4H
	and	eax, -3					; fffffffdH
	xor	edx, edx
	vmovd	xmm1, edx
	vmovd	xmm0, eax
	vpcmpeqd xmm2, xmm0, xmm1
	vblendvps xmm2, xmm7, xmm6, xmm2
$LN3@grad:

; 85   :     return ((h&1) ? -i : i) + ((h&2) ? -j : j);

	vmovss	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	test	cl, 1
	je	SHORT $LN7@grad
	vxorps	xmm3, xmm3, xmm0
$LN7@grad:
	test	cl, 2
	je	SHORT $LN9@grad
	vxorps	xmm0, xmm2, xmm0
	vaddss	xmm0, xmm0, xmm3

; 86   : }

	vmovaps	xmm6, XMMWORD PTR [rsp+16]
	vmovaps	xmm7, XMMWORD PTR [rsp]
	add	rsp, 40					; 00000028H
	ret	0
$LN9@grad:
	vmovaps	xmm6, XMMWORD PTR [rsp+16]
	vmovaps	xmm7, XMMWORD PTR [rsp]
	vaddss	xmm0, xmm2, xmm3
	add	rsp, 40					; 00000028H
	ret	0
?grad@Perlin@@CAMHMMM@Z ENDP				; Perlin::grad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?grad@Perlin@@CAMHMM@Z
_TEXT	SEGMENT
hash$ = 8
x$ = 16
y$ = 24
?grad@Perlin@@CAMHMM@Z PROC				; Perlin::grad, COMDAT

; 74   : float Perlin::grad(int hash, float x, float y) {

	vmovaps	xmm4, xmm1
	vmovaps	xmm5, xmm2

; 75   :     int h = hash & 7;
; 76   :     float i = h<4 ? x : y;

	mov	edx, 4
	mov	eax, ecx
	and	eax, 7
	vmovd	xmm0, edx
	vmovd	xmm3, eax
	vpcmpgtq xmm3, xmm0, xmm3

; 77   :     float j = h<4 ? y : x;

	vmovd	xmm0, edx
	vmovd	xmm1, eax
	vpcmpgtq xmm2, xmm0, xmm1
	vblendvps xmm0, xmm4, xmm5, xmm2
	vblendvps xmm3, xmm5, xmm4, xmm3

; 78   :     return ((h&1)? -i : i) + ((h&2)? -2.f*j : 2.f*j);

	test	cl, 1
	je	SHORT $LN4@grad
	vxorps	xmm3, xmm3, DWORD PTR __xmm@80000000800000008000000080000000
$LN4@grad:
	test	cl, 2
	je	SHORT $LN5@grad
	vmulss	xmm0, xmm0, DWORD PTR __real@c0000000

; 79   : }

	vaddss	xmm0, xmm0, xmm3
	ret	0
$LN5@grad:

; 78   :     return ((h&1)? -i : i) + ((h&2)? -2.f*j : 2.f*j);

	vaddss	xmm0, xmm0, xmm0

; 79   : }

	vaddss	xmm0, xmm0, xmm3
	ret	0
?grad@Perlin@@CAMHMM@Z ENDP				; Perlin::grad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?grad@Perlin@@CAMHM@Z
_TEXT	SEGMENT
hash$ = 8
x$ = 16
?grad@Perlin@@CAMHM@Z PROC				; Perlin::grad, COMDAT

; 68   :     int h = hash & 15;
; 69   :     float grad = 1.0f + (h & 7);

	mov	eax, ecx
	and	eax, 7
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vaddss	xmm2, xmm0, DWORD PTR __real@3f800000

; 70   :     if (h&8) grad = -grad;

	test	cl, 8
	je	SHORT $LN4@grad
	vxorps	xmm0, xmm2, DWORD PTR __xmm@80000000800000008000000080000000

; 71   :     return ( grad * x );

	vmulss	xmm0, xmm0, xmm1

; 72   : }

	ret	0
$LN4@grad:

; 71   :     return ( grad * x );

	vmulss	xmm0, xmm2, xmm1

; 72   : }

	ret	0
?grad@Perlin@@CAMHM@Z ENDP				; Perlin::grad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?fsnoise4D@Perlin@@SAMMMMMM@Z
_TEXT	SEGMENT
x$ = 128
y$ = 136
z$ = 144
w$ = 152
d$ = 160
?fsnoise4D@Perlin@@SAMMMMMM@Z PROC			; Perlin::fsnoise4D, COMDAT

; 431  : float Perlin::fsnoise4D(float x, float y, float z, float w, float d) {

$LN7:
	sub	rsp, 120				; 00000078H

; 432  : 	FILTER(d)

	vmovss	xmm4, DWORD PTR d$[rsp]
	vmovaps	XMMWORD PTR [rsp+96], xmm6
	vmovaps	XMMWORD PTR [rsp+80], xmm7
	vmovaps	XMMWORD PTR [rsp+64], xmm8
	vmovaps	XMMWORD PTR [rsp+48], xmm9
	vmovaps	xmm9, xmm1
	vmovss	xmm1, DWORD PTR __real@3f99999a
	vmovaps	xmm8, xmm2
	vmovss	xmm2, DWORD PTR __real@400ccccd
	vmovaps	XMMWORD PTR [rsp+32], xmm10
	vmovaps	xmm10, xmm0
	vdivss	xmm0, xmm4, xmm1
	vmovaps	xmm7, xmm3
	call	?smooth@@YAMMMM@Z			; smooth
	vcomiss	xmm0, DWORD PTR __real@3f7ff972
	vmovaps	xmm6, xmm0
	jb	SHORT $LN2@fsnoise4D
	vxorps	xmm0, xmm0, xmm0
	jmp	SHORT $LN1@fsnoise4D
$LN2@fsnoise4D:

; 433  : 	return lerp2(d, snoise(x,y,z,w), 0.f);

	vmovaps	xmm3, xmm7
	vmovaps	xmm2, xmm8
	vmovaps	xmm1, xmm9
	vmovaps	xmm0, xmm10
	call	?snoise@Perlin@@SAMMMMM@Z		; Perlin::snoise
	vxorps	xmm1, xmm1, xmm1

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm2, xmm1, xmm0
	vmulss	xmm3, xmm2, xmm6
	vaddss	xmm0, xmm3, xmm0
$LN1@fsnoise4D:

; 434  : }	

	vmovaps	xmm6, XMMWORD PTR [rsp+96]
	vmovaps	xmm7, XMMWORD PTR [rsp+80]
	vmovaps	xmm8, XMMWORD PTR [rsp+64]
	vmovaps	xmm9, XMMWORD PTR [rsp+48]
	vmovaps	xmm10, XMMWORD PTR [rsp+32]
	add	rsp, 120				; 00000078H
	ret	0
?fsnoise4D@Perlin@@SAMMMMMM@Z ENDP			; Perlin::fsnoise4D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?fsnoise3D@Perlin@@SAMMMMM@Z
_TEXT	SEGMENT
x$ = 112
y$ = 120
z$ = 128
d$ = 136
?fsnoise3D@Perlin@@SAMMMMM@Z PROC			; Perlin::fsnoise3D, COMDAT

; 426  : float Perlin::fsnoise3D(float x, float y, float z, float d) {

$LN7:
	sub	rsp, 104				; 00000068H
	vmovaps	XMMWORD PTR [rsp+80], xmm6
	vmovaps	XMMWORD PTR [rsp+64], xmm7
	vmovaps	XMMWORD PTR [rsp+48], xmm8
	vmovaps	xmm8, xmm1

; 427  : 	FILTER(d)

	vmovss	xmm1, DWORD PTR __real@3f99999a
	vmovaps	xmm7, xmm2
	vmovss	xmm2, DWORD PTR __real@400ccccd
	vmovaps	XMMWORD PTR [rsp+32], xmm9
	vmovaps	xmm9, xmm0
	vdivss	xmm0, xmm3, xmm1
	call	?smooth@@YAMMMM@Z			; smooth
	vcomiss	xmm0, DWORD PTR __real@3f7ff972
	vmovaps	xmm6, xmm0
	jb	SHORT $LN2@fsnoise3D
	vxorps	xmm0, xmm0, xmm0
	jmp	SHORT $LN1@fsnoise3D
$LN2@fsnoise3D:

; 428  : 	return lerp2(d, snoise(x,y,z), 0.f);

	vmovaps	xmm2, xmm7
	vmovaps	xmm1, xmm8
	vmovaps	xmm0, xmm9
	call	?snoise@Perlin@@SAMMMM@Z		; Perlin::snoise
	vxorps	xmm1, xmm1, xmm1

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm2, xmm1, xmm0
	vmulss	xmm3, xmm2, xmm6
	vaddss	xmm0, xmm3, xmm0
$LN1@fsnoise3D:

; 429  : }

	vmovaps	xmm6, XMMWORD PTR [rsp+80]
	vmovaps	xmm7, XMMWORD PTR [rsp+64]
	vmovaps	xmm8, XMMWORD PTR [rsp+48]
	vmovaps	xmm9, XMMWORD PTR [rsp+32]
	add	rsp, 104				; 00000068H
	ret	0
?fsnoise3D@Perlin@@SAMMMMM@Z ENDP			; Perlin::fsnoise3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?fsnoise2D@Perlin@@SAMMMM@Z
_TEXT	SEGMENT
x$ = 96
y$ = 104
d$ = 112
?fsnoise2D@Perlin@@SAMMMM@Z PROC			; Perlin::fsnoise2D, COMDAT

; 421  : float Perlin::fsnoise2D(float x, float y, float d) {

$LN7:
	sub	rsp, 88					; 00000058H
	vmovaps	XMMWORD PTR [rsp+64], xmm6
	vmovaps	XMMWORD PTR [rsp+48], xmm7
	vmovaps	xmm7, xmm1

; 422  : 	FILTER(d)

	vmovss	xmm1, DWORD PTR __real@3f99999a
	vmovaps	XMMWORD PTR [rsp+32], xmm8
	vmovaps	xmm8, xmm0
	vdivss	xmm0, xmm2, xmm1
	vmovss	xmm2, DWORD PTR __real@400ccccd
	call	?smooth@@YAMMMM@Z			; smooth
	vcomiss	xmm0, DWORD PTR __real@3f7ff972
	vmovaps	xmm6, xmm0
	jb	SHORT $LN2@fsnoise2D
	vxorps	xmm0, xmm0, xmm0
	jmp	SHORT $LN1@fsnoise2D
$LN2@fsnoise2D:

; 423  : 	return lerp2(d, snoise(x,y), 0.f);

	vmovaps	xmm1, xmm7
	vmovaps	xmm0, xmm8
	call	?snoise@Perlin@@SAMMM@Z			; Perlin::snoise
	vxorps	xmm1, xmm1, xmm1

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm2, xmm1, xmm0
	vmulss	xmm3, xmm2, xmm6
	vaddss	xmm0, xmm3, xmm0
$LN1@fsnoise2D:

; 424  : }

	vmovaps	xmm6, XMMWORD PTR [rsp+64]
	vmovaps	xmm7, XMMWORD PTR [rsp+48]
	vmovaps	xmm8, XMMWORD PTR [rsp+32]
	add	rsp, 88					; 00000058H
	ret	0
?fsnoise2D@Perlin@@SAMMMM@Z ENDP			; Perlin::fsnoise2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?fnoise4D@Perlin@@SAMMMMMM@Z
_TEXT	SEGMENT
x$ = 128
y$ = 136
z$ = 144
w$ = 152
d$ = 160
?fnoise4D@Perlin@@SAMMMMMM@Z PROC			; Perlin::fnoise4D, COMDAT

; 416  : float Perlin::fnoise4D(float x, float y, float z, float w, float d) {

$LN7:
	sub	rsp, 120				; 00000078H

; 417  : 	FILTER(d)

	vmovss	xmm4, DWORD PTR d$[rsp]
	vmovaps	XMMWORD PTR [rsp+96], xmm6
	vmovaps	XMMWORD PTR [rsp+80], xmm7
	vmovaps	XMMWORD PTR [rsp+64], xmm8
	vmovaps	XMMWORD PTR [rsp+48], xmm9
	vmovaps	xmm9, xmm1
	vmovss	xmm1, DWORD PTR __real@3f99999a
	vmovaps	xmm8, xmm2
	vmovss	xmm2, DWORD PTR __real@400ccccd
	vmovaps	XMMWORD PTR [rsp+32], xmm10
	vmovaps	xmm10, xmm0
	vdivss	xmm0, xmm4, xmm1
	vmovaps	xmm7, xmm3
	call	?smooth@@YAMMMM@Z			; smooth
	vcomiss	xmm0, DWORD PTR __real@3f7ff972
	vmovaps	xmm6, xmm0
	jb	SHORT $LN2@fnoise4D
	vxorps	xmm0, xmm0, xmm0
	jmp	SHORT $LN1@fnoise4D
$LN2@fnoise4D:

; 418  : 	return lerp2(d, noise(x,y,z,w), 0.f);

	vmovaps	xmm3, xmm7
	vmovaps	xmm2, xmm8
	vmovaps	xmm1, xmm9
	vmovaps	xmm0, xmm10
	call	?noise@Perlin@@SAMMMMM@Z		; Perlin::noise
	vxorps	xmm1, xmm1, xmm1

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm2, xmm1, xmm0
	vmulss	xmm3, xmm2, xmm6
	vaddss	xmm0, xmm3, xmm0
$LN1@fnoise4D:

; 419  : }	

	vmovaps	xmm6, XMMWORD PTR [rsp+96]
	vmovaps	xmm7, XMMWORD PTR [rsp+80]
	vmovaps	xmm8, XMMWORD PTR [rsp+64]
	vmovaps	xmm9, XMMWORD PTR [rsp+48]
	vmovaps	xmm10, XMMWORD PTR [rsp+32]
	add	rsp, 120				; 00000078H
	ret	0
?fnoise4D@Perlin@@SAMMMMMM@Z ENDP			; Perlin::fnoise4D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?fnoise3D@Perlin@@SAMMMMM@Z
_TEXT	SEGMENT
x$ = 112
y$ = 120
z$ = 128
d$ = 136
?fnoise3D@Perlin@@SAMMMMM@Z PROC			; Perlin::fnoise3D, COMDAT

; 411  : float Perlin::fnoise3D(float x, float y, float z, float d) {

$LN7:
	sub	rsp, 104				; 00000068H
	vmovaps	XMMWORD PTR [rsp+80], xmm6
	vmovaps	XMMWORD PTR [rsp+64], xmm7
	vmovaps	XMMWORD PTR [rsp+48], xmm8
	vmovaps	xmm8, xmm1

; 412  : 	FILTER(d)

	vmovss	xmm1, DWORD PTR __real@3f99999a
	vmovaps	xmm7, xmm2
	vmovss	xmm2, DWORD PTR __real@400ccccd
	vmovaps	XMMWORD PTR [rsp+32], xmm9
	vmovaps	xmm9, xmm0
	vdivss	xmm0, xmm3, xmm1
	call	?smooth@@YAMMMM@Z			; smooth
	vcomiss	xmm0, DWORD PTR __real@3f7ff972
	vmovaps	xmm6, xmm0
	jb	SHORT $LN2@fnoise3D
	vxorps	xmm0, xmm0, xmm0
	jmp	SHORT $LN1@fnoise3D
$LN2@fnoise3D:

; 413  : 	return lerp2(d, noise(x,y,z), 0.f);

	vmovaps	xmm2, xmm7
	vmovaps	xmm1, xmm8
	vmovaps	xmm0, xmm9
	call	?noise@Perlin@@SAMMMM@Z			; Perlin::noise
	vxorps	xmm1, xmm1, xmm1

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm2, xmm1, xmm0
	vmulss	xmm3, xmm2, xmm6
	vaddss	xmm0, xmm3, xmm0
$LN1@fnoise3D:

; 414  : }

	vmovaps	xmm6, XMMWORD PTR [rsp+80]
	vmovaps	xmm7, XMMWORD PTR [rsp+64]
	vmovaps	xmm8, XMMWORD PTR [rsp+48]
	vmovaps	xmm9, XMMWORD PTR [rsp+32]
	add	rsp, 104				; 00000068H
	ret	0
?fnoise3D@Perlin@@SAMMMMM@Z ENDP			; Perlin::fnoise3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?fnoise2D@Perlin@@SAMMMM@Z
_TEXT	SEGMENT
x$ = 96
y$ = 104
d$ = 112
?fnoise2D@Perlin@@SAMMMM@Z PROC				; Perlin::fnoise2D, COMDAT

; 406  : float Perlin::fnoise2D(float x, float y, float d) {

$LN7:
	sub	rsp, 88					; 00000058H
	vmovaps	XMMWORD PTR [rsp+64], xmm6
	vmovaps	XMMWORD PTR [rsp+48], xmm7
	vmovaps	xmm7, xmm1

; 407  : 	FILTER(d)

	vmovss	xmm1, DWORD PTR __real@3f99999a
	vmovaps	XMMWORD PTR [rsp+32], xmm8
	vmovaps	xmm8, xmm0
	vdivss	xmm0, xmm2, xmm1
	vmovss	xmm2, DWORD PTR __real@400ccccd
	call	?smooth@@YAMMMM@Z			; smooth
	vcomiss	xmm0, DWORD PTR __real@3f7ff972
	vmovaps	xmm6, xmm0
	jb	SHORT $LN2@fnoise2D
	vxorps	xmm0, xmm0, xmm0
	jmp	SHORT $LN1@fnoise2D
$LN2@fnoise2D:

; 408  : 	return lerp2(d, noise(x,y), 0.f);

	vmovaps	xmm1, xmm7
	vmovaps	xmm0, xmm8
	call	?noise@Perlin@@SAMMM@Z			; Perlin::noise
	vxorps	xmm1, xmm1, xmm1

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm2, xmm1, xmm0
	vmulss	xmm3, xmm2, xmm6
	vaddss	xmm0, xmm3, xmm0
$LN1@fnoise2D:

; 409  : }

	vmovaps	xmm6, XMMWORD PTR [rsp+64]
	vmovaps	xmm7, XMMWORD PTR [rsp+48]
	vmovaps	xmm8, XMMWORD PTR [rsp+32]
	add	rsp, 88					; 00000058H
	ret	0
?fnoise2D@Perlin@@SAMMMM@Z ENDP				; Perlin::fnoise2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?snoise@Perlin@@SAMMMMM@Z
_TEXT	SEGMENT
j3$1$ = 64
l1$1$ = 256
x$ = 256
l2$1$ = 264
y$ = 264
k2$1$ = 272
z$ = 272
k3$1$ = 280
w$ = 280
?snoise@Perlin@@SAMMMMM@Z PROC				; Perlin::snoise, COMDAT

; 331  : float Perlin::snoise(float x, float y, float z, float w) {

$LN16:
	mov	rax, rsp
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 184				; 000000b8H
	vmovaps	XMMWORD PTR [rax-88], xmm6

; 332  :   
; 333  : 	#define F4 0.309016994f // F4 = (Math.sqrt(5.0)-1.0)/4.0
; 334  : 	#define G4 0.138196601f // G4 = (5.0-Math.sqrt(5.0))/20.0
; 335  : 	#define G4a (G4*2.f)
; 336  : 	#define G4b (G4*3.f)
; 337  : 	#define G4c (G4*4.f-1.f)
; 338  : 
; 339  :     float s = (x + y + z + w) * F4;
; 340  :     float xs = x + s;
; 341  :     float ys = y + s;
; 342  :     float zs = z + s;
; 343  :     float ws = w + s;
; 344  :     int i = FASTFLOOR(xs);
; 345  :     int j = FASTFLOOR(ys);
; 346  :     int k = FASTFLOOR(zs);
; 347  :     int l = FASTFLOOR(ws);
; 348  : 
; 349  :     float t = (i + j + k + l) * G4;
; 350  :     float X0 = i - t; 
; 351  :     float Y0 = j - t;
; 352  :     float Z0 = k - t;
; 353  :     float W0 = l - t;
; 354  : 
; 355  :     float x0 = x - X0;
; 356  :     float y0 = y - Y0;
; 357  :     float z0 = z - Z0;
; 358  :     float w0 = w - W0;
; 359  : 
; 360  :     int c1 = (x0 > y0) ? 32 : 0;
; 361  :     int c2 = (x0 > z0) ? 16 : 0;
; 362  :     int c3 = (y0 > z0) ? 8 : 0;
; 363  :     int c4 = (x0 > w0) ? 4 : 0;
; 364  :     int c5 = (y0 > w0) ? 2 : 0;

	mov	edx, 2
	vmovaps	XMMWORD PTR [rax-104], xmm7
	vmovaps	XMMWORD PTR [rax-120], xmm8
	vaddss	xmm4, xmm0, xmm1
	vmovaps	xmm8, xmm0
	vaddss	xmm5, xmm4, xmm2
	vaddss	xmm4, xmm5, xmm3
	vmulss	xmm5, xmm4, DWORD PTR __real@3e9e377a
	vaddss	xmm4, xmm5, xmm0
	vaddss	xmm6, xmm5, xmm1
	vaddss	xmm7, xmm5, xmm2
	vxorps	xmm0, xmm0, xmm0
	vmovaps	XMMWORD PTR [rsp+112], xmm9
	vmovaps	xmm9, xmm1
	vxorps	xmm1, xmm1, xmm1
	vcomiss	xmm1, xmm4
	vcvttss2si eax, xmm4
	vaddss	xmm5, xmm5, xmm3
	vmovaps	XMMWORD PTR [rsp+96], xmm10
	vmovaps	xmm10, xmm2
	lea	r14d, DWORD PTR [rax-1]
	vmovaps	XMMWORD PTR [rsp+80], xmm11
	cmovbe	r14d, eax
	vcomiss	xmm1, xmm6
	vcvttss2si eax, xmm6
	vmovss	xmm6, DWORD PTR __real@3e0d8369
	vmovaps	xmm11, xmm3
	vxorps	xmm2, xmm2, xmm2
	lea	edi, DWORD PTR [rax-1]
	cmovbe	edi, eax
	vcomiss	xmm1, xmm7
	vcvttss2si eax, xmm7
	vcvtsi2ss xmm2, xmm2, edi
	lea	esi, DWORD PTR [rax-1]
	cmovbe	esi, eax
	vcomiss	xmm1, xmm5
	vcvttss2si eax, xmm5
	lea	ebx, DWORD PTR [rax-1]
	cmovbe	ebx, eax

; 365  :     int c6 = (z0 > w0) ? 1 : 0;

	xor	ebp, ebp
	mov	ecx, ebp
	lea	eax, DWORD PTR [rsi+rdi]
	add	eax, r14d
	add	eax, ebx
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm3, xmm0, xmm6
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, r14d
	vsubss	xmm1, xmm0, xmm3
	vsubss	xmm8, xmm8, xmm1
	vsubss	xmm0, xmm2, xmm3
	vsubss	xmm9, xmm9, xmm0
	vxorps	xmm1, xmm1, xmm1
	vcvtsi2ss xmm1, xmm1, esi
	vsubss	xmm2, xmm1, xmm3
	vsubss	xmm10, xmm10, xmm2
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, ebx
	vsubss	xmm1, xmm0, xmm3
	vsubss	xmm11, xmm11, xmm1
	vcomiss	xmm10, xmm11
	mov	eax, ebp
	seta	cl
	vcomiss	xmm9, xmm11
	cmova	eax, edx
	mov	edx, 4

; 366  :     int c = c1 + c2 + c3 + c4 + c5 + c6;

	add	ecx, eax
	mov	eax, ebp
	vcomiss	xmm8, xmm11
	cmova	eax, edx
	mov	edx, 8
	add	ecx, eax
	mov	eax, ebp
	vcomiss	xmm9, xmm10
	cmova	eax, edx
	mov	edx, 16
	add	ecx, eax
	mov	eax, ebp
	vcomiss	xmm8, xmm10
	cmova	eax, edx
	add	ecx, eax

; 367  : 
; 368  :     int i1, j1, k1, l1;
; 369  :     int i2, j2, k2, l2;
; 370  :     int i3, j3, k3, l3;
; 371  : 
; 372  :     i1 = simplex[c][0]>=3 ? 1 : 0; i2 = simplex[c][0]>=2 ? 1 : 0; i3 = simplex[c][0]>=1 ? 1 : 0;

	lea	r8, OFFSET FLAT:?simplex@@3PAY03EA
	vcomiss	xmm8, xmm9
	mov	eax, ebp
	mov	edx, 32					; 00000020H
	cmova	eax, edx
	mov	r9d, ebp
	add	ecx, eax
	mov	r15d, ebp
	mov	edx, ecx
	mov	r12d, ebp

; 373  :     j1 = simplex[c][1]>=3 ? 1 : 0; j2 = simplex[c][1]>=2 ? 1 : 0; j3 = simplex[c][1]>=1 ? 1 : 0;

	mov	r10d, ebp
	mov	r13d, ebp

; 374  :     k1 = simplex[c][2]>=3 ? 1 : 0; k2 = simplex[c][2]>=2 ? 1 : 0; k3 = simplex[c][2]>=1 ? 1 : 0;

	mov	r11d, ebp
	movzx	eax, BYTE PTR [r8+rcx*4]
	cmp	al, 3
	setae	r9b
	cmp	al, 2
	setae	r15b
	cmp	al, 1
	movzx	eax, BYTE PTR [r8+rcx*4+1]
	mov	ecx, ebp
	setae	r12b
	cmp	al, 3
	setae	r10b
	cmp	al, 2
	setae	r13b
	cmp	al, 1
	movzx	eax, BYTE PTR [r8+rdx*4+2]
	setae	cl
	cmp	al, 3
	mov	DWORD PTR j3$1$[rsp], ecx
	mov	ecx, ebp
	setae	r11b
	cmp	al, 2
	setae	cl
	cmp	al, 1

; 375  :     l1 = simplex[c][3]>=3 ? 1 : 0; l2 = simplex[c][3]>=2 ? 1 : 0; l3 = simplex[c][3]>=1 ? 1 : 0;

	movzx	eax, BYTE PTR [r8+rdx*4+3]
	mov	edx, ebp
	mov	DWORD PTR k2$1$[rsp], ecx
	mov	ecx, ebp
	setae	cl
	cmp	al, 3
	mov	DWORD PTR k3$1$[rsp], ecx
	mov	ecx, ebp
	setae	cl
	cmp	al, 2
	mov	DWORD PTR l1$1$[rsp], ecx
	setae	dl
	cmp	al, 1
	mov	DWORD PTR l2$1$[rsp], edx
	setae	bpl

; 381  : 
; 382  :     int ii = i % 256;

	and	r14d, -2147483393			; ffffffff800000ffH
	jge	SHORT $LN14@snoise
	dec	r14d
	or	r14d, -256				; ffffffffffffff00H
	inc	r14d
$LN14@snoise:

; 383  :     int jj = j % 256;

	and	edi, -2147483393			; ffffffff800000ffH
	jge	SHORT $LN13@snoise
	dec	edi
	or	edi, -256				; ffffffffffffff00H
	inc	edi
$LN13@snoise:

; 384  :     int kk = k % 256;

	and	esi, -2147483393			; ffffffff800000ffH
	jge	SHORT $LN12@snoise
	dec	esi
	or	esi, -256				; ffffffffffffff00H
	inc	esi
$LN12@snoise:

; 385  :     int ll = l % 256;

	and	ebx, -2147483393			; ffffffff800000ffH
	jge	SHORT $LN11@snoise
	dec	ebx
	or	ebx, -256				; ffffffffffffff00H
	inc	ebx
$LN11@snoise:

; 376  : 
; 377  : 	float x1 = x0 - i1 + G4,  x2 = x0 - i2 + G4a,  x3 = x0 - i3 + G4b,  x4 = x0 + G4c;
; 378  :     float y1 = y0 - j1 + G4,  y2 = y0 - j2 + G4a,  y3 = y0 - j3 + G4b,  y4 = y0 + G4c;
; 379  :     float z1 = z0 - k1 + G4,  z2 = z0 - k2 + G4a,  z3 = z0 - k3 + G4b,  z4 = z0 + G4c;
; 380  :     float w1 = w0 - l1 + G4,  w2 = w0 - l2 + G4a,  w3 = w0 - l3 + G4b,  w4 = w0 + G4c;

	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, DWORD PTR l1$1$[rsp]
	vsubss	xmm1, xmm11, xmm0
	vaddss	xmm3, xmm1, xmm6
	vxorps	xmm2, xmm2, xmm2
	vcvtsi2ss xmm2, xmm2, r11d
	vsubss	xmm0, xmm10, xmm2
	vaddss	xmm2, xmm0, xmm6
	vxorps	xmm0, xmm0, xmm0
	vxorps	xmm1, xmm1, xmm1
	vcvtsi2ss xmm0, xmm0, r9d

; 386  : 
; 387  : 	return 27.0f * (point(x0, y0, z0, w0, ii,    jj,    kk,    ll) +

	lea	eax, DWORD PTR [rbx+rcx]
	mov	DWORD PTR [rsp+56], eax
	lea	ecx, DWORD PTR [rsi+r11]
	vcvtsi2ss xmm1, xmm1, r10d
	mov	DWORD PTR [rsp+48], ecx
	lea	edx, DWORD PTR [rdi+r10]
	vsubss	xmm5, xmm8, xmm0
	vsubss	xmm4, xmm9, xmm1
	lea	r8d, DWORD PTR [r14+r9]
	mov	DWORD PTR [rsp+40], edx
	vaddss	xmm0, xmm5, xmm6
	vaddss	xmm1, xmm4, xmm6
	mov	DWORD PTR [rsp+32], r8d
	call	?point@Perlin@@CAMMMMMHHHH@Z		; Perlin::point
	mov	DWORD PTR [rsp+56], ebx
	vmovaps	xmm6, xmm0
	mov	DWORD PTR [rsp+48], esi
	mov	DWORD PTR [rsp+40], edi
	vmovaps	xmm0, xmm8
	vmovaps	xmm3, xmm11
	vmovaps	xmm2, xmm10
	vmovaps	xmm1, xmm9
	mov	DWORD PTR [rsp+32], r14d
	call	?point@Perlin@@CAMMMMMHHHH@Z		; Perlin::point
	mov	r10d, DWORD PTR l2$1$[rsp]
	lea	edx, DWORD PTR [rdi+r13]
	mov	r9d, DWORD PTR k2$1$[rsp]
	lea	r8d, DWORD PTR [r14+r15]
	vaddss	xmm7, xmm6, xmm0
	vmovss	xmm6, DWORD PTR __real@3e8d8369
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, r10d
	vsubss	xmm1, xmm11, xmm0
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, r9d
	vxorps	xmm4, xmm4, xmm4
	vaddss	xmm3, xmm1, xmm6
	vsubss	xmm1, xmm10, xmm0
	vcvtsi2ss xmm4, xmm4, r13d
	vsubss	xmm0, xmm9, xmm4
	vxorps	xmm5, xmm5, xmm5
	lea	eax, DWORD PTR [rbx+r10]
	mov	DWORD PTR [rsp+56], eax
	lea	ecx, DWORD PTR [rsi+r9]
	mov	DWORD PTR [rsp+48], ecx
	vcvtsi2ss xmm5, xmm5, r15d
	vaddss	xmm2, xmm1, xmm6
	vsubss	xmm4, xmm8, xmm5
	vaddss	xmm1, xmm0, xmm6
	mov	DWORD PTR [rsp+40], edx
	vaddss	xmm0, xmm4, xmm6
	mov	DWORD PTR [rsp+32], r8d
	call	?point@Perlin@@CAMMMMMHHHH@Z		; Perlin::point
	mov	r10d, DWORD PTR k3$1$[rsp]
	lea	eax, DWORD PTR [rbx+rbp]
	vmovss	xmm6, DWORD PTR __real@3ed4451e
	mov	r9d, DWORD PTR j3$1$[rsp]
	lea	r8d, DWORD PTR [r14+r12]
	vaddss	xmm7, xmm7, xmm0
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, ebp
	vsubss	xmm1, xmm11, xmm0
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, r10d
	vaddss	xmm3, xmm1, xmm6
	vsubss	xmm1, xmm10, xmm0
	vaddss	xmm2, xmm1, xmm6
	lea	ecx, DWORD PTR [rsi+r10]
	lea	edx, DWORD PTR [rdi+r9]
	vxorps	xmm4, xmm4, xmm4
	mov	DWORD PTR [rsp+56], eax
	vcvtsi2ss xmm4, xmm4, r9d
	vsubss	xmm0, xmm9, xmm4
	mov	DWORD PTR [rsp+48], ecx
	vxorps	xmm5, xmm5, xmm5
	vcvtsi2ss xmm5, xmm5, r12d
	vsubss	xmm4, xmm8, xmm5
	vaddss	xmm1, xmm0, xmm6
	mov	DWORD PTR [rsp+40], edx
	vaddss	xmm0, xmm4, xmm6
	mov	DWORD PTR [rsp+32], r8d
	call	?point@Perlin@@CAMMMMMHHHH@Z		; Perlin::point
	vaddss	xmm6, xmm7, xmm0
	vmovss	xmm0, DWORD PTR __real@3ee4f92e
	lea	eax, DWORD PTR [rbx+1]
	mov	DWORD PTR [rsp+56], eax
	lea	ecx, DWORD PTR [rsi+1]
	mov	DWORD PTR [rsp+48], ecx
	lea	edx, DWORD PTR [rdi+1]
	vsubss	xmm3, xmm11, xmm0
	vsubss	xmm2, xmm10, xmm0
	vsubss	xmm1, xmm9, xmm0
	lea	r8d, DWORD PTR [r14+1]
	mov	DWORD PTR [rsp+40], edx
	vsubss	xmm0, xmm8, xmm0
	mov	DWORD PTR [rsp+32], r8d
	call	?point@Perlin@@CAMMMMMHHHH@Z		; Perlin::point

; 388  : 					point(x1, y1, z1, w1, ii+i1, jj+j1, kk+k1, ll+l1) +
; 389  : 					point(x2, y2, z2, w2, ii+i2, jj+j2, kk+k2, ll+l2) +
; 390  : 					point(x3, y3, z3, w3, ii+i3, jj+j3, kk+k3, ll+l3) +
; 391  : 					point(x4, y4, z4, w4, ii+1,  jj+1,  kk+1,  ll+1));
; 392  : }

	lea	r11, QWORD PTR [rsp+184]
	vmovaps	xmm7, XMMWORD PTR [r11-40]
	vmovaps	xmm8, XMMWORD PTR [r11-56]
	vmovaps	xmm9, XMMWORD PTR [r11-72]
	vmovaps	xmm10, XMMWORD PTR [r11-88]
	vmovaps	xmm11, XMMWORD PTR [r11-104]
	vaddss	xmm1, xmm6, xmm0
	vmulss	xmm0, xmm1, DWORD PTR __real@41d80000
	vmovaps	xmm6, XMMWORD PTR [r11-24]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?snoise@Perlin@@SAMMMMM@Z ENDP				; Perlin::snoise
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?snoise@Perlin@@SAMMMM@Z
_TEXT	SEGMENT
x$ = 176
y$ = 184
z$ = 192
?snoise@Perlin@@SAMMMM@Z PROC				; Perlin::snoise, COMDAT

; 281  : float Perlin::snoise(float x, float y, float z) {

$LN24:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 144				; 00000090H
	vmovaps	XMMWORD PTR [rax-40], xmm6
	vmovaps	XMMWORD PTR [rax-56], xmm7

; 282  : 
; 283  : 	#define F3 0.333333333f
; 284  : 	#define G3 0.166666667f
; 285  : 	#define G3a	(2.0f * G3)
; 286  : 	#define G3b (3.0f * G3 - 1.0f)
; 287  : 
; 288  :     float s = (x+y+z)*F3;

	vaddss	xmm3, xmm0, xmm1
	vmovaps	XMMWORD PTR [rax-72], xmm8
	vmovaps	XMMWORD PTR [rax-88], xmm9
	vaddss	xmm4, xmm3, xmm2
	vmovaps	XMMWORD PTR [rax-104], xmm10
	vmovaps	XMMWORD PTR [rax-120], xmm11
	vmovss	xmm11, DWORD PTR __real@3eaaaaab
	vmovaps	xmm6, xmm0
	vmovaps	xmm8, xmm2
	vmulss	xmm5, xmm4, xmm11

; 289  :     float xs = x+s;

	vaddss	xmm3, xmm5, xmm0

; 290  :     float ys = y+s;

	vaddss	xmm4, xmm5, xmm1

; 291  :     float zs = z+s;

	vaddss	xmm5, xmm5, xmm2
	vxorps	xmm2, xmm2, xmm2

; 292  :     int i = FASTFLOOR(xs);
; 293  :     int j = FASTFLOOR(ys);

	vcomiss	xmm2, xmm3
	vcvttss2si eax, xmm3
	vmovaps	xmm7, xmm1
	vxorps	xmm0, xmm0, xmm0
	lea	edi, DWORD PTR [rax-1]
	cmovbe	edi, eax

; 294  :     int k = FASTFLOOR(zs);

	vcomiss	xmm2, xmm4
	vcvttss2si eax, xmm4
	lea	esi, DWORD PTR [rax-1]
	cmovbe	esi, eax

; 295  : 
; 296  :     float t = (float)(i+j+k)*G3; 

	vcomiss	xmm2, xmm5
	vcvttss2si eax, xmm5
	vmovss	xmm5, DWORD PTR __real@3e2aaaab
	vxorps	xmm2, xmm2, xmm2

; 297  :     float X0 = i-t;
; 298  :     float Y0 = j-t;

	vcvtsi2ss xmm2, xmm2, esi
	lea	ebx, DWORD PTR [rax-1]
	cmovbe	ebx, eax
	lea	eax, DWORD PTR [rbx+rsi]
	add	eax, edi
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm3, xmm0, xmm5
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, edi
	vsubss	xmm1, xmm0, xmm3

; 299  :     float Z0 = k-t;
; 300  :     float x0 = x-X0;

	vsubss	xmm9, xmm6, xmm1
	vsubss	xmm0, xmm2, xmm3

; 301  :     float y0 = y-Y0;

	vsubss	xmm10, xmm7, xmm0

; 302  :     float z0 = z-Z0;
; 303  : 
; 304  :     int i1, j1, k1;
; 305  :     int i2, j2, k2;
; 306  : 
; 307  :     if(x0>=y0) {

	vcomiss	xmm9, xmm10
	vxorps	xmm1, xmm1, xmm1
	vcvtsi2ss xmm1, xmm1, ebx
	vsubss	xmm2, xmm1, xmm3
	vsubss	xmm7, xmm8, xmm2
	jb	SHORT $LN2@snoise

; 308  : 		if(y0>=z0)		{ i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }

	vcomiss	xmm10, xmm7
	jb	SHORT $LN4@snoise
	mov	edx, 1
	xor	r8d, r8d
	xor	r14d, r14d
	mov	ebp, edx

; 311  : 	} else {

	xor	r10d, r10d
	mov	r15d, edx
	jmp	SHORT $LN11@snoise
$LN4@snoise:

; 309  :         else if(x0>=z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }

	vcomiss	xmm9, xmm7
	jb	SHORT $LN6@snoise
	mov	edx, 1
	xor	r8d, r8d

; 311  : 	} else {

	xor	ebp, ebp
	mov	r14d, edx
	xor	r10d, r10d
	mov	r15d, edx
	jmp	SHORT $LN11@snoise
$LN6@snoise:

; 310  :         else			{ i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }

	mov	r8d, 1
	xor	edx, edx

; 311  : 	} else {

	xor	ebp, ebp
	mov	r14d, r8d
	xor	r10d, r10d
	mov	r15d, r8d
	jmp	SHORT $LN11@snoise
$LN2@snoise:

; 312  : 		if(y0<z0)		{ i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }

	xor	edx, edx
	vcomiss	xmm7, xmm10
	jbe	SHORT $LN8@snoise
	mov	r8d, 1
	xor	r10d, r10d
	xor	r15d, r15d
	mov	ebp, r8d
	mov	r14d, r8d
	jmp	SHORT $LN11@snoise
$LN8@snoise:

; 313  : 		else if(x0<z0)	{ i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }

	xor	r8d, r8d
	mov	r10d, 1
	vcomiss	xmm7, xmm9
	mov	ebp, r10d
	jbe	SHORT $LN10@snoise
	xor	r15d, r15d
	mov	r14d, r10d
	jmp	SHORT $LN11@snoise
$LN10@snoise:

; 314  : 		else			{ i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }

	mov	r15d, ebp
	xor	r14d, r14d
$LN11@snoise:

; 320  : 
; 321  :     int ii = i % 256;

	and	edi, -2147483393			; ffffffff800000ffH
	jge	SHORT $LN21@snoise
	dec	edi
	or	edi, -256				; ffffffffffffff00H
	inc	edi
$LN21@snoise:

; 322  :     int jj = j % 256;

	and	esi, -2147483393			; ffffffff800000ffH
	jge	SHORT $LN20@snoise
	dec	esi
	or	esi, -256				; ffffffffffffff00H
	inc	esi
$LN20@snoise:

; 323  :     int kk = k % 256;

	and	ebx, -2147483393			; ffffffff800000ffH
	jge	SHORT $LN19@snoise
	dec	ebx
	or	ebx, -256				; ffffffffffffff00H
	inc	ebx
$LN19@snoise:

; 315  :     }
; 316  : 
; 317  :     float x1 = x0 - i1 + G3,  x2 = x0 - i2 + G3a,  x3 = x0 + G3b;
; 318  :     float y1 = y0 - j1 + G3,  y2 = y0 - j2 + G3a,  y3 = y0 + G3b;
; 319  :     float z1 = z0 - k1 + G3,  z2 = z0 - k2 + G3a,  z3 = z0 + G3b;

	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, r8d
	vsubss	xmm1, xmm7, xmm0
	vxorps	xmm3, xmm3, xmm3
	vcvtsi2ss xmm3, xmm3, r10d
	vsubss	xmm0, xmm10, xmm3
	vxorps	xmm4, xmm4, xmm4
	vcvtsi2ss xmm4, xmm4, edx
	vaddss	xmm2, xmm1, xmm5
	vsubss	xmm3, xmm9, xmm4

; 324  : 
; 325  : 	return 32.0f * (point(x0, y0, z0, ii,    jj,    kk) +

	lea	eax, DWORD PTR [rbx+r8]
	vaddss	xmm1, xmm0, xmm5
	lea	ecx, DWORD PTR [rsi+r10]
	mov	DWORD PTR [rsp+40], eax
	vaddss	xmm0, xmm3, xmm5
	lea	r9d, DWORD PTR [rdi+rdx]
	mov	DWORD PTR [rsp+32], ecx
	call	?point@Perlin@@CAMMMMHHH@Z		; Perlin::point
	vmovaps	xmm6, xmm0
	vmovaps	xmm0, xmm9
	mov	DWORD PTR [rsp+40], ebx
	mov	r9d, edi
	vmovaps	xmm2, xmm7
	vmovaps	xmm1, xmm10
	mov	DWORD PTR [rsp+32], esi
	call	?point@Perlin@@CAMMMMHHH@Z		; Perlin::point
	vaddss	xmm6, xmm6, xmm0
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, r14d
	vsubss	xmm1, xmm7, xmm0
	vxorps	xmm3, xmm3, xmm3
	vcvtsi2ss xmm3, xmm3, ebp
	vsubss	xmm0, xmm10, xmm3
	vxorps	xmm4, xmm4, xmm4
	vcvtsi2ss xmm4, xmm4, r15d
	vaddss	xmm2, xmm1, xmm11
	vsubss	xmm3, xmm9, xmm4
	lea	eax, DWORD PTR [rbx+r14]
	vaddss	xmm1, xmm0, xmm11
	lea	ecx, DWORD PTR [rsi+rbp]
	mov	DWORD PTR [rsp+40], eax
	vaddss	xmm0, xmm3, xmm11
	lea	r9d, DWORD PTR [rdi+r15]
	mov	DWORD PTR [rsp+32], ecx
	call	?point@Perlin@@CAMMMMHHH@Z		; Perlin::point
	vaddss	xmm6, xmm6, xmm0
	vmovss	xmm0, DWORD PTR __real@3f000000
	lea	eax, DWORD PTR [rbx+1]
	vsubss	xmm2, xmm7, xmm0
	vsubss	xmm1, xmm10, xmm0
	lea	ecx, DWORD PTR [rsi+1]
	mov	DWORD PTR [rsp+40], eax
	vsubss	xmm0, xmm9, xmm0
	lea	r9d, DWORD PTR [rdi+1]
	mov	DWORD PTR [rsp+32], ecx
	call	?point@Perlin@@CAMMMMHHH@Z		; Perlin::point

; 326  : 					point(x1, y1, z1, ii+i1, jj+j1, kk+k1) +
; 327  : 					point(x2, y2, z2, ii+i2, jj+j2, kk+k2) +
; 328  : 					point(x3, y3, z3, ii+1,  jj+1,  kk+1));
; 329  : }

	vmovaps	xmm7, XMMWORD PTR [rsp+112]
	lea	r11, QWORD PTR [rsp+144]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	vmovaps	xmm8, XMMWORD PTR [r11-48]
	vmovaps	xmm9, XMMWORD PTR [r11-64]
	vmovaps	xmm10, XMMWORD PTR [r11-80]
	vmovaps	xmm11, XMMWORD PTR [r11-96]
	vaddss	xmm1, xmm6, xmm0
	vmulss	xmm0, xmm1, DWORD PTR __real@42000000
	vmovaps	xmm6, XMMWORD PTR [r11-16]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rdi
	ret	0
?snoise@Perlin@@SAMMMM@Z ENDP				; Perlin::snoise
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?snoise@Perlin@@SAMMM@Z
_TEXT	SEGMENT
x$ = 208
y$ = 216
?snoise@Perlin@@SAMMM@Z PROC				; Perlin::snoise, COMDAT

; 249  : float Perlin::snoise(float x, float y) {

$LN21:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 176				; 000000b0H

; 250  : 
; 251  : 	#define F2 0.366025403f // F2 = 0.5*(sqrt(3.0)-1.0)
; 252  : 	#define G2 0.211324865f // G2 = (3.0-Math.sqrt(3.0))/6.0
; 253  : 
; 254  :     float s = (x+y)*F2;

	vaddss	xmm2, xmm0, xmm1
	vmulss	xmm3, xmm2, DWORD PTR __real@3ebb67ae

; 255  :     float xs = x + s;

	vaddss	xmm4, xmm3, xmm0
	vmovaps	XMMWORD PTR [rax-40], xmm6
	vmovaps	XMMWORD PTR [rax-56], xmm7
	vmovaps	xmm6, xmm0
	vmovaps	XMMWORD PTR [rax-72], xmm8
	vmovaps	XMMWORD PTR [rax-88], xmm9
	vxorps	xmm0, xmm0, xmm0
	vmovaps	XMMWORD PTR [rax-104], xmm10
	vmovaps	XMMWORD PTR [rax-120], xmm11

; 256  :     float ys = y + s;

	vaddss	xmm5, xmm3, xmm1
	vcvttss2si eax, xmm4
	vmovaps	xmm7, xmm1
	vxorps	xmm8, xmm8, xmm8

; 257  :     int i = FASTFLOOR(xs);
; 258  :     int j = FASTFLOOR(ys);

	vcomiss	xmm8, xmm4

; 259  : 
; 260  :     float t = (float)(i+j)*G2;

	vmovss	xmm4, DWORD PTR __real@3e58658c
	lea	edi, DWORD PTR [rax-1]
	vmovaps	XMMWORD PTR [rsp+64], xmm12
	cmovbe	edi, eax
	vmovaps	XMMWORD PTR [rsp+48], xmm13
	vcvttss2si eax, xmm5
	vcomiss	xmm8, xmm5
	vxorps	xmm2, xmm2, xmm2
	vmovaps	XMMWORD PTR [rsp+32], xmm14
	lea	ebx, DWORD PTR [rax-1]
	cmovbe	ebx, eax

; 261  :     float X0 = i-t;
; 262  :     float Y0 = j-t;
; 263  :     float x0 = x-X0;
; 264  :     float y0 = y-Y0;
; 265  : 
; 266  :     int i1, j1;
; 267  :     if(x0>y0) {i1=1; j1=0;}
; 268  :     else {i1=0; j1=1;}
; 269  : 
; 270  :     float x1 = x0 - i1 + G2, x2 = x0 - 1.0f + 2.0f * G2;

	xor	ebp, ebp
	mov	r14d, ebp
	vcvtsi2ss xmm2, xmm2, ebx
	lea	eax, DWORD PTR [rbx+rdi]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm3, xmm0, xmm4
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, edi
	vsubss	xmm1, xmm0, xmm3
	vsubss	xmm5, xmm6, xmm1
	vsubss	xmm0, xmm2, xmm3
	vsubss	xmm9, xmm7, xmm0

; 271  :     float y1 = y0 - j1 + G2, y2 = y0 - 1.0f + 2.0f * G2;     

	vsubss	xmm2, xmm9, DWORD PTR __real@3f800000
	vaddss	xmm12, xmm2, DWORD PTR __real@3ed8658c
	vxorps	xmm0, xmm0, xmm0
	vcomiss	xmm5, xmm9
	seta	bpl
	setbe	r14b
	vcvtsi2ss xmm0, xmm0, ebp
	vsubss	xmm1, xmm5, xmm0
	vsubss	xmm0, xmm5, DWORD PTR __real@3f800000
	vaddss	xmm11, xmm0, DWORD PTR __real@3ed8658c
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, r14d
	vaddss	xmm13, xmm1, xmm4
	vsubss	xmm1, xmm9, xmm0
	vaddss	xmm14, xmm1, xmm4

; 272  : 
; 273  :     int ii = i % 256;

	and	edi, -2147483393			; ffffffff800000ffH
	jge	SHORT $LN19@snoise
	dec	edi
	or	edi, -256				; ffffffffffffff00H
	inc	edi
$LN19@snoise:

; 274  :     int jj = j % 256;

	and	ebx, -2147483393			; ffffffff800000ffH
	jge	SHORT $LN18@snoise
	dec	ebx
	or	ebx, -256				; ffffffffffffff00H
	inc	ebx
$LN18@snoise:

; 216  :     float t = 0.5f - x*x - y*y;

	vmovss	xmm7, DWORD PTR __real@3f000000
	vmulss	xmm0, xmm5, xmm5
	vsubss	xmm1, xmm7, xmm0
	vmulss	xmm0, xmm9, xmm9
	vsubss	xmm2, xmm1, xmm0

; 217  :     if(t < 0.0f) 

	vcomiss	xmm8, xmm2
	movsxd	rsi, ebx
	lea	r15, OFFSET FLAT:?perm@@3PAEA
	jbe	SHORT $LN10@snoise
	vxorps	xmm10, xmm10, xmm10

; 218  : 		return 0.0f;

	jmp	SHORT $LN9@snoise
$LN10@snoise:

; 219  :     t *= t;
; 220  :     return t * t * grad(perm[i+perm[j]], x, y);

	movzx	eax, BYTE PTR [rsi+r15]
	add	eax, edi
	movsxd	rcx, eax
	vmulss	xmm6, xmm2, xmm2
	vmovaps	xmm2, xmm9
	vmovaps	xmm1, xmm5
	movzx	ecx, BYTE PTR [rcx+r15]
	call	?grad@Perlin@@CAMHMM@Z			; Perlin::grad
	vmulss	xmm1, xmm6, xmm6
	vmulss	xmm10, xmm0, xmm1
$LN9@snoise:

; 216  :     float t = 0.5f - x*x - y*y;

	vmulss	xmm0, xmm13, xmm13
	vsubss	xmm1, xmm7, xmm0
	vmulss	xmm0, xmm14, xmm14
	vsubss	xmm2, xmm1, xmm0

; 217  :     if(t < 0.0f) 

	vcomiss	xmm8, xmm2
	jbe	SHORT $LN13@snoise
	vxorps	xmm9, xmm9, xmm9

; 218  : 		return 0.0f;

	jmp	SHORT $LN12@snoise
$LN13@snoise:

; 275  : 
; 276  :     return 40.0f * (point(x0, y0, ii,    jj) +

	lea	eax, DWORD PTR [r14+rbx]

; 220  :     return t * t * grad(perm[i+perm[j]], x, y);

	movsxd	rcx, eax
	vmulss	xmm6, xmm2, xmm2
	vmovaps	xmm2, xmm14
	vmovaps	xmm1, xmm13
	movzx	eax, BYTE PTR [rcx+r15]
	add	eax, ebp
	add	eax, edi
	cdqe
	movzx	ecx, BYTE PTR [rax+r15]
	call	?grad@Perlin@@CAMHMM@Z			; Perlin::grad
	vmulss	xmm1, xmm6, xmm6
	vmulss	xmm9, xmm0, xmm1
$LN12@snoise:

; 216  :     float t = 0.5f - x*x - y*y;

	vmulss	xmm0, xmm11, xmm11
	vsubss	xmm1, xmm7, xmm0
	vmulss	xmm0, xmm12, xmm12
	vsubss	xmm2, xmm1, xmm0

; 217  :     if(t < 0.0f) 

	vcomiss	xmm8, xmm2
	ja	SHORT $LN15@snoise

; 219  :     t *= t;
; 220  :     return t * t * grad(perm[i+perm[j]], x, y);

	movzx	eax, BYTE PTR [rsi+r15+1]
	add	eax, edi
	movsxd	rcx, eax
	vmulss	xmm6, xmm2, xmm2
	vmovaps	xmm2, xmm12
	vmovaps	xmm1, xmm11
	movzx	ecx, BYTE PTR [rcx+r15+1]
	call	?grad@Perlin@@CAMHMM@Z			; Perlin::grad
	vmulss	xmm1, xmm6, xmm6
	vmulss	xmm8, xmm0, xmm1
$LN15@snoise:

; 277  : 					point(x1, y1, ii+i1, jj+j1) +
; 278  : 					point(x2, y2, ii+1,  jj+1));
; 279  : }

	vmovaps	xmm14, XMMWORD PTR [rsp+32]
	lea	r11, QWORD PTR [rsp+176]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	vmovaps	xmm6, XMMWORD PTR [r11-16]
	vmovaps	xmm7, XMMWORD PTR [r11-32]
	vmovaps	xmm11, XMMWORD PTR [r11-96]
	vmovaps	xmm12, XMMWORD PTR [r11-112]
	vmovaps	xmm13, XMMWORD PTR [r11-128]
	vaddss	xmm0, xmm9, xmm10
	vmovaps	xmm9, XMMWORD PTR [r11-64]
	vmovaps	xmm10, XMMWORD PTR [r11-80]
	vaddss	xmm1, xmm0, xmm8
	vmulss	xmm0, xmm1, DWORD PTR __real@42200000
	vmovaps	xmm8, XMMWORD PTR [r11-48]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rdi
	ret	0
?snoise@Perlin@@SAMMM@Z ENDP				; Perlin::snoise
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?snoise@Perlin@@SAMM@Z
_TEXT	SEGMENT
x$ = 48
?snoise@Perlin@@SAMM@Z PROC				; Perlin::snoise, COMDAT

; 241  : float Perlin::snoise(float x) {

$LN16:
	sub	rsp, 40					; 00000028H

; 70   :     if (h&8) grad = -grad;

	vmovss	xmm3, DWORD PTR __xmm@80000000800000008000000080000000

; 241  : float Perlin::snoise(float x) {

	vcvttss2si eax, xmm0
	vxorps	xmm1, xmm1, xmm1

; 242  : 	int i0 = FASTFLOOR(x);
; 243  : 	int i1 = i0 + 1;

	vcomiss	xmm1, xmm0
	vxorps	xmm1, xmm1, xmm1
	lea	ecx, DWORD PTR [rax-1]
	vmovaps	XMMWORD PTR [rsp+16], xmm6
	cmovbe	ecx, eax
	vmovaps	XMMWORD PTR [rsp], xmm7

; 244  : 	float x0 = x - i0;

	vcvtsi2ss xmm1, xmm1, ecx
	vsubss	xmm7, xmm0, xmm1

; 245  : 	float x1 = x0 - 1.0f;

	vmovss	xmm1, DWORD PTR __real@3f800000

; 212  : 	return t * t * grad(perm[i & 255], x);

	movsxd	rdx, ecx
	lea	r8, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, dl
	vmulss	xmm0, xmm7, xmm7
	vsubss	xmm0, xmm1, xmm0
	vmulss	xmm6, xmm0, xmm0
	movzx	ecx, BYTE PTR [rax+r8]

; 69   :     float grad = 1.0f + (h & 7);

	mov	eax, ecx
	and	eax, 7
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vaddss	xmm2, xmm0, xmm1

; 245  : 	float x1 = x0 - 1.0f;

	vsubss	xmm5, xmm7, xmm1

; 70   :     if (h&8) grad = -grad;

	test	cl, 8
	je	SHORT $LN8@snoise
	vxorps	xmm2, xmm2, xmm3
$LN8@snoise:

; 212  : 	return t * t * grad(perm[i & 255], x);

	lea	rax, QWORD PTR [rdx+1]
	movzx	ecx, al
	vmulss	xmm0, xmm5, xmm5
	vsubss	xmm0, xmm1, xmm0
	vmulss	xmm4, xmm0, xmm0
	movzx	edx, BYTE PTR [rcx+r8]

; 69   :     float grad = 1.0f + (h & 7);

	mov	eax, edx
	and	eax, 7
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vaddss	xmm1, xmm0, xmm1

; 70   :     if (h&8) grad = -grad;

	test	dl, 8
	je	SHORT $LN13@snoise
	vxorps	xmm1, xmm1, xmm3
$LN13@snoise:

; 71   :     return ( grad * x );

	vmulss	xmm2, xmm2, xmm7

; 247  : }

	vmovaps	xmm7, XMMWORD PTR [rsp]

; 71   :     return ( grad * x );

	vmulss	xmm1, xmm1, xmm5

; 212  : 	return t * t * grad(perm[i & 255], x);

	vmulss	xmm0, xmm4, xmm4
	vmulss	xmm3, xmm1, xmm0
	vmulss	xmm1, xmm6, xmm6

; 247  : }

	vmovaps	xmm6, XMMWORD PTR [rsp+16]

; 212  : 	return t * t * grad(perm[i & 255], x);

	vmulss	xmm0, xmm2, xmm1

; 246  : 	return (1.f/2.53125f) * (point(x0, i0) + point(x1, i1));

	vaddss	xmm2, xmm3, xmm0
	vmulss	xmm0, xmm2, DWORD PTR __real@3eca4588

; 247  : }

	add	rsp, 40					; 00000028H
	ret	0
?snoise@Perlin@@SAMM@Z ENDP				; Perlin::snoise
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?noise@Perlin@@SAMMMMM@Z
_TEXT	SEGMENT
zf1$1$ = 48
wi$1$ = 52
i$1$ = 56
zf0$1$ = 60
j$1$ = 64
k$1$ = 68
yf1$1$ = 320
x$ = 320
xf1$1$ = 328
y$ = 328
wf0$1$ = 336
z$ = 336
wf1$1$ = 344
w$ = 344
?noise@Perlin@@SAMMMMM@Z PROC				; Perlin::noise, COMDAT

; 155  : float Perlin::noise(float x, float y, float z, float w) {

$LN42:
	mov	rax, rsp
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 248				; 000000f8H
	vmovaps	XMMWORD PTR [rax-88], xmm6
	vcvttss2si ecx, xmm0
	vmovaps	xmm5, xmm0
	vmovaps	XMMWORD PTR [rax-104], xmm7
	vmovaps	xmm6, xmm1
	vmovaps	XMMWORD PTR [rax-120], xmm8

; 156  :     int xi = FASTFLOOR(x);
; 157  : 	int yi = FASTFLOOR(y);

	lea	r10d, DWORD PTR [rcx-1]
	vmovaps	XMMWORD PTR [rax-136], xmm9
	vmovaps	XMMWORD PTR [rax-152], xmm10
	vmovaps	XMMWORD PTR [rax-168], xmm11
	vmovaps	XMMWORD PTR [rax-184], xmm12
	vcvttss2si eax, xmm1
	vxorps	xmm4, xmm4, xmm4
	vcomiss	xmm4, xmm0
	vxorps	xmm0, xmm0, xmm0
	cmovbe	r10d, ecx
	vmovaps	XMMWORD PTR [rsp+112], xmm13

; 158  : 	int zi = FASTFLOOR(z);

	vcomiss	xmm4, xmm1

; 159  : 	int wi = FASTFLOOR(w);
; 160  :     float xf0 = x - xi;

	vcvtsi2ss xmm0, xmm0, r10d
	vxorps	xmm1, xmm1, xmm1
	lea	r8d, DWORD PTR [rax-1]
	vmovaps	XMMWORD PTR [rsp+96], xmm14
	cmovbe	r8d, eax
	vmovaps	XMMWORD PTR [rsp+80], xmm15
	vsubss	xmm15, xmm5, xmm0

; 161  :     float yf0 = y - yi;
; 162  : 	float zf0 = z - zi;
; 163  : 	float wf0 = w - wi;
; 164  :     float xf1 = xf0 - 1.0f;
; 165  :     float yf1 = yf0 - 1.0f;
; 166  : 	float zf1 = zf0 - 1.0f;
; 167  : 	float wf1 = wf0 - 1.0f;
; 168  :     xi = xi & 255;
; 169  :     yi = yi & 255;   
; 170  : 	zi = zi & 255;
; 171  : 	wi = wi & 255;
; 172  :     float i = FADE(xf0);

	vmovss	xmm5, DWORD PTR __real@41700000
	vcvtsi2ss xmm1, xmm1, r8d
	vsubss	xmm9, xmm6, xmm1
	vmovss	xmm6, DWORD PTR __real@40c00000
	vcvttss2si eax, xmm2
	vcomiss	xmm4, xmm2
	vxorps	xmm0, xmm0, xmm0
	vxorps	xmm1, xmm1, xmm1
	lea	edx, DWORD PTR [rax-1]
	movzx	r9d, r8b
	cmovbe	edx, eax
	vcvtsi2ss xmm0, xmm0, edx
	vsubss	xmm7, xmm2, xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vsubss	xmm13, xmm15, xmm0
	vsubss	xmm8, xmm9, xmm0
	vsubss	xmm12, xmm7, xmm0
	vcvttss2si eax, xmm3
	vcomiss	xmm4, xmm3
	vmovss	xmm4, DWORD PTR __real@41200000
	vmovss	DWORD PTR zf0$1$[rsp], xmm7
	lea	ecx, DWORD PTR [rax-1]
	movzx	r8d, dl
	cmovbe	ecx, eax
	vcvtsi2ss xmm1, xmm1, ecx
	vsubss	xmm14, xmm3, xmm1
	vsubss	xmm11, xmm14, xmm0
	vmulss	xmm0, xmm15, xmm6
	vsubss	xmm0, xmm0, xmm5
	vmulss	xmm1, xmm0, xmm15
	vaddss	xmm2, xmm1, xmm4
	vmulss	xmm0, xmm15, xmm15
	vmulss	xmm1, xmm0, xmm15
	vmulss	xmm10, xmm2, xmm1

; 173  :     float j = FADE(yf0);

	vmulss	xmm2, xmm9, xmm6
	vsubss	xmm0, xmm2, xmm5
	vmulss	xmm1, xmm0, xmm9
	vaddss	xmm3, xmm1, xmm4
	vmulss	xmm2, xmm9, xmm9
	vmulss	xmm0, xmm2, xmm9
	vmulss	xmm1, xmm3, xmm0
	vmovss	DWORD PTR j$1$[rsp], xmm1

; 174  : 	float k = FADE(zf0);

	vmulss	xmm1, xmm7, xmm6
	vsubss	xmm2, xmm1, xmm5
	vmulss	xmm0, xmm2, xmm7
	movzx	esi, cl
	vmulss	xmm1, xmm7, xmm7
	vaddss	xmm3, xmm0, xmm4
	vmovss	DWORD PTR wf0$1$[rsp], xmm14
	vmovss	DWORD PTR xf1$1$[rsp], xmm13
	vmovss	DWORD PTR yf1$1$[rsp], xmm8
	vmovss	DWORD PTR zf1$1$[rsp], xmm12
	vmovss	DWORD PTR wf1$1$[rsp], xmm11
	vmovss	DWORD PTR i$1$[rsp], xmm10
	mov	DWORD PTR wi$1$[rsp], esi
	vmulss	xmm2, xmm1, xmm7

; 176  : 
; 177  : 	int A = perm[xi]  +yi, AA = perm[A]  +zi, AAA = perm[AA]  +wi,

	lea	rbp, OFFSET FLAT:?perm@@3PAEA
	movzx	edx, r10b
	vmulss	xmm0, xmm3, xmm2

; 178  :                                               AAB = perm[AA+1]+wi,
; 179  : 		                   AB = perm[A+1]+zi, ABA = perm[AB]  +wi,
; 180  :                                               ABB = perm[AB+1]+wi;
; 181  : 	int B = perm[xi+1]+yi, BA = perm[B]  +zi, BAA = perm[BA]  +wi,
; 182  :                                               BAB = perm[BA+1]+wi,
; 183  : 		                   BB = perm[B+1]+zi, BBA = perm[BB]  +wi,
; 184  :                                               BBB = perm[BB+1]+wi;
; 185  : 											  
; 186  : 	
; 187  : 	float l1 = lerp2(i, grad(perm[AAA  ], xf0, yf0, zf0, wf0), grad(perm[BAA  ], xf1, yf0, zf0, wf0));

	vmovaps	xmm3, xmm7
	vmovaps	xmm2, xmm9
	movzx	eax, BYTE PTR [rdx+rbp]
	add	eax, r9d
	vmovaps	xmm1, xmm15
	vmovss	DWORD PTR k$1$[rsp], xmm0
	vmovss	DWORD PTR [rsp+32], xmm14
	movzx	edi, BYTE PTR [rax+rbp]
	movzx	r12d, BYTE PTR [rax+rbp+1]
	add	edi, r8d
	movzx	eax, BYTE PTR [rdx+rbp+1]
	add	r12d, r8d
	add	eax, r9d
	movzx	ebx, BYTE PTR [rax+rbp]
	movzx	r13d, BYTE PTR [rax+rbp+1]
	add	ebx, r8d
	movzx	eax, BYTE PTR [rdi+rbp]
	add	r13d, r8d
	add	eax, esi
	mov	r15d, eax
	movzx	ecx, BYTE PTR [rax+rbp]
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movzx	eax, BYTE PTR [rbx+rbp]
	add	eax, esi
	vmovaps	xmm3, xmm7
	vmovaps	xmm2, xmm9
	vmovaps	xmm1, xmm13
	movzx	ecx, BYTE PTR [rax+rbp]
	vmovss	DWORD PTR [rsp+32], xmm14
	vmovaps	xmm6, xmm0
	mov	r14d, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movzx	ebp, BYTE PTR [r12+rbp]

; 188  : 	float l2 = lerp2(i, grad(perm[ABA  ], xf0, yf1, zf0, wf0), grad(perm[BBA  ], xf1, yf1, zf0, wf0));

	lea	rax, OFFSET FLAT:?perm@@3PAEA

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm1, xmm0, xmm6
	vmulss	xmm2, xmm1, xmm10
	vaddss	xmm14, xmm2, xmm6

; 188  : 	float l2 = lerp2(i, grad(perm[ABA  ], xf0, yf1, zf0, wf0), grad(perm[BBA  ], xf1, yf1, zf0, wf0));

	vmovss	xmm6, DWORD PTR wf0$1$[rsp]
	add	ebp, esi
	vmovaps	xmm3, xmm7
	vmovaps	xmm2, xmm8
	vmovaps	xmm1, xmm15
	movzx	ecx, BYTE PTR [rax+rbp]
	vmovss	DWORD PTR [rsp+32], xmm6
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rdi+rcx+1]
	add	eax, esi

; 189  : 	float l3 = lerp2(i, grad(perm[AAB  ], xf0, yf0, zf1, wf0), grad(perm[BAB  ], xf1, yf0, zf1, wf0));

	vmovaps	xmm3, xmm12
	vmovaps	xmm2, xmm9
	vmovaps	xmm1, xmm15
	movzx	ecx, BYTE PTR [rax+rcx]
	vmovss	DWORD PTR [rsp+32], xmm6
	vmovaps	xmm8, xmm0
	mov	esi, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rbx+rcx+1]
	add	eax, DWORD PTR wi$1$[rsp]
	vmovaps	xmm6, xmm0
	vmovss	xmm0, DWORD PTR wf0$1$[rsp]
	vmovaps	xmm3, xmm12
	movzx	ecx, BYTE PTR [rax+rcx]
	vmovaps	xmm2, xmm9
	vmovaps	xmm1, xmm13
	vmovss	DWORD PTR [rsp+32], xmm0
	mov	edi, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [r12+rcx+1]
	mov	r12d, DWORD PTR wi$1$[rsp]
	add	eax, r12d

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm1, xmm0, xmm6

; 190  : 	float l4 = lerp2(i, grad(perm[ABB  ], xf0, yf1, zf1, wf0), grad(perm[BBB  ], xf1, yf1, zf1, wf0));

	vmovss	xmm0, DWORD PTR wf0$1$[rsp]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vmulss	xmm2, xmm1, xmm10

; 190  : 	float l4 = lerp2(i, grad(perm[ABB  ], xf0, yf1, zf1, wf0), grad(perm[BBB  ], xf1, yf1, zf1, wf0));

	movzx	ecx, BYTE PTR [rax+rcx]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm13, xmm2, xmm6

; 190  : 	float l4 = lerp2(i, grad(perm[ABB  ], xf0, yf1, zf1, wf0), grad(perm[BBB  ], xf1, yf1, zf1, wf0));

	mov	ebx, eax
	vmovss	xmm2, DWORD PTR yf1$1$[rsp]
	vmovaps	xmm3, xmm12
	vmovaps	xmm1, xmm15
	vmovss	DWORD PTR [rsp+32], xmm0
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad

; 191  : 	float l5 = lerp2(i, grad(perm[AAA+1], xf0, yf0, zf0, wf1), grad(perm[BAA+1], xf1, yf0, zf0, wf1));

	lea	rax, OFFSET FLAT:?perm@@3PAEA
	movzx	ecx, BYTE PTR [r15+rax+1]
	vmovaps	xmm3, xmm7
	vmovaps	xmm2, xmm9
	vmovaps	xmm1, xmm15
	vmovss	DWORD PTR [rsp+32], xmm11
	vmovaps	xmm12, xmm0
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	vmovss	xmm1, DWORD PTR xf1$1$[rsp]
	lea	r15, OFFSET FLAT:?perm@@3PAEA
	movzx	ecx, BYTE PTR [r14+r15+1]
	vmovaps	xmm3, xmm7
	vmovaps	xmm2, xmm9
	vmovss	DWORD PTR [rsp+32], xmm11
	vmovaps	xmm6, xmm0
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad

; 192  : 	float l6 = lerp2(i, grad(perm[ABA+1], xf0, yf1, zf0, wf1), grad(perm[BBA+1], xf1, yf1, zf0, wf1));

	movzx	ecx, BYTE PTR [r15+rbp+1]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm1, xmm0, xmm6
	vmulss	xmm2, xmm1, xmm10
	vaddss	xmm11, xmm2, xmm6

; 192  : 	float l6 = lerp2(i, grad(perm[ABA+1], xf0, yf1, zf0, wf1), grad(perm[BBA+1], xf1, yf1, zf0, wf1));

	vmovss	xmm6, DWORD PTR wf1$1$[rsp]
	vmovss	xmm2, DWORD PTR yf1$1$[rsp]
	vmovaps	xmm3, xmm7
	vmovaps	xmm1, xmm15
	vmovss	DWORD PTR [rsp+32], xmm6
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad

; 193  : 	float l7 = lerp2(i, grad(perm[AAB+1], xf0, yf0, zf1, wf1), grad(perm[BAB+1], xf1, yf0, zf1, wf1));

	movzx	ecx, BYTE PTR [rsi+r15+1]
	vmovss	xmm3, DWORD PTR zf1$1$[rsp]
	vmovaps	xmm2, xmm9
	vmovaps	xmm1, xmm15
	vmovss	DWORD PTR [rsp+32], xmm6
	vmovaps	xmm7, xmm0
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movzx	ecx, BYTE PTR [rdi+r15+1]
	vmovss	xmm3, DWORD PTR zf1$1$[rsp]
	vmovss	xmm1, DWORD PTR xf1$1$[rsp]
	vmovaps	xmm6, xmm0
	vmovss	xmm0, DWORD PTR wf1$1$[rsp]
	vmovaps	xmm2, xmm9
	vmovss	DWORD PTR [rsp+32], xmm0
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad

; 194  : 	float l8 = lerp2(i, grad(perm[ABB+1], xf0, yf1, zf1, wf1), grad(perm[BBB+1], xf1, yf1, zf1, wf1));

	movzx	ecx, BYTE PTR [rbx+r15+1]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm2, xmm0, xmm6

; 194  : 	float l8 = lerp2(i, grad(perm[ABB+1], xf0, yf1, zf1, wf1), grad(perm[BBB+1], xf1, yf1, zf1, wf1));

	vmovss	xmm0, DWORD PTR wf1$1$[rsp]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vmulss	xmm3, xmm2, xmm10

; 194  : 	float l8 = lerp2(i, grad(perm[ABB+1], xf0, yf1, zf1, wf1), grad(perm[BBB+1], xf1, yf1, zf1, wf1));

	vmovss	xmm2, DWORD PTR yf1$1$[rsp]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm10, xmm3, xmm6

; 194  : 	float l8 = lerp2(i, grad(perm[ABB+1], xf0, yf1, zf1, wf1), grad(perm[BBB+1], xf1, yf1, zf1, wf1));

	vmovss	xmm3, DWORD PTR zf1$1$[rsp]
	vmovaps	xmm1, xmm15
	vmovss	DWORD PTR [rsp+32], xmm0
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movzx	eax, BYTE PTR [r15+r13]
	vmovss	xmm3, DWORD PTR zf0$1$[rsp]
	vmovss	xmm2, DWORD PTR yf1$1$[rsp]
	vmovss	xmm1, DWORD PTR xf1$1$[rsp]
	add	eax, r12d
	vmovaps	xmm9, xmm0
	vmovss	xmm0, DWORD PTR wf0$1$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	movzx	ecx, BYTE PTR [rax+r15]
	mov	edi, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movzx	eax, BYTE PTR [r15+r13+1]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vmovss	xmm15, DWORD PTR j$1$[rsp]
	vsubss	xmm1, xmm0, xmm8
	vmulss	xmm2, xmm1, DWORD PTR i$1$[rsp]
	vaddss	xmm3, xmm2, xmm8
	vsubss	xmm0, xmm3, xmm14

; 190  : 	float l4 = lerp2(i, grad(perm[ABB  ], xf0, yf1, zf1, wf0), grad(perm[BBB  ], xf1, yf1, zf1, wf0));

	vmovss	xmm3, DWORD PTR zf1$1$[rsp]
	add	eax, r12d

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vmulss	xmm1, xmm0, xmm15

; 190  : 	float l4 = lerp2(i, grad(perm[ABB  ], xf0, yf1, zf1, wf0), grad(perm[BBB  ], xf1, yf1, zf1, wf0));

	vmovss	xmm0, DWORD PTR wf0$1$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	movzx	ecx, BYTE PTR [rax+r15]

; 195  : 
; 196  : 	l1 = lerp2(j, l1, l2);

	vaddss	xmm8, xmm14, xmm1
	mov	ebx, eax

; 190  : 	float l4 = lerp2(i, grad(perm[ABB  ], xf0, yf1, zf1, wf0), grad(perm[BBB  ], xf1, yf1, zf1, wf0));

	vmovss	xmm2, DWORD PTR yf1$1$[rsp]
	vmovss	xmm1, DWORD PTR xf1$1$[rsp]
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vmovss	xmm14, DWORD PTR i$1$[rsp]

; 192  : 	float l6 = lerp2(i, grad(perm[ABA+1], xf0, yf1, zf0, wf1), grad(perm[BBA+1], xf1, yf1, zf0, wf1));

	movzx	ecx, BYTE PTR [rdi+r15+1]
	vmovss	xmm3, DWORD PTR zf0$1$[rsp]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm1, xmm0, xmm12
	vmulss	xmm2, xmm1, xmm14
	vaddss	xmm4, xmm2, xmm12

; 192  : 	float l6 = lerp2(i, grad(perm[ABA+1], xf0, yf1, zf0, wf1), grad(perm[BBA+1], xf1, yf1, zf0, wf1));

	vmovss	xmm12, DWORD PTR wf1$1$[rsp]
	vmovss	xmm2, DWORD PTR yf1$1$[rsp]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm0, xmm4, xmm13
	vmulss	xmm1, xmm0, xmm15
	vaddss	xmm6, xmm1, xmm13

; 192  : 	float l6 = lerp2(i, grad(perm[ABA+1], xf0, yf1, zf0, wf1), grad(perm[BBA+1], xf1, yf1, zf0, wf1));

	vmovss	xmm1, DWORD PTR xf1$1$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm12
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad

; 194  : 	float l8 = lerp2(i, grad(perm[ABB+1], xf0, yf1, zf1, wf1), grad(perm[BBB+1], xf1, yf1, zf1, wf1));

	movzx	ecx, BYTE PTR [rbx+r15+1]
	vmovss	xmm3, DWORD PTR zf1$1$[rsp]
	vmovss	xmm2, DWORD PTR yf1$1$[rsp]
	vmovss	xmm1, DWORD PTR xf1$1$[rsp]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm4, xmm0, xmm7
	vmulss	xmm5, xmm4, xmm14
	vaddss	xmm0, xmm5, xmm7
	vsubss	xmm4, xmm0, xmm11
	vsubss	xmm0, xmm6, xmm8
	vmulss	xmm5, xmm4, xmm15
	vmulss	xmm4, xmm0, DWORD PTR k$1$[rsp]

; 197  : 	l2 = lerp2(j, l3, l4);
; 198  : 	l3 = lerp2(j, l5, l6);
; 199  : 	l4 = lerp2(j, l7, l8);
; 200  : 
; 201  : 	l1 = lerp2(k, l1, l2);

	vaddss	xmm6, xmm8, xmm4
	vmovss	DWORD PTR [rsp+32], xmm12

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm7, xmm5, xmm11

; 194  : 	float l8 = lerp2(i, grad(perm[ABB+1], xf0, yf1, zf1, wf1), grad(perm[BBB+1], xf1, yf1, zf1, wf1));

	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	vmovss	xmm5, DWORD PTR wf0$1$[rsp]

; 205  : }

	vmovaps	xmm13, XMMWORD PTR [rsp+112]
	lea	r11, QWORD PTR [rsp+248]
	vmovaps	xmm8, XMMWORD PTR [r11-56]
	vmovaps	xmm11, XMMWORD PTR [r11-104]
	vmovaps	xmm12, XMMWORD PTR [r11-120]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm1, xmm0, xmm9
	vmulss	xmm2, xmm1, xmm14

; 205  : }

	vmovaps	xmm14, XMMWORD PTR [rsp+96]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm3, xmm2, xmm9

; 205  : }

	vmovaps	xmm9, XMMWORD PTR [r11-72]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm0, xmm3, xmm10
	vmulss	xmm1, xmm0, xmm15

; 205  : }

	vmovaps	xmm15, XMMWORD PTR [rsp+80]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm2, xmm1, xmm10

; 205  : }

	vmovaps	xmm10, XMMWORD PTR [r11-88]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm3, xmm2, xmm7
	vmulss	xmm0, xmm3, DWORD PTR k$1$[rsp]

; 175  : 	float l = FADE(wf0);

	vmulss	xmm2, xmm5, DWORD PTR __real@40c00000

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm1, xmm0, xmm7

; 175  : 	float l = FADE(wf0);

	vsubss	xmm0, xmm2, DWORD PTR __real@41700000

; 205  : }

	vmovaps	xmm7, XMMWORD PTR [r11-40]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm4, xmm1, xmm6

; 175  : 	float l = FADE(wf0);

	vmulss	xmm1, xmm0, xmm5
	vaddss	xmm3, xmm1, DWORD PTR __real@41200000
	vmulss	xmm2, xmm5, xmm5
	vmulss	xmm0, xmm2, xmm5
	vmulss	xmm1, xmm3, xmm0

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vmulss	xmm3, xmm4, xmm1
	vaddss	xmm2, xmm3, xmm6

; 202  : 	l2 = lerp2(k, l3, l4);
; 203  : 
; 204  : 	return lerp2(l, l1, l2) * 0.87f;

	vmulss	xmm0, xmm2, DWORD PTR __real@3f5eb852

; 205  : }

	vmovaps	xmm6, XMMWORD PTR [r11-24]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?noise@Perlin@@SAMMMMM@Z ENDP				; Perlin::noise
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?noise@Perlin@@SAMMMM@Z
_TEXT	SEGMENT
zf$1$ = 240
x$ = 240
i$1$ = 248
y$ = 248
z$ = 256
?noise@Perlin@@SAMMMM@Z PROC				; Perlin::noise, COMDAT

; 129  : float Perlin::noise(float x, float y, float z) {

$LN24:
	mov	rax, rsp
	mov	QWORD PTR [rax+24], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 192				; 000000c0H
	vmovaps	XMMWORD PTR [rax-56], xmm6

; 142  : 	int A = perm[xi  ]+yi, AA = perm[A]+zi, AB = perm[A+1]+zi;

	lea	r15, OFFSET FLAT:?perm@@3PAEA
	vmovaps	XMMWORD PTR [rax-72], xmm7

; 144  : 
; 145  : 	return lerp2(k, lerp2(j, lerp2(i, grad(perm[AA  ], xf  , yf  , zf   ),

	vmovss	xmm7, DWORD PTR __real@3f800000
	vmovaps	XMMWORD PTR [rax-88], xmm8
	vcvttss2si ecx, xmm0
	vmovaps	XMMWORD PTR [rax-104], xmm9
	vmovaps	XMMWORD PTR [rax-120], xmm10
	vcvttss2si eax, xmm1
	vmovaps	xmm4, xmm0
	vmovaps	xmm5, xmm1
	vxorps	xmm3, xmm3, xmm3
	vcomiss	xmm3, xmm0
	vxorps	xmm0, xmm0, xmm0
	lea	edx, DWORD PTR [rax-1]
	vmovaps	XMMWORD PTR [rsp+96], xmm11
	lea	r9d, DWORD PTR [rcx-1]
	vmovaps	XMMWORD PTR [rsp+80], xmm12
	cmovbe	r9d, ecx
	vmovaps	XMMWORD PTR [rsp+64], xmm13
	vcomiss	xmm3, xmm1
	vcvtsi2ss xmm0, xmm0, r9d
	vsubss	xmm13, xmm4, xmm0
	vmovaps	XMMWORD PTR [rsp+48], xmm14
	vmovaps	XMMWORD PTR [rsp+32], xmm15
	cmovbe	edx, eax
	vcvttss2si eax, xmm2
	vcomiss	xmm3, xmm2
	vxorps	xmm0, xmm0, xmm0
	vxorps	xmm1, xmm1, xmm1
	lea	ecx, DWORD PTR [rax-1]
	movzx	r8d, dl
	cmovbe	ecx, eax
	vcvtsi2ss xmm0, xmm0, ecx
	vsubss	xmm6, xmm2, xmm0
	vmulss	xmm0, xmm13, DWORD PTR __real@40c00000
	vsubss	xmm0, xmm0, DWORD PTR __real@41700000
	vcvtsi2ss xmm1, xmm1, edx
	vsubss	xmm14, xmm5, xmm1
	vmulss	xmm1, xmm0, xmm13
	vaddss	xmm2, xmm1, DWORD PTR __real@41200000
	movzx	r14d, cl
	movzx	ecx, r9b
	vmulss	xmm0, xmm13, xmm13
	vmulss	xmm1, xmm0, xmm13
	vmulss	xmm8, xmm2, xmm1
	movzx	eax, BYTE PTR [rcx+r15]
	vmulss	xmm2, xmm14, DWORD PTR __real@40c00000
	vsubss	xmm0, xmm2, DWORD PTR __real@41700000
	movzx	ebp, BYTE PTR [rcx+r15+1]
	add	eax, r8d
	vmulss	xmm1, xmm0, xmm14
	vaddss	xmm3, xmm1, DWORD PTR __real@41200000
	mov	ebx, eax
	add	ebp, r8d
	movzx	eax, BYTE PTR [rax+r15+1]
	vmulss	xmm2, xmm14, xmm14
	add	eax, r14d
	vmulss	xmm0, xmm2, xmm14
	vmulss	xmm15, xmm3, xmm0
	vsubss	xmm11, xmm6, xmm7
	movzx	ecx, BYTE PTR [rax+r15+1]
	vsubss	xmm12, xmm14, xmm7
	vmovaps	xmm3, xmm11
	vmovaps	xmm2, xmm12
	vmovaps	xmm1, xmm13
	vmovss	DWORD PTR zf$1$[rsp], xmm6
	vmovss	DWORD PTR i$1$[rsp], xmm8
	mov	esi, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movzx	eax, BYTE PTR [rbx+r15]
	add	eax, r14d
	vmovaps	xmm3, xmm11
	vmovaps	xmm2, xmm14
	vmovaps	xmm1, xmm13
	movzx	ecx, BYTE PTR [rax+r15+1]
	vmovaps	xmm10, xmm0
	mov	edi, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	vmovaps	xmm6, xmm0
	vsubss	xmm9, xmm13, xmm7

; 143  : 	int B = perm[xi+1]+yi, BA = perm[B]+zi, BB = perm[B+1]+zi;

	movzx	eax, BYTE PTR [r15+rbp]
	add	eax, r14d

; 144  : 
; 145  : 	return lerp2(k, lerp2(j, lerp2(i, grad(perm[AA  ], xf  , yf  , zf   ),

	vmovaps	xmm3, xmm11
	vmovaps	xmm2, xmm14
	vmovaps	xmm1, xmm9
	movzx	ecx, BYTE PTR [rax+r15+1]
	mov	ebx, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movzx	ecx, BYTE PTR [rsi+r15]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm2, xmm0, xmm6
	vmulss	xmm3, xmm2, xmm8
	vaddss	xmm8, xmm3, xmm6

; 144  : 
; 145  : 	return lerp2(k, lerp2(j, lerp2(i, grad(perm[AA  ], xf  , yf  , zf   ),

	vmovss	xmm3, DWORD PTR zf$1$[rsp]
	vmovaps	xmm2, xmm12
	vmovaps	xmm1, xmm13
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movzx	ecx, BYTE PTR [rdi+r15]
	vmovss	xmm3, DWORD PTR zf$1$[rsp]
	vmovaps	xmm2, xmm14
	vmovaps	xmm1, xmm13
	vmovaps	xmm7, xmm0
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movzx	ecx, BYTE PTR [rbx+r15]
	vmovss	xmm3, DWORD PTR zf$1$[rsp]
	vmovaps	xmm2, xmm14
	vmovaps	xmm1, xmm9
	vmovaps	xmm6, xmm0
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movzx	eax, BYTE PTR [r15+rbp+1]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vmovss	xmm13, DWORD PTR i$1$[rsp]

; 144  : 
; 145  : 	return lerp2(k, lerp2(j, lerp2(i, grad(perm[AA  ], xf  , yf  , zf   ),

	vmovss	xmm14, DWORD PTR zf$1$[rsp]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm1, xmm0, xmm6
	vmulss	xmm2, xmm1, xmm13

; 143  : 	int B = perm[xi+1]+yi, BA = perm[B]+zi, BB = perm[B+1]+zi;

	add	eax, r14d

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm6, xmm2, xmm6

; 144  : 
; 145  : 	return lerp2(k, lerp2(j, lerp2(i, grad(perm[AA  ], xf  , yf  , zf   ),

	vmovaps	xmm3, xmm14
	vmovaps	xmm2, xmm12
	movzx	ecx, BYTE PTR [rax+r15]
	vmovaps	xmm1, xmm9
	mov	ebx, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movzx	ecx, BYTE PTR [rbx+r15+1]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm4, xmm0, xmm7
	vmulss	xmm5, xmm4, xmm13
	vaddss	xmm0, xmm5, xmm7
	vsubss	xmm4, xmm0, xmm6
	vmulss	xmm5, xmm4, xmm15

; 144  : 
; 145  : 	return lerp2(k, lerp2(j, lerp2(i, grad(perm[AA  ], xf  , yf  , zf   ),

	vmovaps	xmm3, xmm11
	vmovaps	xmm2, xmm12
	vmovaps	xmm1, xmm9

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm6, xmm5, xmm6

; 144  : 
; 145  : 	return lerp2(k, lerp2(j, lerp2(i, grad(perm[AA  ], xf  , yf  , zf   ),

	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad

; 146  : 								   grad(perm[BA  ], xf-1, yf  , zf   )),
; 147  : 						   lerp2(i, grad(perm[AB  ], xf  , yf-1, zf   ),
; 148  : 								   grad(perm[BB  ], xf-1, yf-1, zf   ))),
; 149  : 				   lerp2(j, lerp2(i, grad(perm[AA+1], xf  , yf  , zf-1 ),
; 150  : 								   grad(perm[BA+1], xf-1, yf  , zf-1 )),
; 151  : 						   lerp2(i, grad(perm[AB+1], xf  , yf-1, zf-1 ),
; 152  : 								   grad(perm[BB+1], xf-1, yf-1, zf-1 )))) * 0.936f;
; 153  : }

	lea	r11, QWORD PTR [rsp+192]
	mov	rbx, QWORD PTR [r11+64]
	vmovaps	xmm7, XMMWORD PTR [r11-32]
	vmovaps	xmm9, XMMWORD PTR [r11-64]
	vmovaps	xmm11, XMMWORD PTR [r11-96]
	vmovaps	xmm12, XMMWORD PTR [r11-112]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm1, xmm0, xmm10
	vmulss	xmm2, xmm1, xmm13

; 146  : 								   grad(perm[BA  ], xf-1, yf  , zf   )),
; 147  : 						   lerp2(i, grad(perm[AB  ], xf  , yf-1, zf   ),
; 148  : 								   grad(perm[BB  ], xf-1, yf-1, zf   ))),
; 149  : 				   lerp2(j, lerp2(i, grad(perm[AA+1], xf  , yf  , zf-1 ),
; 150  : 								   grad(perm[BA+1], xf-1, yf  , zf-1 )),
; 151  : 						   lerp2(i, grad(perm[AB+1], xf  , yf-1, zf-1 ),
; 152  : 								   grad(perm[BB+1], xf-1, yf-1, zf-1 )))) * 0.936f;
; 153  : }

	vmovaps	xmm13, XMMWORD PTR [r11-128]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm3, xmm2, xmm10

; 146  : 								   grad(perm[BA  ], xf-1, yf  , zf   )),
; 147  : 						   lerp2(i, grad(perm[AB  ], xf  , yf-1, zf   ),
; 148  : 								   grad(perm[BB  ], xf-1, yf-1, zf   ))),
; 149  : 				   lerp2(j, lerp2(i, grad(perm[AA+1], xf  , yf  , zf-1 ),
; 150  : 								   grad(perm[BA+1], xf-1, yf  , zf-1 )),
; 151  : 						   lerp2(i, grad(perm[AB+1], xf  , yf-1, zf-1 ),
; 152  : 								   grad(perm[BB+1], xf-1, yf-1, zf-1 )))) * 0.936f;
; 153  : }

	vmovaps	xmm10, XMMWORD PTR [r11-80]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm0, xmm3, xmm8
	vmulss	xmm1, xmm0, xmm15

; 130  : 	int xi = FASTFLOOR(x);
; 131  : 	int yi = FASTFLOOR(y);
; 132  : 	int zi = FASTFLOOR(z);
; 133  : 	float xf = x - (float)xi;
; 134  : 	float yf = y - (float)yi;
; 135  : 	float zf = z - (float)zi;
; 136  : 	xi = xi & 255;
; 137  : 	yi = yi & 255;
; 138  : 	zi = zi & 255;
; 139  : 	float i = FADE(xf);
; 140  : 	float j = FADE(yf);
; 141  : 	float k = FADE(zf);

	vmulss	xmm0, xmm14, DWORD PTR __real@40c00000

; 146  : 								   grad(perm[BA  ], xf-1, yf  , zf   )),
; 147  : 						   lerp2(i, grad(perm[AB  ], xf  , yf-1, zf   ),
; 148  : 								   grad(perm[BB  ], xf-1, yf-1, zf   ))),
; 149  : 				   lerp2(j, lerp2(i, grad(perm[AA+1], xf  , yf  , zf-1 ),
; 150  : 								   grad(perm[BA+1], xf-1, yf  , zf-1 )),
; 151  : 						   lerp2(i, grad(perm[AB+1], xf  , yf-1, zf-1 ),
; 152  : 								   grad(perm[BB+1], xf-1, yf-1, zf-1 )))) * 0.936f;
; 153  : }

	vmovaps	xmm15, XMMWORD PTR [rsp+32]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm2, xmm1, xmm8

; 130  : 	int xi = FASTFLOOR(x);
; 131  : 	int yi = FASTFLOOR(y);
; 132  : 	int zi = FASTFLOOR(z);
; 133  : 	float xf = x - (float)xi;
; 134  : 	float yf = y - (float)yi;
; 135  : 	float zf = z - (float)zi;
; 136  : 	xi = xi & 255;
; 137  : 	yi = yi & 255;
; 138  : 	zi = zi & 255;
; 139  : 	float i = FADE(xf);
; 140  : 	float j = FADE(yf);
; 141  : 	float k = FADE(zf);

	vsubss	xmm1, xmm0, DWORD PTR __real@41700000

; 146  : 								   grad(perm[BA  ], xf-1, yf  , zf   )),
; 147  : 						   lerp2(i, grad(perm[AB  ], xf  , yf-1, zf   ),
; 148  : 								   grad(perm[BB  ], xf-1, yf-1, zf   ))),
; 149  : 				   lerp2(j, lerp2(i, grad(perm[AA+1], xf  , yf  , zf-1 ),
; 150  : 								   grad(perm[BA+1], xf-1, yf  , zf-1 )),
; 151  : 						   lerp2(i, grad(perm[AB+1], xf  , yf-1, zf-1 ),
; 152  : 								   grad(perm[BB+1], xf-1, yf-1, zf-1 )))) * 0.936f;
; 153  : }

	vmovaps	xmm8, XMMWORD PTR [r11-48]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm4, xmm2, xmm6

; 130  : 	int xi = FASTFLOOR(x);
; 131  : 	int yi = FASTFLOOR(y);
; 132  : 	int zi = FASTFLOOR(z);
; 133  : 	float xf = x - (float)xi;
; 134  : 	float yf = y - (float)yi;
; 135  : 	float zf = z - (float)zi;
; 136  : 	xi = xi & 255;
; 137  : 	yi = yi & 255;
; 138  : 	zi = zi & 255;
; 139  : 	float i = FADE(xf);
; 140  : 	float j = FADE(yf);
; 141  : 	float k = FADE(zf);

	vmulss	xmm2, xmm1, xmm14
	vaddss	xmm3, xmm2, DWORD PTR __real@41200000
	vmulss	xmm0, xmm14, xmm14
	vmulss	xmm1, xmm0, xmm14

; 146  : 								   grad(perm[BA  ], xf-1, yf  , zf   )),
; 147  : 						   lerp2(i, grad(perm[AB  ], xf  , yf-1, zf   ),
; 148  : 								   grad(perm[BB  ], xf-1, yf-1, zf   ))),
; 149  : 				   lerp2(j, lerp2(i, grad(perm[AA+1], xf  , yf  , zf-1 ),
; 150  : 								   grad(perm[BA+1], xf-1, yf  , zf-1 )),
; 151  : 						   lerp2(i, grad(perm[AB+1], xf  , yf-1, zf-1 ),
; 152  : 								   grad(perm[BB+1], xf-1, yf-1, zf-1 )))) * 0.936f;
; 153  : }

	vmovaps	xmm14, XMMWORD PTR [rsp+48]
	vmulss	xmm2, xmm3, xmm1

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vmulss	xmm3, xmm4, xmm2
	vaddss	xmm0, xmm3, xmm6

; 144  : 
; 145  : 	return lerp2(k, lerp2(j, lerp2(i, grad(perm[AA  ], xf  , yf  , zf   ),

	vmulss	xmm0, xmm0, DWORD PTR __real@3f6f9db2

; 146  : 								   grad(perm[BA  ], xf-1, yf  , zf   )),
; 147  : 						   lerp2(i, grad(perm[AB  ], xf  , yf-1, zf   ),
; 148  : 								   grad(perm[BB  ], xf-1, yf-1, zf   ))),
; 149  : 				   lerp2(j, lerp2(i, grad(perm[AA+1], xf  , yf  , zf-1 ),
; 150  : 								   grad(perm[BA+1], xf-1, yf  , zf-1 )),
; 151  : 						   lerp2(i, grad(perm[AB+1], xf  , yf-1, zf-1 ),
; 152  : 								   grad(perm[BB+1], xf-1, yf-1, zf-1 )))) * 0.936f;
; 153  : }

	vmovaps	xmm6, XMMWORD PTR [r11-16]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?noise@Perlin@@SAMMMM@Z ENDP				; Perlin::noise
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?noise@Perlin@@SAMMM@Z
_TEXT	SEGMENT
x$ = 160
y$ = 168
?noise@Perlin@@SAMMM@Z PROC				; Perlin::noise, COMDAT

; 109  : float Perlin::noise(float x, float y) {    

$LN38:
	mov	rax, rsp
	sub	rsp, 152				; 00000098H

; 78   :     return ((h&1)? -i : i) + ((h&2)? -2.f*j : 2.f*j);

	vmovss	xmm5, DWORD PTR __xmm@80000000800000008000000080000000
	vmovaps	XMMWORD PTR [rax-24], xmm6

; 120  : 	int A = perm[xi  ] + yi;

	lea	r10, OFFSET FLAT:?perm@@3PAEA
	vcvttss2si ecx, xmm0
	vmovaps	XMMWORD PTR [rax-40], xmm7

; 76   :     float i = h<4 ? x : y;

	mov	r9d, 4
	vmovaps	XMMWORD PTR [rax-56], xmm8

; 109  : float Perlin::noise(float x, float y) {    

	vmovaps	xmm3, xmm0
	vmovaps	XMMWORD PTR [rax-72], xmm9

; 110  :     int xi = FASTFLOOR(x);
; 111  : 	int yi = FASTFLOOR(y);

	lea	r8d, DWORD PTR [rcx-1]
	vmovaps	XMMWORD PTR [rax-88], xmm10
	vmovaps	XMMWORD PTR [rax-104], xmm11
	vmovaps	xmm4, xmm1
	vmovaps	XMMWORD PTR [rax-120], xmm12
	vcvttss2si eax, xmm1
	vxorps	xmm2, xmm2, xmm2
	vcomiss	xmm2, xmm0
	vxorps	xmm0, xmm0, xmm0
	cmovbe	r8d, ecx
	vmovaps	XMMWORD PTR [rsp+16], xmm13

; 112  :     float xf0 = x - xi;

	vcomiss	xmm2, xmm1
	vcvtsi2ss xmm0, xmm0, r8d
	vsubss	xmm8, xmm3, xmm0

; 113  :     float yf0 = y - yi;
; 114  :     float xf1 = xf0 - 1.0f;
; 115  :     float yf1 = yf0 - 1.0f;
; 116  :     xi = xi & 255;
; 117  :     yi = yi & 255;       
; 118  :     float i = FADE(xf0);

	vmulss	xmm0, xmm8, DWORD PTR __real@40c00000
	vmovaps	XMMWORD PTR [rsp], xmm14
	lea	ecx, DWORD PTR [rax-1]
	vsubss	xmm0, xmm0, DWORD PTR __real@41700000
	vsubss	xmm7, xmm8, DWORD PTR __real@3f800000
	cmovbe	ecx, eax
	vxorps	xmm1, xmm1, xmm1
	vcvtsi2ss xmm1, xmm1, ecx
	vsubss	xmm9, xmm4, xmm1
	vsubss	xmm6, xmm9, DWORD PTR __real@3f800000
	vmulss	xmm1, xmm0, xmm8
	vaddss	xmm2, xmm1, DWORD PTR __real@41200000
	movzx	edx, cl
	movzx	ecx, r8b
	vmulss	xmm0, xmm8, xmm8
	vmulss	xmm1, xmm0, xmm8
	vmulss	xmm13, xmm2, xmm1

; 121  : 	int B = perm[xi+1] + yi;

	movzx	eax, BYTE PTR [rcx+r10+1]
	vmulss	xmm2, xmm9, DWORD PTR __real@40c00000
	vsubss	xmm0, xmm2, DWORD PTR __real@41700000
	movzx	r8d, BYTE PTR [rcx+r10]
	add	eax, edx
	vmulss	xmm1, xmm0, xmm9
	vaddss	xmm3, xmm1, DWORD PTR __real@41200000
	add	r8d, edx

; 122  : 
; 123  :     return lerp2(j, lerp2(i, grad(perm[A  ], xf0, yf0),

	mov	edx, eax

; 75   :     int h = hash & 7;

	movzx	eax, BYTE PTR [rax+r10+1]
	and	eax, 7

; 119  : 	float j = FADE(yf0);

	vmulss	xmm2, xmm9, xmm9
	vmulss	xmm0, xmm2, xmm9
	vmulss	xmm14, xmm3, xmm0

; 76   :     float i = h<4 ? x : y;

	vmovd	xmm0, r9d
	vmovd	xmm1, eax
	vpcmpgtq xmm1, xmm0, xmm1

; 77   :     float j = h<4 ? y : x;

	vmovd	xmm0, r9d
	vmovd	xmm2, eax
	vblendvps xmm11, xmm6, xmm7, xmm1
	vpcmpgtq xmm1, xmm0, xmm2
	vblendvps xmm0, xmm7, xmm6, xmm1

; 78   :     return ((h&1)? -i : i) + ((h&2)? -2.f*j : 2.f*j);

	test	al, 1
	je	SHORT $LN9@noise
	vxorps	xmm11, xmm11, xmm5
$LN9@noise:
	vmovss	xmm3, DWORD PTR __real@c0000000
	test	al, 2
	je	SHORT $LN11@noise
	vmulss	xmm10, xmm0, xmm3
	jmp	SHORT $LN12@noise
$LN11@noise:
	vaddss	xmm10, xmm0, xmm0
$LN12@noise:

; 75   :     int h = hash & 7;

	movzx	eax, BYTE PTR [r8+r10+1]
	and	eax, 7

; 76   :     float i = h<4 ? x : y;

	vmovd	xmm1, eax
	vmovd	xmm0, r9d
	vpcmpgtq xmm2, xmm0, xmm1

; 77   :     float j = h<4 ? y : x;

	vmovd	xmm0, r9d
	vmovd	xmm1, eax
	vblendvps xmm4, xmm6, xmm8, xmm2
	vpcmpgtq xmm2, xmm0, xmm1
	vblendvps xmm0, xmm8, xmm6, xmm2

; 78   :     return ((h&1)? -i : i) + ((h&2)? -2.f*j : 2.f*j);

	test	al, 1
	je	SHORT $LN15@noise
	vxorps	xmm4, xmm4, xmm5
$LN15@noise:
	test	al, 2
	je	SHORT $LN17@noise
	vmulss	xmm1, xmm0, xmm3
	jmp	SHORT $LN18@noise
$LN17@noise:
	vaddss	xmm1, xmm0, xmm0
$LN18@noise:

; 75   :     int h = hash & 7;

	movzx	eax, BYTE PTR [rdx+r10]
	and	eax, 7

; 78   :     return ((h&1)? -i : i) + ((h&2)? -2.f*j : 2.f*j);

	vaddss	xmm12, xmm1, xmm4

; 76   :     float i = h<4 ? x : y;

	vmovd	xmm1, eax
	vmovd	xmm0, r9d
	vpcmpgtq xmm2, xmm0, xmm1

; 77   :     float j = h<4 ? y : x;

	vmovd	xmm0, r9d
	vmovd	xmm1, eax
	vblendvps xmm6, xmm9, xmm7, xmm2
	vpcmpgtq xmm2, xmm0, xmm1
	vblendvps xmm0, xmm7, xmm9, xmm2

; 78   :     return ((h&1)? -i : i) + ((h&2)? -2.f*j : 2.f*j);

	test	al, 1
	je	SHORT $LN23@noise
	vxorps	xmm6, xmm6, xmm5
$LN23@noise:
	test	al, 2
	je	SHORT $LN25@noise
	vmulss	xmm7, xmm0, xmm3
	jmp	SHORT $LN26@noise
$LN25@noise:
	vaddss	xmm7, xmm0, xmm0
$LN26@noise:

; 75   :     int h = hash & 7;

	movzx	eax, BYTE PTR [r8+r10]
	and	eax, 7

; 76   :     float i = h<4 ? x : y;

	vmovd	xmm1, eax
	vmovd	xmm0, r9d
	vpcmpgtq xmm2, xmm0, xmm1

; 77   :     float j = h<4 ? y : x;

	vmovd	xmm0, r9d
	vmovd	xmm1, eax
	vblendvps xmm4, xmm9, xmm8, xmm2
	vpcmpgtq xmm2, xmm0, xmm1
	vblendvps xmm0, xmm8, xmm9, xmm2

; 78   :     return ((h&1)? -i : i) + ((h&2)? -2.f*j : 2.f*j);

	test	al, 1
	je	SHORT $LN29@noise
	vxorps	xmm4, xmm4, xmm5
$LN29@noise:
	test	al, 2
	je	SHORT $LN31@noise
	vmulss	xmm1, xmm0, xmm3
	jmp	SHORT $LN32@noise
$LN31@noise:
	vaddss	xmm1, xmm0, xmm0
$LN32@noise:

; 124  : 		                   grad(perm[B  ], xf1, yf0)),
; 125  : 		           lerp2(i, grad(perm[A+1], xf0, yf1),
; 126  : 		                   grad(perm[B+1], xf1, yf1))) * 0.507f;
; 127  : }

	lea	r11, QWORD PTR [rsp+152]
	vmovaps	xmm8, XMMWORD PTR [r11-56]
	vmovaps	xmm9, XMMWORD PTR [r11-72]

; 78   :     return ((h&1)? -i : i) + ((h&2)? -2.f*j : 2.f*j);

	vaddss	xmm3, xmm1, xmm4
	vaddss	xmm0, xmm7, xmm6

; 124  : 		                   grad(perm[B  ], xf1, yf0)),
; 125  : 		           lerp2(i, grad(perm[A+1], xf0, yf1),
; 126  : 		                   grad(perm[B+1], xf1, yf1))) * 0.507f;
; 127  : }

	vmovaps	xmm6, XMMWORD PTR [r11-24]
	vmovaps	xmm7, XMMWORD PTR [rsp+112]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm1, xmm0, xmm3
	vmulss	xmm2, xmm1, xmm13

; 78   :     return ((h&1)? -i : i) + ((h&2)? -2.f*j : 2.f*j);

	vaddss	xmm0, xmm10, xmm11

; 124  : 		                   grad(perm[B  ], xf1, yf0)),
; 125  : 		           lerp2(i, grad(perm[A+1], xf0, yf1),
; 126  : 		                   grad(perm[B+1], xf1, yf1))) * 0.507f;
; 127  : }

	vmovaps	xmm10, XMMWORD PTR [r11-88]
	vmovaps	xmm11, XMMWORD PTR [r11-104]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm1, xmm0, xmm12
	vaddss	xmm4, xmm2, xmm3
	vmulss	xmm2, xmm1, xmm13

; 124  : 		                   grad(perm[B  ], xf1, yf0)),
; 125  : 		           lerp2(i, grad(perm[A+1], xf0, yf1),
; 126  : 		                   grad(perm[B+1], xf1, yf1))) * 0.507f;
; 127  : }

	vmovaps	xmm13, XMMWORD PTR [rsp+16]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm3, xmm2, xmm12

; 124  : 		                   grad(perm[B  ], xf1, yf0)),
; 125  : 		           lerp2(i, grad(perm[A+1], xf0, yf1),
; 126  : 		                   grad(perm[B+1], xf1, yf1))) * 0.507f;
; 127  : }

	vmovaps	xmm12, XMMWORD PTR [r11-120]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm0, xmm3, xmm4
	vmulss	xmm1, xmm0, xmm14

; 124  : 		                   grad(perm[B  ], xf1, yf0)),
; 125  : 		           lerp2(i, grad(perm[A+1], xf0, yf1),
; 126  : 		                   grad(perm[B+1], xf1, yf1))) * 0.507f;
; 127  : }

	vmovaps	xmm14, XMMWORD PTR [rsp]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm2, xmm1, xmm4

; 122  : 
; 123  :     return lerp2(j, lerp2(i, grad(perm[A  ], xf0, yf0),

	vmulss	xmm0, xmm2, DWORD PTR __real@3f01cac1

; 124  : 		                   grad(perm[B  ], xf1, yf0)),
; 125  : 		           lerp2(i, grad(perm[A+1], xf0, yf1),
; 126  : 		                   grad(perm[B+1], xf1, yf1))) * 0.507f;
; 127  : }

	mov	rsp, r11
	ret	0
?noise@Perlin@@SAMMM@Z ENDP				; Perlin::noise
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\perlin.cpp
;	COMDAT ?noise@Perlin@@SAMM@Z
_TEXT	SEGMENT
x$ = 48
?noise@Perlin@@SAMM@Z PROC				; Perlin::noise, COMDAT

; 98   : float Perlin::noise(float x) {    

$LN14:
	sub	rsp, 40					; 00000028H

; 99   :     int ix0 = FASTFLOOR(x);		
; 100  : 	int ix1 = (ix0+1) & 255;
; 101  :     float xf0 = x - ix0;
; 102  : 	float xf1 = xf0 - 1.0f;   

	vmovss	xmm5, DWORD PTR __real@3f800000
	vcvttss2si eax, xmm0
	vxorps	xmm1, xmm1, xmm1
	vcomiss	xmm1, xmm0
	vxorps	xmm1, xmm1, xmm1
	lea	ecx, DWORD PTR [rax-1]
	vmovaps	XMMWORD PTR [rsp+16], xmm6
	cmovbe	ecx, eax
	vmovaps	XMMWORD PTR [rsp], xmm7
	vcvtsi2ss xmm1, xmm1, ecx
	vsubss	xmm4, xmm0, xmm1

; 103  : 	ix0 = ix0 & 0xff;    // Wrap to 0..255
; 104  :     float s = FADE(xf0);

	vmulss	xmm0, xmm4, DWORD PTR __real@40c00000
	vsubss	xmm1, xmm0, DWORD PTR __real@41700000
	vmulss	xmm2, xmm1, xmm4
	vaddss	xmm3, xmm2, DWORD PTR __real@41200000
	lea	eax, DWORD PTR [rcx+1]
	movzx	r8d, cl
	movzx	ecx, al

; 105  :     return lerp2(s, grad(perm[ix0], xf0),

	lea	r9, OFFSET FLAT:?perm@@3PAEA
	vmulss	xmm0, xmm4, xmm4
	vmulss	xmm1, xmm0, xmm4
	vxorps	xmm0, xmm0, xmm0
	movzx	edx, BYTE PTR [rcx+r9]

; 69   :     float grad = 1.0f + (h & 7);

	mov	eax, edx
	and	eax, 7
	vcvtsi2ss xmm0, xmm0, eax

; 103  : 	ix0 = ix0 & 0xff;    // Wrap to 0..255
; 104  :     float s = FADE(xf0);

	vmulss	xmm7, xmm3, xmm1

; 70   :     if (h&8) grad = -grad;

	vmovss	xmm3, DWORD PTR __xmm@80000000800000008000000080000000
	vaddss	xmm2, xmm0, xmm5

; 99   :     int ix0 = FASTFLOOR(x);		
; 100  : 	int ix1 = (ix0+1) & 255;
; 101  :     float xf0 = x - ix0;
; 102  : 	float xf1 = xf0 - 1.0f;   

	vsubss	xmm6, xmm4, xmm5

; 70   :     if (h&8) grad = -grad;

	test	dl, 8
	je	SHORT $LN6@noise
	vxorps	xmm2, xmm2, xmm3
$LN6@noise:

; 105  :     return lerp2(s, grad(perm[ix0], xf0),

	movzx	ecx, BYTE PTR [r8+r9]

; 69   :     float grad = 1.0f + (h & 7);

	mov	eax, ecx
	and	eax, 7
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vaddss	xmm1, xmm0, xmm5

; 70   :     if (h&8) grad = -grad;

	test	cl, 8
	je	SHORT $LN9@noise
	vxorps	xmm1, xmm1, xmm3
$LN9@noise:

; 71   :     return ( grad * x );

	vmulss	xmm0, xmm2, xmm6

; 106  : 				   grad(perm[ix1], xf1)) * 0.188f;
; 107  : }

	vmovaps	xmm6, XMMWORD PTR [rsp+16]

; 71   :     return ( grad * x );

	vmulss	xmm3, xmm1, xmm4

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vsubss	xmm1, xmm0, xmm3
	vmulss	xmm2, xmm1, xmm7

; 106  : 				   grad(perm[ix1], xf1)) * 0.188f;
; 107  : }

	vmovaps	xmm7, XMMWORD PTR [rsp]

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	vaddss	xmm3, xmm2, xmm3

; 105  :     return lerp2(s, grad(perm[ix0], xf0),

	vmulss	xmm0, xmm3, DWORD PTR __real@3e408312

; 106  : 				   grad(perm[ix1], xf1)) * 0.188f;
; 107  : }

	add	rsp, 40					; 00000028H
	ret	0
?noise@Perlin@@SAMM@Z ENDP				; Perlin::noise
_TEXT	ENDS
END
