; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27031.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	WinbaseIsolationAwarePrivateT_UnPgpgk
PUBLIC	IsolationAwarePrivateT_SqbjaYRiRY
PUBLIC	IsolationAwarePrivateT_SAbnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
EXTRN	GUID_NULL:BYTE
;	COMDAT IsolationAwarePrivateT_SqbjaYRiRY
_BSS	SEGMENT
IsolationAwarePrivateT_SqbjaYRiRY DD 01H DUP (?)
_BSS	ENDS
;	COMDAT IsolationAwarePrivateT_SAbnPgpgk
_BSS	SEGMENT
IsolationAwarePrivateT_SAbnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_UnPgpgk
_DATA	SEGMENT
WinbaseIsolationAwarePrivateT_UnPgpgk DQ ffffffffffffffffH
_DATA	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	WinbaseIsolationAwarePrivatetRgzlnPgpgk
PUBLIC	IsolationAwareRegisterClassExW
PUBLIC	?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z ; IGradient::GradientProc
PUBLIC	??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z ; DLGetWindowLongPtr<IGradient *>
PUBLIC	?InitGradientControls@@YAXXZ			; InitGradientControls
PUBLIC	??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl@ ; `string'
PUBLIC	?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4QBDB ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
PUBLIC	??_C@_1BK@CABEKACK@?$AAC?$AAu?$AAs?$AAt?$AAG?$AAr?$AAa?$AAd?$AAi?$AAe?$AAn?$AAt@ ; `string'
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_SetLastError:PROC
EXTRN	__imp_TlsGetValue:PROC
EXTRN	__imp_GetModuleFileNameW:PROC
EXTRN	__imp_GetModuleHandleExW:PROC
EXTRN	__imp_LoadLibraryW:PROC
EXTRN	__imp_CreateActCtxW:PROC
EXTRN	__imp_ActivateActCtx:PROC
EXTRN	__imp_DeactivateActCtx:PROC
EXTRN	__imp_FindActCtxSectionStringW:PROC
EXTRN	__imp_QueryActCtxW:PROC
EXTRN	__imp_GetStockObject:PROC
EXTRN	__imp_DefWindowProcW:PROC
EXTRN	__imp_RegisterClassExW:PROC
EXTRN	__imp_GetKeyState:PROC
EXTRN	__imp_LoadMenuW:PROC
EXTRN	__imp_GetSubMenu:PROC
EXTRN	__imp_TrackPopupMenuEx:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetCursorPos:PROC
EXTRN	__imp_GetWindowLongPtrW:PROC
EXTRN	__imp_SetWindowLongPtrW:PROC
EXTRN	__imp_LoadCursorW:PROC
EXTRN	?paint@GradientRamp@@QEAAXPEAUHDC__@@@Z:PROC	; GradientRamp::paint
EXTRN	?leftDown@GradientRamp@@QEAAXHH_N00@Z:PROC	; GradientRamp::leftDown
EXTRN	?leftUp@GradientRamp@@QEAAXHH_N00@Z:PROC	; GradientRamp::leftUp
EXTRN	?dragging@GradientRamp@@QEAAXHH_N00@Z:PROC	; GradientRamp::dragging
EXTRN	?popup@GradientRamp@@QEAAXHHH@Z:PROC		; GradientRamp::popup
EXTRN	__C_specific_handler:PROC
EXTRN	?hInstance@@3PEAUHINSTANCE__@@EA:QWORD		; hInstance
EXTRN	__imp_?thread_locals_index@@3HA:DWORD
_BSS	SEGMENT
?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A DB 010H DUP (?) ; MaxSDK::AssetManagement::kInvalidId
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN12
	DD	imagerel $LN12+72
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsolationAwarePrivatenPgViNgRzlnPgpgk DD imagerel $LN21
	DD	imagerel $LN21+138
	DD	imagerel $unwind$IsolationAwarePrivatenPgViNgRzlnPgpgk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$WinbaseIsolationAwarePrivatetRgzlnPgpgk DD imagerel $LN41
	DD	imagerel $LN41+467
	DD	imagerel $unwind$WinbaseIsolationAwarePrivatetRgzlnPgpgk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 DD imagerel WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0
	DD	imagerel WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0+32
	DD	imagerel $unwind$WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsolationAwareRegisterClassExW DD imagerel $LN44
	DD	imagerel $LN44+304
	DD	imagerel $unwind$IsolationAwareRegisterClassExW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsolationAwareRegisterClassExW$fin$0 DD imagerel IsolationAwareRegisterClassExW$fin$0
	DD	imagerel IsolationAwareRegisterClassExW$fin$0+88
	DD	imagerel $unwind$IsolationAwareRegisterClassExW$fin$0
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN22
	DD	imagerel $LN22+635
	DD	imagerel $unwind$?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InitGradientControls@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+128
	DD	imagerel $unwind$?InitGradientControls@@YAXXZ
pdata	ENDS
CRT$XCU	SEGMENT
?kInvalidId$initializer$@AssetManagement@MaxSDK@@3P6AXXZEA DQ FLAT:??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ; MaxSDK::AssetManagement::kInvalidId$initializer$
CRT$XCU	ENDS
;	COMDAT ??_C@_1BK@CABEKACK@?$AAC?$AAu?$AAs?$AAt?$AAG?$AAr?$AAa?$AAd?$AAi?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1BK@CABEKACK@?$AAC?$AAu?$AAs?$AAt?$AAG?$AAr?$AAa?$AAd?$AAi?$AAe?$AAn?$AAt@ DB 'C'
	DB	00H, 'u', 00H, 's', 00H, 't', 00H, 'G', 00H, 'r', 00H, 'a', 00H
	DB	'd', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?kTriObjNormalXTCID@@3VClass_ID@@B DD 0730a33d7H	; kTriObjNormalXTCID
	DD	027246c55H
?BlinnClassID@@3VClass_ID@@A DD 038H			; BlinnClassID
	DD	00H
?AnisoShaderClassID@@3VClass_ID@@A DD 02857f460H	; AnisoShaderClassID
	DD	00H
?AnisoShaderDlgClassID@@3VClass_ID@@A DD 02857f460H	; AnisoShaderDlgClassID
	DD	00H
?OrenNayarBlinnShaderClassID@@3VClass_ID@@A DD 02857f421H ; OrenNayarBlinnShaderClassID
	DD	00H
?OrenNayarShaderDlgClassID@@3VClass_ID@@A DD 02857f422H	; OrenNayarShaderDlgClassID
	DD	00H
?StraussShaderClassID@@3VClass_ID@@A DD 02857f450H	; StraussShaderClassID
	DD	00H
_DATA	ENDS
;	COMDAT ?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4QBDB
CONST	SEGMENT
?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4QBDB DB 'Isola'
	DB	'tionAware function called after IsolationAwareCleanup', 0aH, 00H ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
CONST	ENDS
;	COMDAT ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl@
CONST	SEGMENT
??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl@ DB 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'c', 00H, 't', 00H, 'l', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InitGradientControls@@YAXXZ DD 020601H
	DD	03002d206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z DD 0b1d01H
	DD	017741dH
	DD	016641dH
	DD	015541dH
	DD	014341dH
	DD	012011dH
	DD	0e016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsolationAwareRegisterClassExW$fin$0 DD 040801H
	DD	070043208H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsolationAwareRegisterClassExW DD 060f11H
	DD	0a640fH
	DD	08340fH
	DD	0700b520fH
	DD	imagerel __C_specific_handler
	DD	01H
	DD	imagerel $LN44+188
	DD	imagerel $LN44+205
	DD	imagerel IsolationAwareRegisterClassExW$fin$0
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 DD 020601H
	DD	050027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$WinbaseIsolationAwarePrivatetRgzlnPgpgk DD 030911H
	DD	05a0109H
	DD	03002H
	DD	imagerel __C_specific_handler
	DD	01H
	DD	imagerel $LN41+362
	DD	imagerel $LN41+419
	DD	imagerel WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsolationAwarePrivatenPgViNgRzlnPgpgk DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 081901H
	DD	086419H
	DD	075419H
	DD	063419H
	DD	070153219H
xdata	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\igradient.cpp
;	COMDAT ?InitGradientControls@@YAXXZ
_TEXT	SEGMENT
wc$ = 32
?InitGradientControls@@YAXXZ PROC			; InitGradientControls, COMDAT

; 185  : void InitGradientControls() {

$LN4:
	push	rbx
	sub	rsp, 112				; 00000070H

; 186  : 	WNDCLASSEX wc;
; 187  : 	wc.cbClsExtra = 0;

	xor	ebx, ebx
	mov	QWORD PTR wc$[rsp+16], rbx

; 188  : 	wc.cbWndExtra = 0;
; 189  : 	wc.hbrBackground = (HBRUSH)GetStockObject(NULL_BRUSH);

	lea	ecx, QWORD PTR [rbx+5]
	call	QWORD PTR __imp_GetStockObject

; 190  : 	wc.hCursor = LoadCursor(NULL, /*IDC_CROSS*/IDC_ARROW);

	mov	edx, 32512				; 00007f00H
	xor	ecx, ecx
	mov	QWORD PTR wc$[rsp+48], rax
	call	QWORD PTR __imp_LoadCursorW

; 191  : 	wc.hIcon = NULL;
; 192  : 	wc.hIconSm = NULL;
; 193  : 	wc.hInstance = hInstance;
; 194  : 	wc.lpfnWndProc = IGradient::GradientProc; //DlgProc control
; 195  : 	wc.lpszClassName = L"CustGradient";
; 196  : 	wc.lpszMenuName = NULL;
; 197  : 	wc.style = CS_OWNDC | CS_HREDRAW | CS_VREDRAW;
; 198  : 	wc.cbSize = sizeof(wc);
; 199  : 	RegisterClassEx(&wc);

	lea	rcx, QWORD PTR wc$[rsp]
	mov	QWORD PTR wc$[rsp+32], rbx
	mov	QWORD PTR wc$[rsp+40], rax
	mov	rax, QWORD PTR ?hInstance@@3PEAUHINSTANCE__@@EA ; hInstance
	mov	QWORD PTR wc$[rsp+24], rax
	lea	rax, OFFSET FLAT:?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z ; IGradient::GradientProc
	mov	QWORD PTR wc$[rsp+8], rax
	lea	rax, OFFSET FLAT:??_C@_1BK@CABEKACK@?$AAC?$AAu?$AAs?$AAt?$AAG?$AAr?$AAa?$AAd?$AAi?$AAe?$AAn?$AAt@
	mov	QWORD PTR wc$[rsp+64], rax
	mov	QWORD PTR wc$[rsp+72], rbx
	mov	QWORD PTR wc$[rsp+56], rbx
	mov	DWORD PTR wc$[rsp+4], 35		; 00000023H
	mov	DWORD PTR wc$[rsp], 80			; 00000050H
	call	IsolationAwareRegisterClassExW

; 200  : }

	add	rsp, 112				; 00000070H
	pop	rbx
	ret	0
?InitGradientControls@@YAXXZ ENDP			; InitGradientControls
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files\autodesk\3ds max 2020 sdk\maxsdk\include\3dsmaxdlport.h
;	COMDAT ??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z
_TEXT	SEGMENT
hWnd$ = 8
n$ = 16
__formal$ = 24
??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z PROC ; DLGetWindowLongPtr<IGradient *>, COMDAT

; 49   :    return (DataPtr)(static_cast<LONG_PTR>(::GetWindowLongPtr(hWnd, n)));

	rex_jmp	QWORD PTR __imp_GetWindowLongPtrW
??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z ENDP ; DLGetWindowLongPtr<IGradient *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files\autodesk\3ds max 2020 sdk\maxsdk\include\3dsmaxdlport.h
;	COMDAT ??$DLSetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@PEAV0@H@Z
_TEXT	SEGMENT
hWnd$ = 8
ptr$ = 16
n$ = 24
??$DLSetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@PEAV0@H@Z PROC ; DLSetWindowLongPtr<IGradient *>, COMDAT

; 101  : {

	mov	eax, r8d

; 102  : #if !defined( _WIN64 )
; 103  :    // SetWindowLongPtr() maps to SetWindowLong() in 32 bit land; react accordingly to keep
; 104  :    // the compiler happy, even with /Wp64.
; 105  :    return (Type)(static_cast<LONG_PTR>(::SetWindowLongPtr(hWnd, n, (LONG)((LONG_PTR)(ptr)))));
; 106  : #else
; 107  :    return (Type)(static_cast<LONG_PTR>(::SetWindowLongPtr(hWnd, n, (LONG_PTR)(ptr))));

	mov	r8, rdx
	mov	edx, eax
	rex_jmp	QWORD PTR __imp_SetWindowLongPtrW
??$DLSetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@PEAV0@H@Z ENDP ; DLSetWindowLongPtr<IGradient *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\igradient.cpp
; File c:\program files\autodesk\3ds max 2020 sdk\maxsdk\include\3dsmaxdlport.h
; File g:\dropbox\github\berconmaps\src\igradient.cpp
; File c:\program files\autodesk\3ds max 2020 sdk\maxsdk\include\3dsmaxdlport.h
; File g:\dropbox\github\berconmaps\src\igradient.cpp
; File c:\program files\autodesk\3ds max 2020 sdk\maxsdk\include\3dsmaxdlport.h
; File g:\dropbox\github\berconmaps\src\igradient.cpp
;	COMDAT ?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z
_TEXT	SEGMENT
pt$1 = 48
ps$2 = 64
hWnd$ = 160
msg$ = 168
wParam$ = 176
lParam$ = 184
?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z PROC	; IGradient::GradientProc, COMDAT

; 39   : LRESULT CALLBACK IGradient::GradientProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {

$LN22:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 144				; 00000090H
	mov	edi, edx
	mov	rsi, r9
; File c:\program files\autodesk\3ds max 2020 sdk\maxsdk\include\3dsmaxdlport.h

; 49   :    return (DataPtr)(static_cast<LONG_PTR>(::GetWindowLongPtr(hWnd, n)));

	mov	edx, -21
; File g:\dropbox\github\berconmaps\src\igradient.cpp

; 39   : LRESULT CALLBACK IGradient::GradientProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {

	mov	rbx, r8
	mov	rbp, rcx
; File c:\program files\autodesk\3ds max 2020 sdk\maxsdk\include\3dsmaxdlport.h

; 49   :    return (DataPtr)(static_cast<LONG_PTR>(::GetWindowLongPtr(hWnd, n)));

	call	QWORD PTR __imp_GetWindowLongPtrW
	mov	r14, rax
; File g:\dropbox\github\berconmaps\src\igradient.cpp

; 41   :    if(grad == NULL && msg != WM_CREATE)

	test	rax, rax
	jne	SHORT $LN4@GradientPr
	cmp	edi, 1
	jne	$LN14@GradientPr
$LN4@GradientPr:

; 42   :       return DefWindowProc(hWnd, msg, wParam, lParam);
; 43   : 
; 44   :    switch(msg) {	   

	cmp	edi, 513				; 00000201H
	ja	$LN16@GradientPr
	je	$LN8@GradientPr
	mov	eax, edi
	sub	eax, 1
	je	$LN5@GradientPr
	sub	eax, 14
	je	SHORT $LN13@GradientPr
	cmp	eax, 497				; 000001f1H
	jne	$LN14@GradientPr

; 50   : 		}
; 51   : 	   /*
; 52   : 		case WM_KILLFOCUS:
; 53   : 			if (ctrl->m_bMouseOver)	{
; 54   : 				ctrl->m_bMouseOver = false;
; 55   : 				ctrl->run_event_handler(n_mouseout, (short)LOWORD(lParam), (short)HIWORD(lParam), wParam, false);
; 56   : 			}
; 57   : 		break;
; 58   : 		 */
; 59   : 		case WM_MOUSEMOVE: {
; 60   : 			int buttons = (int)wParam; 
; 61   : 			if (buttons & MK_LBUTTON) {				

	test	bl, 1
	je	$LN2@GradientPr

; 62   : 				int mouse_x = (int)LOWORD(lParam);
; 63   : 				int mouse_y = (int)HIWORD(lParam); 
; 64   : 				grad->gradient->dragging(mouse_x, mouse_y, buttons&MK_CONTROL, buttons&MK_SHIFT, GetKeyState(VK_MENU) < 0);

	mov	ecx, 18
	call	QWORD PTR __imp_GetKeyState
	mov	r9d, ebx
	movzx	edx, si
	test	ax, ax
	mov	rax, rsi
	sets	cl
	shr	r9d, 2
	and	r9b, 1
	mov	BYTE PTR [rsp+40], cl
	mov	rcx, QWORD PTR [r14+16]
	shr	ebx, 3
	and	bl, 1
	shr	rax, 16
	mov	BYTE PTR [rsp+32], r9b
	movzx	r9d, bl
	movzx	r8d, ax
	call	?dragging@GradientRamp@@QEAAXHH_N00@Z	; GradientRamp::dragging

; 65   : 				//CharStream *out = thread_local(current_stdout);
; 66   : 				//out->printf("Dragging %d %d\n", mouse_x, mouse_y);
; 67   : 			}
; 68   : 			break;

	jmp	$LN2@GradientPr
$LN13@GradientPr:

; 124  : 		}
; 125  : 
; 126  : 		case WM_MBUTTONUP: {
; 127  : 			/*
; 128  : 			CharStream *out = thread_local(current_stdout);
; 129  : 
; 130  : 			int buttons = (int)wParam; 
; 131  : 			if (buttons & MK_CONTROL) {	
; 132  : 				out->printf("Middle mouse + control\n");
; 133  : 			} else if (buttons & MK_SHIFT) {
; 134  : 				out->printf("Middle mouse + shift\n");
; 135  : 			} else {
; 136  : 				out->printf("Middle mouse\n");
; 137  : 			}  */
; 138  : 			break;
; 139  : 		}
; 140  : 								 
; 141  : 		   /*
; 142  : 		case WM_LBUTTONUP:
; 143  : 			return ctrl->ButtonUp((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, left);
; 144  : 
; 145  : 		case WM_LBUTTONDBLCLK:
; 146  : 			return ctrl->ButtonDblClk((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, left);
; 147  : 
; 148  : 		case WM_RBUTTONDOWN:
; 149  : 			return ctrl->ButtonDown((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, right);
; 150  : 
; 151  : 		case WM_RBUTTONUP:
; 152  : 			return ctrl->ButtonUp((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, right);
; 153  : 
; 154  : 		case WM_RBUTTONDBLCLK:
; 155  : 			return ctrl->ButtonDblClk((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, right);
; 156  : 
; 157  : 		case WM_MBUTTONDOWN:
; 158  : 			return ctrl->ButtonDown((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, middle);
; 159  : 
; 160  : 		case WM_MBUTTONUP:
; 161  : 			return ctrl->ButtonUp((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, middle);
; 162  : 
; 163  : 		case WM_MBUTTONDBLCLK:
; 164  : 			return ctrl->ButtonDblClk((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, middle);
; 165  : 
; 166  : 		case WM_ERASEBKGND:
; 167  : 			return ctrl->EraseBkgnd((HDC)wParam);
; 168  : 		 
; 169  : 		 */
; 170  : 		case WM_PAINT: {			
; 171  : 			//CharStream *out = thread_local(current_stdout);
; 172  : 			//out->printf("!!Paint!!\n");
; 173  : 			PAINTSTRUCT ps;
; 174  : 			BeginPaint(hWnd,&ps);

	lea	rdx, QWORD PTR ps$2[rsp]
	mov	rcx, rbp
	call	QWORD PTR __imp_BeginPaint

; 175  : 			grad->gradient->paint(ps.hdc);

	mov	rdx, QWORD PTR ps$2[rsp]
	mov	rcx, QWORD PTR [r14+16]
	call	?paint@GradientRamp@@QEAAXPEAUHDC__@@@Z	; GradientRamp::paint

; 176  : 			EndPaint(hWnd,&ps);

	lea	rdx, QWORD PTR ps$2[rsp]
	mov	rcx, rbp
	call	QWORD PTR __imp_EndPaint

; 177  : 			return FALSE;

	jmp	$LN2@GradientPr
$LN5@GradientPr:
; File c:\program files\autodesk\3ds max 2020 sdk\maxsdk\include\3dsmaxdlport.h

; 107  :    return (Type)(static_cast<LONG_PTR>(::SetWindowLongPtr(hWnd, n, (LONG_PTR)(ptr))));

	mov	r8, QWORD PTR [rsi]
	mov	edx, -21
	mov	rcx, rbp
	call	QWORD PTR __imp_SetWindowLongPtrW
; File g:\dropbox\github\berconmaps\src\igradient.cpp

; 49   : 			break;

	jmp	$LN2@GradientPr
$LN8@GradientPr:

; 69   : 		}
; 70   : 		 
; 71   : 		case WM_LBUTTONDOWN: {
; 72   : 			CharStream *out = thread_local(current_stdout);

	mov	rax, QWORD PTR __imp_?thread_locals_index@@3HA
	mov	ecx, DWORD PTR [rax]
	call	QWORD PTR __imp_TlsGetValue

; 73   : 			
; 74   : 			int buttons = (int)wParam; 
; 75   : 			int mouse_x = (int)LOWORD(lParam);
; 76   : 			int mouse_y = (int)HIWORD(lParam); 
; 77   : 
; 78   : 			grad->gradient->leftDown(mouse_x, mouse_y, buttons&MK_CONTROL, buttons&MK_SHIFT, GetKeyState(VK_MENU) < 0);

	mov	ecx, 18
	call	QWORD PTR __imp_GetKeyState
	mov	r9d, ebx
	movzx	edx, si
	test	ax, ax
	mov	rax, rsi
	sets	cl
	shr	r9d, 2
	and	r9b, 1
	mov	BYTE PTR [rsp+40], cl
	mov	rcx, QWORD PTR [r14+16]
	shr	ebx, 3
	and	bl, 1
	shr	rax, 16
	mov	BYTE PTR [rsp+32], r9b
	movzx	r9d, bl
	movzx	r8d, ax
	call	?leftDown@GradientRamp@@QEAAXHH_N00@Z	; GradientRamp::leftDown

; 79   : 
; 80   : 			/*
; 81   : 			if (buttons & MK_CONTROL) {	
; 82   : 				out->printf("Left mouse DOWN + control\n");
; 83   : 			} else if (buttons & MK_SHIFT) {
; 84   : 				out->printf("Left mouse DOWN + shift\n");
; 85   : 			} else {
; 86   : 				out->printf("Left mouse DOWN %d %d\n", mouse_x, mouse_y);
; 87   : 			}*/
; 88   : 
; 89   : 			break;

	jmp	$LN2@GradientPr
$LN16@GradientPr:

; 42   :       return DefWindowProc(hWnd, msg, wParam, lParam);
; 43   : 
; 44   :    switch(msg) {	   

	mov	eax, edi
	sub	eax, 514				; 00000202H
	je	$LN9@GradientPr
	sub	eax, 3
	je	SHORT $LN10@GradientPr
	cmp	eax, 3
	je	$LN2@GradientPr
$LN14@GradientPr:

; 178  : 		}
; 179  : 		default:
; 180  : 			return DefWindowProc(hWnd, msg, wParam, lParam);
; 181  : 	}
; 182  : 	return FALSE;
; 183  : }

	mov	r9, rsi
	mov	r8, rbx
	mov	edx, edi
	mov	rcx, rbp
	call	QWORD PTR __imp_DefWindowProcW
	jmp	$LN1@GradientPr
$LN10@GradientPr:

; 99   : 
; 100  : 			/*
; 101  : 			if (buttons & MK_CONTROL) {	
; 102  : 				out->printf("Left mouse + control\n");
; 103  : 			} else if (buttons & MK_SHIFT) {
; 104  : 				out->printf("Left mouse + shift\n");
; 105  : 			} else {
; 106  : 				out->printf("Left mouse\n");
; 107  : 			}  */
; 108  : 			break;
; 109  : 		}
; 110  : 
; 111  : 		case WM_RBUTTONUP: {
; 112  : 			HMENU Popup;
; 113  : 			POINT pt;
; 114  : 			Popup = LoadMenu(hInstance, MAKEINTRESOURCE(IDR_GRADIENTMENU));

	mov	rcx, QWORD PTR ?hInstance@@3PEAUHINSTANCE__@@EA ; hInstance
	mov	edx, 169				; 000000a9H
	call	QWORD PTR __imp_LoadMenuW

; 115  : 			Popup = GetSubMenu(Popup, 0);

	mov	rcx, rax
	xor	edx, edx
	call	QWORD PTR __imp_GetSubMenu

; 116  : 			GetCursorPos(&pt);

	lea	rcx, QWORD PTR pt$1[rsp]
	mov	rbx, rax
	call	QWORD PTR __imp_GetCursorPos

; 117  : 			int sel = TrackPopupMenuEx(Popup, TPM_LEFTALIGN | TPM_RIGHTBUTTON | TPM_RETURNCMD, pt.x, pt.y, hWnd, NULL);

	mov	r9d, DWORD PTR pt$1[rsp+4]
	mov	edx, 258				; 00000102H
	mov	r8d, DWORD PTR pt$1[rsp]
	mov	rcx, rbx
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], rbp
	call	QWORD PTR __imp_TrackPopupMenuEx

; 118  : 			if (sel > 0) {

	test	eax, eax
	jle	SHORT $LN2@GradientPr

; 119  : 				int mouse_x = (int)LOWORD(lParam);
; 120  : 				int mouse_y = (int)HIWORD(lParam); 

	mov	rcx, rsi
	movzx	edx, si
	shr	rcx, 16

; 121  : 				grad->gradient->popup(mouse_x, mouse_y, sel);

	mov	r9d, eax
	movzx	r8d, cx
	mov	rcx, QWORD PTR [r14+16]
	call	?popup@GradientRamp@@QEAAXHHH@Z		; GradientRamp::popup

; 122  : 			}
; 123  : 			break;

	jmp	SHORT $LN2@GradientPr
$LN9@GradientPr:

; 90   : 		}
; 91   : 
; 92   : 		case WM_LBUTTONUP: {
; 93   : 			CharStream *out = thread_local(current_stdout);

	mov	rax, QWORD PTR __imp_?thread_locals_index@@3HA
	mov	ecx, DWORD PTR [rax]
	call	QWORD PTR __imp_TlsGetValue

; 94   : 			
; 95   : 			int buttons = (int)wParam; 
; 96   : 			int mouse_x = (int)LOWORD(lParam);
; 97   : 			int mouse_y = (int)HIWORD(lParam); 
; 98   : 			grad->gradient->leftUp(mouse_x, mouse_y, buttons&MK_CONTROL, buttons&MK_SHIFT, GetKeyState(VK_MENU) < 0);

	mov	ecx, 18
	call	QWORD PTR __imp_GetKeyState
	mov	r9d, ebx
	movzx	edx, si
	test	ax, ax
	mov	rax, rsi
	sets	cl
	shr	r9d, 2
	and	r9b, 1
	mov	BYTE PTR [rsp+40], cl
	mov	rcx, QWORD PTR [r14+16]
	shr	ebx, 3
	and	bl, 1
	shr	rax, 16
	mov	BYTE PTR [rsp+32], r9b
	movzx	r9d, bl
	movzx	r8d, ax
	call	?leftUp@GradientRamp@@QEAAXHH_N00@Z	; GradientRamp::leftUp
$LN2@GradientPr:

; 178  : 		}
; 179  : 		default:
; 180  : 			return DefWindowProc(hWnd, msg, wParam, lParam);
; 181  : 	}
; 182  : 	return FALSE;
; 183  : }

	xor	eax, eax
$LN1@GradientPr:
	lea	r11, QWORD PTR [rsp+144]
	mov	rbx, QWORD PTR [r11+16]
	mov	rbp, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	r14
	ret	0
?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z ENDP	; IGradient::GradientProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files\autodesk\3ds max 2020 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
text$di	SEGMENT
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ PROC	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId'', COMDAT

; 29   : 			AssetId() { *static_cast<GUID*>(this) = CLSID_NULL; }

	vmovups	xmm0, XMMWORD PTR GUID_NULL
	vmovups	XMMWORD PTR ?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A, xmm0

; 32   : 		static AssetId kInvalidId;

	ret	0
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ENDP	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files\autodesk\3ds max 2020 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ PROC		; MaxSDK::AssetManagement::AssetId::AssetId, COMDAT

; 29   : 			AssetId() { *static_cast<GUID*>(this) = CLSID_NULL; }

	vmovups	xmm0, XMMWORD PTR GUID_NULL
	vmovups	XMMWORD PTR [rcx], xmm0
	mov	rax, rcx
	ret	0
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ ENDP		; MaxSDK::AssetManagement::AssetId::AssetId
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files\autodesk\3ds max 2020 sdk\maxsdk\include\maxtypes.h
;	COMDAT ??0Class_ID@@QEAA@KK@Z
_TEXT	SEGMENT
this$ = 8
aa$ = 16
bb$ = 24
??0Class_ID@@QEAA@KK@Z PROC				; Class_ID::Class_ID, COMDAT

; 160  : 	Class_ID(ulong aa, ulong bb) { a = aa; b = bb; }

	mov	DWORD PTR [rcx], edx
	mov	rax, rcx
	mov	DWORD PTR [rcx+4], r8d
	ret	0
??0Class_ID@@QEAA@KK@Z ENDP				; Class_ID::Class_ID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winuser.inl
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winuser.inl
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winuser.inl
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winuser.inl
;	COMDAT IsolationAwareRegisterClassExW
_TEXT	SEGMENT
result$ = 32
unnamed1$ = 64
ulpCookie$ = 72
IsolationAwareRegisterClassExW PROC			; COMDAT

; 318  : {

$LN44:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx

; 319  :     ATOM result = 0 ;

	xor	ebx, ebx
	mov	WORD PTR result$[rsp], bx

; 320  :     ULONG_PTR ulpCookie = 0;

	mov	QWORD PTR ulpCookie$[rsp], rbx

; 321  :     const BOOL fActivateActCtxSuccess =
; 322  :         IsolationAwarePrivateT_SAbnPgpgk ||
; 323  :         IsolationAwarePrivateT_SqbjaYRiRY ||

	cmp	DWORD PTR IsolationAwarePrivateT_SAbnPgpgk, ebx
	jne	$LN2@IsolationA
	mov	eax, DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY
	test	eax, eax
	jne	$LN2@IsolationA
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl

; 585  :     if (WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	mov	edx, DWORD PTR WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
	test	edx, edx
	je	SHORT $LN23@IsolationA

; 586  :     {
; 587  :         const static char debugString[] = "IsolationAware function called after IsolationAwareCleanup\n";
; 588  :         OutputDebugStringA(debugString);

	lea	rcx, OFFSET FLAT:?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4QBDB ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
	call	QWORD PTR __imp_OutputDebugStringA
	mov	eax, DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY
	mov	edx, DWORD PTR WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
$LN23@IsolationA:

; 589  :     }
; 590  : 
; 591  :     if (IsolationAwarePrivateT_SqbjaYRiRY)

	test	eax, eax
	jne	SHORT $LN2@IsolationA

; 592  :     {
; 593  :         fResult = TRUE;
; 594  :         goto Exit;
; 595  :     }
; 596  : 
; 597  :     /* Do not call Init if Cleanup has been called. */
; 598  :     if (!WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	test	edx, edx
	jne	SHORT $LN27@IsolationA

; 599  :     {
; 600  :         if (!WinbaseIsolationAwarePrivatetRgzlnPgpgk())

	call	WinbaseIsolationAwarePrivatetRgzlnPgpgk
	test	eax, eax
	je	SHORT $Exit$45
$LN27@IsolationA:

; 146  :     return ActivateActCtx(hActCtx,lpCookie);

	lea	rdx, QWORD PTR ulpCookie$[rsp]
	mov	rcx, QWORD PTR WinbaseIsolationAwarePrivateT_UnPgpgk
	call	QWORD PTR __imp_ActivateActCtx

; 604  :     if (!IsolationAwareActivateActCtx(WinbaseIsolationAwarePrivateT_UnPgpgk, pulpCookie))

	test	eax, eax
	jne	SHORT $LN2@IsolationA
$Exit$45:

; 605  :         goto Exit;
; 606  : 
; 607  :     fResult = TRUE;
; 608  : Exit:
; 609  :     if (!fResult)
; 610  :     {
; 611  :         const DWORD dwLastError = GetLastError();

	call	QWORD PTR __imp_GetLastError

; 612  :         if (dwLastError == ERROR_PROC_NOT_FOUND
; 613  :             || dwLastError == ERROR_MOD_NOT_FOUND
; 614  :             || dwLastError == ERROR_CALL_NOT_IMPLEMENTED
; 615  :             || dwLastError == ERROR_INVALID_FUNCTION
; 616  :             || dwLastError == ERROR_NOT_SUPPORTED)

	lea	ecx, DWORD PTR [rax-126]
	cmp	ecx, 1
	jbe	SHORT $LN33@IsolationA
	cmp	eax, 120				; 00000078H
	je	SHORT $LN33@IsolationA
	cmp	eax, 1
	je	SHORT $LN33@IsolationA
	cmp	eax, 50					; 00000032H
	je	SHORT $LN33@IsolationA
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winuser.inl

; 326  :         return result;

	movzx	eax, bx

; 345  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN33@IsolationA:
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl

; 618  :             IsolationAwarePrivateT_SqbjaYRiRY = TRUE;

	mov	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 1
$LN2@IsolationA:
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winuser.inl

; 329  :         result = RegisterClassExW(unnamed1);

	mov	rcx, rdi
	call	QWORD PTR __imp_RegisterClassExW
	movzx	esi, ax
	mov	WORD PTR result$[rsp], ax
$LN21@IsolationA:

; 330  :     }
; 331  :     __finally
; 332  :     {
; 333  :         if (!IsolationAwarePrivateT_SAbnPgpgk
; 334  :          || !IsolationAwarePrivateT_SqbjaYRiRY

	cmp	DWORD PTR IsolationAwarePrivateT_SAbnPgpgk, 0
	je	SHORT $LN12@IsolationA
	cmp	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN15@IsolationA
$LN12@IsolationA:

; 335  :         )
; 336  :         {
; 337  :             const BOOL fPreserveLastError = (result == 0 );

	mov	edi, ebx
	test	si, si
	sete	dil

; 338  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;

	test	edi, edi
	je	SHORT $LN14@IsolationA
	call	QWORD PTR __imp_GetLastError
	mov	ebx, eax
$LN14@IsolationA:
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl

; 167  :     return DeactivateActCtx(dwFlags,ulCookie);

	mov	rdx, QWORD PTR ulpCookie$[rsp]
	xor	ecx, ecx
	call	QWORD PTR __imp_DeactivateActCtx
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winuser.inl

; 340  :             if (fPreserveLastError)

	test	edi, edi
	je	SHORT $LN15@IsolationA

; 341  :                 SetLastError(dwLastError);

	mov	ecx, ebx
	call	QWORD PTR __imp_SetLastError
$LN15@IsolationA:

; 342  :         }
; 343  :     }
; 344  :     return result;

	movzx	eax, si

; 345  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN1@IsolationA:
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
IsolationAwareRegisterClassExW ENDP
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
result$ = 32
unnamed1$ = 64
ulpCookie$ = 72
IsolationAwareRegisterClassExW$fin$0 PROC

; 330  :     }

	push	rbx
	push	rbp
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
$LN18@IsolationA:

; 330  :     }
; 331  :     __finally
; 332  :     {
; 333  :         if (!IsolationAwarePrivateT_SAbnPgpgk
; 334  :          || !IsolationAwarePrivateT_SqbjaYRiRY

	cmp	DWORD PTR IsolationAwarePrivateT_SAbnPgpgk, 0
	je	SHORT $LN5@IsolationA
	cmp	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN19@IsolationA
$LN5@IsolationA:

; 335  :         )
; 336  :         {
; 337  :             const BOOL fPreserveLastError = (result == 0 );

	xor	ebx, ebx
	cmp	WORD PTR result$[rbp], bx
	sete	bl

; 338  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;

	test	ebx, ebx
	je	SHORT $LN10@IsolationA
	call	QWORD PTR __imp_GetLastError
	mov	edi, eax
	jmp	SHORT $LN11@IsolationA
$LN10@IsolationA:
	xor	edi, edi
$LN11@IsolationA:
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl

; 167  :     return DeactivateActCtx(dwFlags,ulCookie);

	mov	rdx, QWORD PTR ulpCookie$[rbp]
	xor	ecx, ecx
	call	QWORD PTR __imp_DeactivateActCtx
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winuser.inl

; 340  :             if (fPreserveLastError)

	test	ebx, ebx
	je	SHORT $LN19@IsolationA

; 341  :                 SetLastError(dwLastError);

	mov	ecx, edi
	call	QWORD PTR __imp_SetLastError
	npad	1
$LN19@IsolationA:
	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rbp
	pop	rbx
	ret	0
	int	3
IsolationAwareRegisterClassExW$fin$0 ENDP
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winuser.inl
;	COMDAT text$x
text$x	SEGMENT
result$ = 32
unnamed1$ = 64
ulpCookie$ = 72
IsolationAwareRegisterClassExW$fin$0 PROC

; 330  :     }

	push	rbx
	push	rbp
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
$LN18@IsolationA:

; 331  :     __finally
; 332  :     {
; 333  :         if (!IsolationAwarePrivateT_SAbnPgpgk
; 334  :          || !IsolationAwarePrivateT_SqbjaYRiRY

	cmp	DWORD PTR IsolationAwarePrivateT_SAbnPgpgk, 0
	je	SHORT $LN5@IsolationA
	cmp	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN19@IsolationA
$LN5@IsolationA:

; 335  :         )
; 336  :         {
; 337  :             const BOOL fPreserveLastError = (result == 0 );

	xor	ebx, ebx
	cmp	WORD PTR result$[rbp], bx
	sete	bl

; 338  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;

	test	ebx, ebx
	je	SHORT $LN10@IsolationA
	call	QWORD PTR __imp_GetLastError
	mov	edi, eax
	jmp	SHORT $LN11@IsolationA
$LN10@IsolationA:
	xor	edi, edi
$LN11@IsolationA:
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl

; 167  :     return DeactivateActCtx(dwFlags,ulCookie);

	mov	rdx, QWORD PTR ulpCookie$[rbp]
	xor	ecx, ecx
	call	QWORD PTR __imp_DeactivateActCtx
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winuser.inl

; 340  :             if (fPreserveLastError)

	test	ebx, ebx
	je	SHORT $LN19@IsolationA

; 341  :                 SetLastError(dwLastError);

	mov	ecx, edi
	call	QWORD PTR __imp_SetLastError
	npad	1
$LN19@IsolationA:
	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rbp
	pop	rbx
	ret	0
	int	3
IsolationAwareRegisterClassExW$fin$0 ENDP
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl
;	COMDAT WinbaseIsolationAwarePrivatetRgzlnPgpgk
_TEXT	SEGMENT
actCtxBasicInfo$ = 64
actCtxSectionKeyedData$1 = 80
actCtx$2 = 80
rgchFullModulePath$3 = 192
ulpCookie$ = 736
hmodSelf$4 = 744
WinbaseIsolationAwarePrivatetRgzlnPgpgk PROC		; COMDAT

; 396  : {

$LN41:
	push	rbx
	sub	rsp, 720				; 000002d0H

; 397  :     BOOL fResult = FALSE;

	xor	ebx, ebx

; 398  :     ACTIVATION_CONTEXT_BASIC_INFORMATION actCtxBasicInfo;
; 399  :     ULONG_PTR ulpCookie = 0;

	mov	QWORD PTR ulpCookie$[rsp], rbx

; 400  : 
; 401  :     if (IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, ebx
	jne	$LN18@WinbaseIso

; 402  :     {
; 403  :         fResult = TRUE;
; 404  :         goto Exit;
; 405  :     }
; 406  : 
; 407  :     if (WinbaseIsolationAwarePrivateT_UnPgpgk != INVALID_HANDLE_VALUE)

	cmp	QWORD PTR WinbaseIsolationAwarePrivateT_UnPgpgk, -1
	jne	$LN18@WinbaseIso

; 209  :     return QueryActCtxW(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);

	mov	QWORD PTR [rsp+48], rbx
	mov	QWORD PTR [rsp+40], 16
	lea	rax, QWORD PTR actCtxBasicInfo$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9d, QWORD PTR [rbx+1]
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:WinbaseIsolationAwarePrivateT_UnPgpgk
	mov	ecx, -2147483632			; 80000010H
	call	QWORD PTR __imp_QueryActCtxW

; 408  :     {
; 409  :         fResult = TRUE;
; 410  :         goto Exit;
; 411  :     }
; 412  : 
; 413  :     if (!IsolationAwareQueryActCtxW(

	test	eax, eax
	je	$Exit$42

; 414  :         QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS
; 415  :         | QUERY_ACTCTX_FLAG_NO_ADDREF,
; 416  :         &WinbaseIsolationAwarePrivateT_UnPgpgk,
; 417  :         NULL,
; 418  :         ActivationContextBasicInformation,
; 419  :         &actCtxBasicInfo,
; 420  :         sizeof(actCtxBasicInfo),
; 421  :         NULL))
; 422  :         goto Exit;
; 423  : 
; 424  :     /*
; 425  :     If QueryActCtxW returns NULL, try CreateActCtx(3).
; 426  :     */
; 427  :     if (actCtxBasicInfo.hActCtx == NULL)

	mov	rax, QWORD PTR actCtxBasicInfo$[rsp]
	test	rax, rax
	jne	$LN8@WinbaseIso

; 428  :     {
; 429  :         ACTCTXW actCtx;
; 430  :         WCHAR rgchFullModulePath[MAX_PATH + 1];
; 431  :         DWORD dw;
; 432  :         HMODULE hmodSelf;
; 433  : #ifdef _M_IX86
; 434  :         PGET_MODULE_HANDLE_EXW pfnGetModuleHandleExW = (PGET_MODULE_HANDLE_EXW)WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("GetModuleHandleExW");
; 435  :         if (pfnGetModuleHandleExW == NULL)
; 436  :             goto Exit;
; 437  : #endif
; 438  :         if (!

	lea	r8, QWORD PTR hmodSelf$4[rsp]
	lea	rdx, OFFSET FLAT:WinbaseIsolationAwarePrivateT_UnPgpgk
	lea	ecx, QWORD PTR [rbx+6]
	call	QWORD PTR __imp_GetModuleHandleExW
	test	eax, eax
	je	$Exit$42

; 439  : #ifdef _M_IX86
; 440  :             (*pfnGetModuleHandleExW)
; 441  : #else
; 442  :             GetModuleHandleExW
; 443  : #endif
; 444  :             (     GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
; 445  :                 | GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,
; 446  :                 (LPCWSTR)&WinbaseIsolationAwarePrivateT_UnPgpgk,
; 447  :                 &hmodSelf))
; 448  :             goto Exit;
; 449  : 
; 450  :         dw = GetModuleFileNameW(hmodSelf, rgchFullModulePath, WINBASE_NUMBER_OF(rgchFullModulePath));

	mov	r8d, 261				; 00000105H
	lea	rdx, QWORD PTR rgchFullModulePath$3[rsp]
	mov	rcx, QWORD PTR hmodSelf$4[rsp]
	call	QWORD PTR __imp_GetModuleFileNameW

; 451  :         if (dw == 0)

	test	eax, eax
	je	$Exit$42

; 452  :             goto Exit;
; 453  :         if (dw >= WINBASE_NUMBER_OF(rgchFullModulePath))

	cmp	eax, 261				; 00000105H
	jb	SHORT $LN13@WinbaseIso

; 454  :         {
; 455  :             SetLastError(ERROR_BUFFER_OVERFLOW);

	lea	ecx, QWORD PTR [rbx+111]
	call	QWORD PTR __imp_SetLastError

; 497  :             }
; 498  :         }
; 499  :         __finally
; 500  :         {
; 501  :             IsolationAwareDeactivateActCtx(0, ulpCookie);
; 502  :         }
; 503  :     }
; 504  : 
; 505  :     fResult = TRUE;
; 506  : Exit:
; 507  :     return fResult;

	mov	eax, ebx

; 508  : }

	add	rsp, 720				; 000002d0H
	pop	rbx
	ret	0
$LN13@WinbaseIso:

; 456  :             goto Exit;
; 457  :         }
; 458  : 
; 459  :         actCtx.cbSize = sizeof(actCtx);

	mov	DWORD PTR actCtx$2[rsp], 56		; 00000038H

; 460  :         actCtx.dwFlags = ACTCTX_FLAG_RESOURCE_NAME_VALID | ACTCTX_FLAG_HMODULE_VALID;

	mov	DWORD PTR actCtx$2[rsp+4], 136		; 00000088H

; 461  :         actCtx.lpSource = rgchFullModulePath;

	lea	rax, QWORD PTR rgchFullModulePath$3[rsp]
	mov	QWORD PTR actCtx$2[rsp+8], rax

; 462  :         actCtx.lpResourceName = (LPCWSTR)(ULONG_PTR)3;

	mov	QWORD PTR actCtx$2[rsp+32], 3

; 463  :         actCtx.hModule = hmodSelf;

	mov	rax, QWORD PTR hmodSelf$4[rsp]
	mov	QWORD PTR actCtx$2[rsp+48], rax

; 105  :     return CreateActCtxW(pActCtx);

	lea	rcx, QWORD PTR actCtx$2[rsp]
	call	QWORD PTR __imp_CreateActCtxW
	mov	QWORD PTR actCtxBasicInfo$[rsp], rax

; 464  :         actCtxBasicInfo.hActCtx = IsolationAwareCreateActCtxW(&actCtx);
; 465  :         if (actCtxBasicInfo.hActCtx == INVALID_HANDLE_VALUE)

	cmp	rax, -1
	jne	SHORT $LN15@WinbaseIso

; 466  :         {
; 467  :             const DWORD dwLastError = GetLastError();

	call	QWORD PTR __imp_GetLastError

; 468  :             if ((dwLastError != ERROR_RESOURCE_DATA_NOT_FOUND) &&
; 469  :                 (dwLastError != ERROR_RESOURCE_TYPE_NOT_FOUND) &&
; 470  :                 (dwLastError != ERROR_RESOURCE_LANG_NOT_FOUND) &&
; 471  :                 (dwLastError != ERROR_RESOURCE_NAME_NOT_FOUND) &&
; 472  :                 (dwLastError != ERROR_FILE_NOT_FOUND) &&

	lea	ecx, DWORD PTR [rax-1812]
	cmp	ecx, 3
	jbe	SHORT $LN16@WinbaseIso
	add	eax, -2					; fffffffeH
	cmp	eax, 1
	ja	$Exit$42
$LN16@WinbaseIso:

; 473  :                 (dwLastError != ERROR_PATH_NOT_FOUND))
; 474  :                 goto Exit;
; 475  : 
; 476  :             actCtxBasicInfo.hActCtx = NULL;

	mov	rax, rbx
	mov	QWORD PTR actCtxBasicInfo$[rsp], rbx
$LN15@WinbaseIso:

; 477  :         }
; 478  : 
; 479  :         WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk = TRUE;

	mov	DWORD PTR WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk, 1
$LN8@WinbaseIso:

; 480  :     }
; 481  : 
; 482  :     WinbaseIsolationAwarePrivateT_UnPgpgk = actCtxBasicInfo.hActCtx;

	mov	QWORD PTR WinbaseIsolationAwarePrivateT_UnPgpgk, rax

; 146  :     return ActivateActCtx(hActCtx,lpCookie);

	lea	rdx, QWORD PTR ulpCookie$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_ActivateActCtx

; 483  : 
; 484  : #define ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION              (2)
; 485  : 
; 486  :     if (IsolationAwareActivateActCtx(actCtxBasicInfo.hActCtx, &ulpCookie))

	test	eax, eax
	je	SHORT $LN18@WinbaseIso

; 487  :     {
; 488  :         __try
; 489  :         {
; 490  :             ACTCTX_SECTION_KEYED_DATA actCtxSectionKeyedData;
; 491  : 
; 492  :             actCtxSectionKeyedData.cbSize = sizeof(actCtxSectionKeyedData);

	mov	DWORD PTR actCtxSectionKeyedData$1[rsp], 112 ; 00000070H

; 188  :     return FindActCtxSectionStringW(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);

	lea	rax, QWORD PTR actCtxSectionKeyedData$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl@
	xor	edx, edx
	xor	ecx, ecx
	lea	r8d, QWORD PTR [rdx+2]
	call	QWORD PTR __imp_FindActCtxSectionStringW

; 493  :             if (IsolationAwareFindActCtxSectionStringW(0, NULL, ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION, L"Comctl32.dll", &actCtxSectionKeyedData))

	test	eax, eax
	je	SHORT $LN20@WinbaseIso

; 494  :             {
; 495  :                 /* get button, edit, etc. registered */
; 496  :                 LoadLibraryW(L"Comctl32.dll");

	lea	rcx, OFFSET FLAT:??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl@
	call	QWORD PTR __imp_LoadLibraryW
	npad	1
$LN20@WinbaseIso:
$LN26@WinbaseIso:

; 167  :     return DeactivateActCtx(dwFlags,ulCookie);

	mov	rdx, QWORD PTR ulpCookie$[rsp]
	xor	ecx, ecx
	call	QWORD PTR __imp_DeactivateActCtx

; 497  :             }
; 498  :         }
; 499  :         __finally
; 500  :         {
; 501  :             IsolationAwareDeactivateActCtx(0, ulpCookie);
; 502  :         }
; 503  :     }
; 504  : 
; 505  :     fResult = TRUE;
; 506  : Exit:
; 507  :     return fResult;

	mov	ebx, 1
	mov	eax, ebx

; 508  : }

	add	rsp, 720				; 000002d0H
	pop	rbx
	ret	0
$LN18@WinbaseIso:

; 497  :             }
; 498  :         }
; 499  :         __finally
; 500  :         {
; 501  :             IsolationAwareDeactivateActCtx(0, ulpCookie);
; 502  :         }
; 503  :     }
; 504  : 
; 505  :     fResult = TRUE;
; 506  : Exit:
; 507  :     return fResult;

	mov	ebx, 1
$Exit$42:
	mov	eax, ebx
$LN22@WinbaseIso:

; 508  : }

	add	rsp, 720				; 000002d0H
	pop	rbx
	ret	0
WinbaseIsolationAwarePrivatetRgzlnPgpgk ENDP
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
actCtxBasicInfo$ = 64
actCtxSectionKeyedData$1 = 80
actCtx$2 = 80
rgchFullModulePath$3 = 192
ulpCookie$ = 736
hmodSelf$4 = 744
WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 PROC

; 497  :             }
; 498  :         }

	push	rbp
	sub	rsp, 64					; 00000040H
	mov	rbp, rdx
$LN23@WinbaseIso:

; 167  :     return DeactivateActCtx(dwFlags,ulCookie);

	mov	rdx, QWORD PTR ulpCookie$[rbp]
	xor	ecx, ecx
	call	QWORD PTR __imp_DeactivateActCtx
	npad	1
$LN24@WinbaseIso:
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
	int	3
WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 ENDP
text$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
actCtxBasicInfo$ = 64
actCtxSectionKeyedData$1 = 80
actCtx$2 = 80
rgchFullModulePath$3 = 192
ulpCookie$ = 736
hmodSelf$4 = 744
WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 PROC

; 168  : #else
; 169  :     BOOL fResult = FALSE;
; 170  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_In_ ULONG_PTR ulCookie);
; 171  :     static PFN s_pfn;
; 172  :     PFN __IsolationAware_pfn = s_pfn;
; 173  :     if (__IsolationAware_pfn == NULL)
; 174  :     {
; 175  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("DeactivateActCtx");
; 176  :         if (__IsolationAware_pfn == NULL)
; 177  :             return fResult;
; 178  :         s_pfn = __IsolationAware_pfn;
; 179  :     }
; 180  :     fResult = __IsolationAware_pfn(dwFlags,ulCookie);
; 181  :     return fResult;
; 182  : #endif
; 183  : }
; 184  : 
; 185  : _Success_(return) ISOLATION_AWARE_INLINE BOOL IsolationAwarePrivatenCv IsolationAwareFindActCtxSectionStringW(_In_ DWORD dwFlags,_Reserved_ const GUID*lpExtensionGuid,_In_ ULONG ulSectionId,_In_ LPCWSTR lpStringToFind,_Out_ PACTCTX_SECTION_KEYED_DATA ReturnedData)
; 186  : {
; 187  : #ifdef _WIN64
; 188  :     return FindActCtxSectionStringW(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);
; 189  : #else
; 190  :     BOOL fResult = FALSE;
; 191  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_Reserved_ const GUID*lpExtensionGuid,_In_ ULONG ulSectionId,_In_ LPCWSTR lpStringToFind,_Out_ PACTCTX_SECTION_KEYED_DATA ReturnedData);
; 192  :     static PFN s_pfn;
; 193  :     PFN __IsolationAware_pfn = s_pfn;
; 194  :     if (__IsolationAware_pfn == NULL)
; 195  :     {
; 196  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("FindActCtxSectionStringW");
; 197  :         if (__IsolationAware_pfn == NULL)
; 198  :             return fResult;
; 199  :         s_pfn = __IsolationAware_pfn;
; 200  :     }
; 201  :     fResult = __IsolationAware_pfn(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);
; 202  :     return fResult;
; 203  : #endif
; 204  : }
; 205  : 
; 206  : _Success_(return) ISOLATION_AWARE_INLINE BOOL IsolationAwarePrivatenCv IsolationAwareQueryActCtxW(_In_ DWORD dwFlags,_In_ HANDLE hActCtx,_In_opt_ PVOID pvSubInstance,_In_ ULONG ulInfoClass,_Out_writes_bytes_to_opt_(cbBuffer,*pcbWrittenOrRequired) PVOID pvBuffer,_In_ SIZE_T cbBuffer,_Out_opt_ SIZE_T*pcbWrittenOrRequired)
; 207  : {
; 208  : #ifdef _WIN64
; 209  :     return QueryActCtxW(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);
; 210  : #else
; 211  :     BOOL fResult = FALSE;
; 212  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_In_ HANDLE hActCtx,_In_opt_ PVOID pvSubInstance,_In_ ULONG ulInfoClass,_Out_writes_bytes_to_opt_(cbBuffer,*pcbWrittenOrRequired) PVOID pvBuffer,_In_ SIZE_T cbBuffer,_Out_opt_ SIZE_T*pcbWrittenOrRequired);
; 213  :     static PFN s_pfn;
; 214  :     PFN __IsolationAware_pfn = s_pfn;
; 215  :     if (__IsolationAware_pfn == NULL)
; 216  :     {
; 217  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("QueryActCtxW");
; 218  :         if (__IsolationAware_pfn == NULL)
; 219  :             return fResult;
; 220  :         s_pfn = __IsolationAware_pfn;
; 221  :     }
; 222  :     fResult = __IsolationAware_pfn(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);
; 223  :     return fResult;
; 224  : #endif
; 225  : }
; 226  : 
; 227  : _Ret_maybenull_ ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwareLoadLibraryExA(_In_ LPCSTR lpLibFileName,_Reserved_ HANDLE hFile,_In_ DWORD dwFlags)
; 228  : {
; 229  :     HMODULE moduleResult = NULL;
; 230  :     ULONG_PTR ulpCookie = 0;
; 231  :     const BOOL fActivateActCtxSuccess =
; 232  :         IsolationAwarePrivateT_SAbnPgpgk ||
; 233  :         IsolationAwarePrivateT_SqbjaYRiRY ||
; 234  :         IsolationAwarePrivatenPgViNgRzlnPgpgk(&ulpCookie);
; 235  :     if (!fActivateActCtxSuccess)
; 236  :         return moduleResult;
; 237  :     __try
; 238  :     {
; 239  :         moduleResult = LoadLibraryExA(lpLibFileName,hFile,dwFlags);
; 240  :     }
; 241  :     __finally
; 242  :     {
; 243  :         if (!IsolationAwarePrivateT_SAbnPgpgk
; 244  :          || !IsolationAwarePrivateT_SqbjaYRiRY
; 245  :         )
; 246  :         {
; 247  :             const BOOL fPreserveLastError = (moduleResult == NULL);
; 248  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;
; 249  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);
; 250  :             if (fPreserveLastError)
; 251  :                 SetLastError(dwLastError);
; 252  :         }
; 253  :     }
; 254  :     return moduleResult;
; 255  : }
; 256  : 
; 257  : _Ret_maybenull_ ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwareLoadLibraryExW(_In_ LPCWSTR lpLibFileName,_Reserved_ HANDLE hFile,_In_ DWORD dwFlags)
; 258  : {
; 259  :     HMODULE moduleResult = NULL;
; 260  :     ULONG_PTR ulpCookie = 0;
; 261  :     const BOOL fActivateActCtxSuccess =
; 262  :         IsolationAwarePrivateT_SAbnPgpgk ||
; 263  :         IsolationAwarePrivateT_SqbjaYRiRY ||
; 264  :         IsolationAwarePrivatenPgViNgRzlnPgpgk(&ulpCookie);
; 265  :     if (!fActivateActCtxSuccess)
; 266  :         return moduleResult;
; 267  :     __try
; 268  :     {
; 269  :         moduleResult = LoadLibraryExW(lpLibFileName,hFile,dwFlags);
; 270  :     }
; 271  :     __finally
; 272  :     {
; 273  :         if (!IsolationAwarePrivateT_SAbnPgpgk
; 274  :          || !IsolationAwarePrivateT_SqbjaYRiRY
; 275  :         )
; 276  :         {
; 277  :             const BOOL fPreserveLastError = (moduleResult == NULL);
; 278  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;
; 279  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);
; 280  :             if (fPreserveLastError)
; 281  :                 SetLastError(dwLastError);
; 282  :         }
; 283  :     }
; 284  :     return moduleResult;
; 285  : }
; 286  : 
; 287  : _Ret_maybenull_ ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwareLoadLibraryA(_In_ LPCSTR lpLibFileName)
; 288  : {
; 289  :     HMODULE moduleResult = NULL;
; 290  :     ULONG_PTR ulpCookie = 0;
; 291  :     const BOOL fActivateActCtxSuccess =
; 292  :         IsolationAwarePrivateT_SAbnPgpgk ||
; 293  :         IsolationAwarePrivateT_SqbjaYRiRY ||
; 294  :         IsolationAwarePrivatenPgViNgRzlnPgpgk(&ulpCookie);
; 295  :     if (!fActivateActCtxSuccess)
; 296  :         return moduleResult;
; 297  :     __try
; 298  :     {
; 299  :         moduleResult = LoadLibraryA(lpLibFileName);
; 300  :     }
; 301  :     __finally
; 302  :     {
; 303  :         if (!IsolationAwarePrivateT_SAbnPgpgk
; 304  :          || !IsolationAwarePrivateT_SqbjaYRiRY
; 305  :         )
; 306  :         {
; 307  :             const BOOL fPreserveLastError = (moduleResult == NULL);
; 308  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;
; 309  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);
; 310  :             if (fPreserveLastError)
; 311  :                 SetLastError(dwLastError);
; 312  :         }
; 313  :     }
; 314  :     return moduleResult;
; 315  : }
; 316  : 
; 317  : _Ret_maybenull_ ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwareLoadLibraryW(_In_ LPCWSTR lpLibFileName)
; 318  : {
; 319  :     HMODULE moduleResult = NULL;
; 320  :     ULONG_PTR ulpCookie = 0;
; 321  :     const BOOL fActivateActCtxSuccess =
; 322  :         IsolationAwarePrivateT_SAbnPgpgk ||
; 323  :         IsolationAwarePrivateT_SqbjaYRiRY ||
; 324  :         IsolationAwarePrivatenPgViNgRzlnPgpgk(&ulpCookie);
; 325  :     if (!fActivateActCtxSuccess)
; 326  :         return moduleResult;
; 327  :     __try
; 328  :     {
; 329  :         moduleResult = LoadLibraryW(lpLibFileName);
; 330  :     }
; 331  :     __finally
; 332  :     {
; 333  :         if (!IsolationAwarePrivateT_SAbnPgpgk
; 334  :          || !IsolationAwarePrivateT_SqbjaYRiRY
; 335  :         )
; 336  :         {
; 337  :             const BOOL fPreserveLastError = (moduleResult == NULL);
; 338  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;
; 339  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);
; 340  :             if (fPreserveLastError)
; 341  :                 SetLastError(dwLastError);
; 342  :         }
; 343  :     }
; 344  :     return moduleResult;
; 345  : }
; 346  : 
; 347  : 
; 348  : 
; 349  : #define WINBASE_NUMBER_OF(x) (sizeof(x) / sizeof((x)[0]))
; 350  : 
; 351  : typedef struct IsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB {
; 352  :     HMODULE (IsolationAwarePrivatenCv * WinbaseIsolationAwarePrivateybNQJ)(_In_ PCWSTR w);
; 353  :     PCWSTR WinbaseIsolationAwarePrivateANZRJ;
; 354  : #ifdef _M_IX86
; 355  :     HMODULE (IsolationAwarePrivatenCv * WinbaseIsolationAwarePrivateybNQn)(_In_ PCSTR w);
; 356  :     PCSTR  WinbaseIsolationAwarePrivateANZRn;
; 357  : #endif
; 358  : } IsolationAwarePrivatepBAFGnAG_zBqHyr_vAsB;
; 359  : typedef const IsolationAwarePrivatepBAFGnAG_zBqHyr_vAsB *IsolationAwarePrivateCpBAFGnAG_zBqHyr_vAsB;
; 360  : 
; 361  : typedef struct IsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB {
; 362  :     HMODULE WinbaseIsolationAwarePrivateybNQRQzbQhYR;
; 363  : } IsolationAwarePrivatezHGnoyr_zBqHyr_vAsB, *IsolationAwarePrivateCzHGnoyr_zBqHyr_vAsB;
; 364  : 
; 365  : ISOLATION_AWARE_INLINE FARPROC IsolationAwarePrivatenCv
; 366  : IsolationAwarePrivatezltRgCebPnQQeRff(
; 367  :     _In_ IsolationAwarePrivateCpBAFGnAG_zBqHyr_vAsB c,
; 368  :     _Inout_ IsolationAwarePrivateCzHGnoyr_zBqHyr_vAsB m,
; 369  :     _In_ PCSTR ProcName
; 370  :     )
; 371  : {
; 372  :     FARPROC Proc = NULL;
; 373  :     HMODULE hModule;
; 374  :     hModule = m->WinbaseIsolationAwarePrivateybNQRQzbQhYR;
; 375  :     if (hModule == NULL)
; 376  :     {
; 377  :         hModule = (*c->WinbaseIsolationAwarePrivateybNQJ)(c->WinbaseIsolationAwarePrivateANZRJ);
; 378  :         if (hModule == NULL)
; 379  :             goto Exit;
; 380  :         m->WinbaseIsolationAwarePrivateybNQRQzbQhYR = hModule;
; 381  :     }
; 382  :     Proc = GetProcAddress(hModule, ProcName);
; 383  : Exit:
; 384  :     return Proc;
; 385  : }
; 386  : 
; 387  : ISOLATION_AWARE_INLINE BOOL IsolationAwarePrivatenCv
; 388  : WinbaseIsolationAwarePrivatetRgzlnPgpgk(void)
; 389  : /*
; 390  : The correctness of this function depends on it being statically
; 391  : linked into its clients.
; 392  : 
; 393  : This function is private to functions present in this header.
; 394  : Do not use it.
; 395  : */
; 396  : {
; 397  :     BOOL fResult = FALSE;
; 398  :     ACTIVATION_CONTEXT_BASIC_INFORMATION actCtxBasicInfo;
; 399  :     ULONG_PTR ulpCookie = 0;
; 400  : 
; 401  :     if (IsolationAwarePrivateT_SqbjaYRiRY)
; 402  :     {
; 403  :         fResult = TRUE;
; 404  :         goto Exit;
; 405  :     }
; 406  : 
; 407  :     if (WinbaseIsolationAwarePrivateT_UnPgpgk != INVALID_HANDLE_VALUE)
; 408  :     {
; 409  :         fResult = TRUE;
; 410  :         goto Exit;
; 411  :     }
; 412  : 
; 413  :     if (!IsolationAwareQueryActCtxW(
; 414  :         QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS
; 415  :         | QUERY_ACTCTX_FLAG_NO_ADDREF,
; 416  :         &WinbaseIsolationAwarePrivateT_UnPgpgk,
; 417  :         NULL,
; 418  :         ActivationContextBasicInformation,
; 419  :         &actCtxBasicInfo,
; 420  :         sizeof(actCtxBasicInfo),
; 421  :         NULL))
; 422  :         goto Exit;
; 423  : 
; 424  :     /*
; 425  :     If QueryActCtxW returns NULL, try CreateActCtx(3).
; 426  :     */
; 427  :     if (actCtxBasicInfo.hActCtx == NULL)
; 428  :     {
; 429  :         ACTCTXW actCtx;
; 430  :         WCHAR rgchFullModulePath[MAX_PATH + 1];
; 431  :         DWORD dw;
; 432  :         HMODULE hmodSelf;
; 433  : #ifdef _M_IX86
; 434  :         PGET_MODULE_HANDLE_EXW pfnGetModuleHandleExW = (PGET_MODULE_HANDLE_EXW)WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("GetModuleHandleExW");
; 435  :         if (pfnGetModuleHandleExW == NULL)
; 436  :             goto Exit;
; 437  : #endif
; 438  :         if (!
; 439  : #ifdef _M_IX86
; 440  :             (*pfnGetModuleHandleExW)
; 441  : #else
; 442  :             GetModuleHandleExW
; 443  : #endif
; 444  :             (     GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
; 445  :                 | GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,
; 446  :                 (LPCWSTR)&WinbaseIsolationAwarePrivateT_UnPgpgk,
; 447  :                 &hmodSelf))
; 448  :             goto Exit;
; 449  : 
; 450  :         dw = GetModuleFileNameW(hmodSelf, rgchFullModulePath, WINBASE_NUMBER_OF(rgchFullModulePath));
; 451  :         if (dw == 0)
; 452  :             goto Exit;
; 453  :         if (dw >= WINBASE_NUMBER_OF(rgchFullModulePath))
; 454  :         {
; 455  :             SetLastError(ERROR_BUFFER_OVERFLOW);
; 456  :             goto Exit;
; 457  :         }
; 458  : 
; 459  :         actCtx.cbSize = sizeof(actCtx);
; 460  :         actCtx.dwFlags = ACTCTX_FLAG_RESOURCE_NAME_VALID | ACTCTX_FLAG_HMODULE_VALID;
; 461  :         actCtx.lpSource = rgchFullModulePath;
; 462  :         actCtx.lpResourceName = (LPCWSTR)(ULONG_PTR)3;
; 463  :         actCtx.hModule = hmodSelf;
; 464  :         actCtxBasicInfo.hActCtx = IsolationAwareCreateActCtxW(&actCtx);
; 465  :         if (actCtxBasicInfo.hActCtx == INVALID_HANDLE_VALUE)
; 466  :         {
; 467  :             const DWORD dwLastError = GetLastError();
; 468  :             if ((dwLastError != ERROR_RESOURCE_DATA_NOT_FOUND) &&
; 469  :                 (dwLastError != ERROR_RESOURCE_TYPE_NOT_FOUND) &&
; 470  :                 (dwLastError != ERROR_RESOURCE_LANG_NOT_FOUND) &&
; 471  :                 (dwLastError != ERROR_RESOURCE_NAME_NOT_FOUND) &&
; 472  :                 (dwLastError != ERROR_FILE_NOT_FOUND) &&
; 473  :                 (dwLastError != ERROR_PATH_NOT_FOUND))
; 474  :                 goto Exit;
; 475  : 
; 476  :             actCtxBasicInfo.hActCtx = NULL;
; 477  :         }
; 478  : 
; 479  :         WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk = TRUE;
; 480  :     }
; 481  : 
; 482  :     WinbaseIsolationAwarePrivateT_UnPgpgk = actCtxBasicInfo.hActCtx;
; 483  : 
; 484  : #define ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION              (2)
; 485  : 
; 486  :     if (IsolationAwareActivateActCtx(actCtxBasicInfo.hActCtx, &ulpCookie))
; 487  :     {
; 488  :         __try
; 489  :         {
; 490  :             ACTCTX_SECTION_KEYED_DATA actCtxSectionKeyedData;
; 491  : 
; 492  :             actCtxSectionKeyedData.cbSize = sizeof(actCtxSectionKeyedData);
; 493  :             if (IsolationAwareFindActCtxSectionStringW(0, NULL, ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION, L"Comctl32.dll", &actCtxSectionKeyedData))
; 494  :             {
; 495  :                 /* get button, edit, etc. registered */
; 496  :                 LoadLibraryW(L"Comctl32.dll");
; 497  :             }
; 498  :         }

	push	rbp
	sub	rsp, 64					; 00000040H
	mov	rbp, rdx
$LN23@WinbaseIso:

; 167  :     return DeactivateActCtx(dwFlags,ulCookie);

	mov	rdx, QWORD PTR ulpCookie$[rbp]
	xor	ecx, ecx
	call	QWORD PTR __imp_DeactivateActCtx
	npad	1
$LN24@WinbaseIso:
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
	int	3
WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 ENDP
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl
;	COMDAT IsolationAwareQueryActCtxW
_TEXT	SEGMENT
dwFlags$ = 8
hActCtx$ = 16
pvSubInstance$ = 24
ulInfoClass$ = 32
pvBuffer$ = 40
cbBuffer$ = 48
pcbWrittenOrRequired$ = 56
IsolationAwareQueryActCtxW PROC				; COMDAT

; 208  : #ifdef _WIN64
; 209  :     return QueryActCtxW(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);

	rex_jmp	QWORD PTR __imp_QueryActCtxW
IsolationAwareQueryActCtxW ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl
;	COMDAT IsolationAwareFindActCtxSectionStringW
_TEXT	SEGMENT
dwFlags$ = 8
lpExtensionGuid$ = 16
ulSectionId$ = 24
lpStringToFind$ = 32
ReturnedData$ = 40
IsolationAwareFindActCtxSectionStringW PROC		; COMDAT

; 187  : #ifdef _WIN64
; 188  :     return FindActCtxSectionStringW(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);

	rex_jmp	QWORD PTR __imp_FindActCtxSectionStringW
IsolationAwareFindActCtxSectionStringW ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl
;	COMDAT IsolationAwareDeactivateActCtx
_TEXT	SEGMENT
dwFlags$ = 8
ulCookie$ = 16
IsolationAwareDeactivateActCtx PROC			; COMDAT

; 166  : #ifdef _WIN64
; 167  :     return DeactivateActCtx(dwFlags,ulCookie);

	rex_jmp	QWORD PTR __imp_DeactivateActCtx
IsolationAwareDeactivateActCtx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl
;	COMDAT IsolationAwareActivateActCtx
_TEXT	SEGMENT
hActCtx$ = 8
lpCookie$ = 16
IsolationAwareActivateActCtx PROC			; COMDAT

; 145  : #ifdef _WIN64
; 146  :     return ActivateActCtx(hActCtx,lpCookie);

	rex_jmp	QWORD PTR __imp_ActivateActCtx
IsolationAwareActivateActCtx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl
;	COMDAT IsolationAwareCreateActCtxW
_TEXT	SEGMENT
pActCtx$ = 8
IsolationAwareCreateActCtxW PROC			; COMDAT

; 104  : #ifdef _WIN64
; 105  :     return CreateActCtxW(pActCtx);

	rex_jmp	QWORD PTR __imp_CreateActCtxW
IsolationAwareCreateActCtxW ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\um\winbase.inl
;	COMDAT IsolationAwarePrivatenPgViNgRzlnPgpgk
_TEXT	SEGMENT
pulpCookie$ = 48
IsolationAwarePrivatenPgViNgRzlnPgpgk PROC		; COMDAT

; 582  : {

$LN21:
	push	rbx
	sub	rsp, 32					; 00000020H

; 583  :     BOOL fResult = FALSE;
; 584  : 
; 585  :     if (WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	mov	eax, DWORD PTR WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
	mov	rbx, rcx
	test	eax, eax
	je	SHORT $LN2@IsolationA

; 586  :     {
; 587  :         const static char debugString[] = "IsolationAware function called after IsolationAwareCleanup\n";
; 588  :         OutputDebugStringA(debugString);

	lea	rcx, OFFSET FLAT:?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4QBDB ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
	call	QWORD PTR __imp_OutputDebugStringA
	mov	eax, DWORD PTR WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
$LN2@IsolationA:

; 589  :     }
; 590  : 
; 591  :     if (IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN19@IsolationA

; 592  :     {
; 593  :         fResult = TRUE;
; 594  :         goto Exit;
; 595  :     }
; 596  : 
; 597  :     /* Do not call Init if Cleanup has been called. */
; 598  :     if (!WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	test	eax, eax
	jne	SHORT $LN6@IsolationA

; 599  :     {
; 600  :         if (!WinbaseIsolationAwarePrivatetRgzlnPgpgk())

	call	WinbaseIsolationAwarePrivatetRgzlnPgpgk
	test	eax, eax
	je	SHORT $LN16@IsolationA
$LN6@IsolationA:

; 146  :     return ActivateActCtx(hActCtx,lpCookie);

	mov	rcx, QWORD PTR WinbaseIsolationAwarePrivateT_UnPgpgk
	mov	rdx, rbx
	call	QWORD PTR __imp_ActivateActCtx

; 601  :             goto Exit;
; 602  :     }
; 603  :     /* If Cleanup has been called and id3 was in use, this will activate NULL. */
; 604  :     if (!IsolationAwareActivateActCtx(WinbaseIsolationAwarePrivateT_UnPgpgk, pulpCookie))

	test	eax, eax
	jne	SHORT $LN19@IsolationA
$LN16@IsolationA:

; 605  :         goto Exit;
; 606  : 
; 607  :     fResult = TRUE;
; 608  : Exit:
; 609  :     if (!fResult)
; 610  :     {
; 611  :         const DWORD dwLastError = GetLastError();

	call	QWORD PTR __imp_GetLastError

; 612  :         if (dwLastError == ERROR_PROC_NOT_FOUND
; 613  :             || dwLastError == ERROR_MOD_NOT_FOUND
; 614  :             || dwLastError == ERROR_CALL_NOT_IMPLEMENTED
; 615  :             || dwLastError == ERROR_INVALID_FUNCTION
; 616  :             || dwLastError == ERROR_NOT_SUPPORTED)

	lea	ecx, DWORD PTR [rax-126]
	cmp	ecx, 1
	jbe	SHORT $LN12@IsolationA
	cmp	eax, 120				; 00000078H
	je	SHORT $LN12@IsolationA
	cmp	eax, 1
	je	SHORT $LN12@IsolationA
	cmp	eax, 50					; 00000032H
	je	SHORT $LN12@IsolationA

; 619  :             fResult = TRUE;
; 620  :         }
; 621  :     }
; 622  :     return fResult;

	xor	eax, eax

; 623  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN12@IsolationA:

; 617  :         {
; 618  :             IsolationAwarePrivateT_SqbjaYRiRY = TRUE;

	mov	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 1
$LN19@IsolationA:

; 623  : }

	mov	eax, 1
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
IsolationAwarePrivatenPgViNgRzlnPgpgk ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\igradient.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\igradient.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 8
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
__t$ = 48
__s$ = 56
__n$ = 64
__f$ = 72
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN12:
	test	r8, r8
	je	SHORT $LN10@vector
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r9
	mov	rbx, r8
	mov	rbp, rdx
	mov	rdi, rcx
$LL2@vector:
	mov	rcx, rdi
	call	rsi
	add	rdi, rbp
	sub	rbx, 1
	jne	SHORT $LL2@vector
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
$LN10@vector:
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
