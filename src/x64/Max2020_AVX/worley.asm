; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24234.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?noise@Worley@@SAXQEANHPEANH@Z			; Worley::noise
PUBLIC	?add@Worley@@CAXJJJQEANHPEANH@Z			; Worley::add
PUBLIC	__real@3df0000000000000
PUBLIC	__real@3fd97b4a2339c0ec
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@400417ca3f5539e6
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__ymm@400417ca3f5539e6400417ca3f5539e6400417ca3f5539e6400417ca3f5539e6
EXTRN	sqrt:PROC
EXTRN	__ImageBase:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?noise@Worley@@SAXQEANHPEANH@Z DD imagerel $LN71
	DD	imagerel $LN71+1991
	DD	imagerel $unwind$?noise@Worley@@SAXQEANHPEANH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?add@Worley@@CAXJJJQEANHPEANH@Z DD imagerel $LN61
	DD	imagerel $LN61+95
	DD	imagerel $unwind$?add@Worley@@CAXJJJQEANHPEANH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$?add@Worley@@CAXJJJQEANHPEANH@Z DD imagerel $LN61+95
	DD	imagerel $LN61+988
	DD	imagerel $chain$12$?add@Worley@@CAXJJJQEANHPEANH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$13$?add@Worley@@CAXJJJQEANHPEANH@Z DD imagerel $LN61+988
	DD	imagerel $LN61+1002
	DD	imagerel $chain$13$?add@Worley@@CAXJJJQEANHPEANH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$?add@Worley@@CAXJJJQEANHPEANH@Z DD imagerel $LN61+1002
	DD	imagerel $LN61+1052
	DD	imagerel $chain$14$?add@Worley@@CAXJJJQEANHPEANH@Z
pdata	ENDS
;	COMDAT __ymm@400417ca3f5539e6400417ca3f5539e6400417ca3f5539e6400417ca3f5539e6
CONST	SEGMENT
__ymm@400417ca3f5539e6400417ca3f5539e6400417ca3f5539e6400417ca3f5539e6 DB 0e6H
	DB	'9U?', 0caH, 017H, 04H, '@', 0e6H, '9U?', 0caH, 017H, 04H, '@', 0e6H
	DB	'9U?', 0caH, 017H, 04H, '@', 0e6H, '9U?', 0caH, 017H, 04H, '@'
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@400417ca3f5539e6
CONST	SEGMENT
__real@400417ca3f5539e6 DQ 0400417ca3f5539e6r	; 2.51162
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd97b4a2339c0ec
CONST	SEGMENT
__real@3fd97b4a2339c0ec DQ 03fd97b4a2339c0ecr	; 0.39815
CONST	ENDS
;	COMDAT __real@3df0000000000000
CONST	SEGMENT
__real@3df0000000000000 DQ 03df0000000000000r	; 2.32831e-10
CONST	ENDS
_DATA	SEGMENT
?Poisson_count@@3PADA DB 04H				; Poisson_count
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	04H
	DB	02H
	DB	02H
	DB	02H
	DB	05H
	DB	01H
	DB	00H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	00H
	DB	04H
	DB	03H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	03H
	DB	02H
	DB	02H
	DB	04H
	DB	02H
	DB	02H
	DB	05H
	DB	01H
	DB	02H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	02H
	DB	04H
	DB	02H
	DB	05H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	05H
	DB	03H
	DB	03H
	DB	05H
	DB	02H
	DB	01H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	02H
	DB	03H
	DB	00H
	DB	04H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	02H
	DB	00H
	DB	02H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	05H
	DB	03H
	DB	02H
	DB	03H
	DB	02H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	02H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	04H
	DB	02H
	DB	02H
	DB	02H
	DB	05H
	DB	04H
	DB	02H
	DB	04H
	DB	02H
	DB	02H
	DB	05H
	DB	04H
	DB	03H
	DB	02H
	DB	02H
	DB	05H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	05H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	01H
	DB	01H
	DB	04H
	DB	02H
	DB	01H
	DB	03H
	DB	03H
	DB	04H
	DB	03H
	DB	02H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	05H
	DB	01H
	DB	04H
	DB	02H
	DB	04H
	DB	03H
	DB	01H
	DB	02H
	DB	03H
	DB	05H
	DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	03H
	DB	01H
	DB	05H
	DB	05H
	DB	04H
	DB	02H
	DB	02H
	DB	04H
	DB	01H
	DB	03H
	DB	04H
	DB	01H
	DB	05H
	DB	03H
	DB	03H
	DB	05H
	DB	03H
	DB	04H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	04H
	DB	05H
	DB	04H
	DB	05H
	DB	04H
	DB	02H
	DB	01H
	DB	05H
	DB	01H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	05H
	DB	02H
	DB	03H
	DB	03H
	DB	02H
	DB	00H
	DB	02H
	DB	01H
	DB	01H
	DB	04H
	DB	02H
	DB	01H
	DB	03H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	03H
	DB	02H
	DB	05H
	DB	05H
	DB	03H
	DB	04H
	DB	05H
	DB	05H
	DB	02H
	DB	04H
	DB	04H
	DB	05H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	04H
	DB	02H
	DB	03H
	DB	03H
	DB	04H
	DB	02H
	DB	05H
	DB	04H
	DB	02H
	DB	04H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	05H
	DB	03H
	DB	02H
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$?add@Worley@@CAXJJJQEANHPEANH@Z DD 01a0021H
	DD	02e800H
	DD	03d800H
	DD	04c800H
	DD	05b800H
	DD	06a800H
	DD	079800H
	DD	088800H
	DD	097800H
	DD	0a6800H
	DD	01d7400H
	DD	01c6400H
	DD	01b5400H
	DD	01a3400H
	DD	imagerel $LN61
	DD	imagerel $LN61+95
	DD	imagerel $unwind$?add@Worley@@CAXJJJQEANHPEANH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$13$?add@Worley@@CAXJJJQEANHPEANH@Z DD 021H
	DD	imagerel $LN61
	DD	imagerel $LN61+95
	DD	imagerel $unwind$?add@Worley@@CAXJJJQEANHPEANH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$?add@Worley@@CAXJJJQEANHPEANH@Z DD 01a9521H
	DD	0a6895H
	DD	02e870H
	DD	03d86aH
	DD	04c864H
	DD	05b856H
	DD	06a848H
	DD	07983aH
	DD	088834H
	DD	09782eH
	DD	01d7420H
	DD	01c641cH
	DD	01b5410H
	DD	01a3404H
	DD	imagerel $LN61
	DD	imagerel $LN61+95
	DD	imagerel $unwind$?add@Worley@@CAXJJJQEANHPEANH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?add@Worley@@CAXJJJQEANHPEANH@Z DD 051001H
	DD	0160110H
	DD	0e007f009H
	DD	0c005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?noise@Worley@@SAXQEANHPEANH@Z DD 01f6101H
	DD	08e858H
	DD	09d850H
	DD	0ac848H
	DD	0bb840H
	DD	0ca838H
	DD	0d9833H
	DD	0e882eH
	DD	0f7829H
	DD	0106824H
	DD	02a741fH
	DD	029641fH
	DD	028341fH
	DD	022011fH
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
xdata	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\worley.cpp
;	COMDAT ?add@Worley@@CAXJJJQEANHPEANH@Z
_TEXT	SEGMENT
xi$ = 208
yi$ = 216
zi$ = 224
at$ = 232
order$ = 240
F$ = 248
function$ = 256
?add@Worley@@CAXJJJQEANHPEANH@Z PROC			; Worley::add, COMDAT

; 97   : void Worley::add(long xi, long yi, long zi, double at[3], int order, double *F, int function) {

$LN61:
	mov	r11, rsp
	push	r12
	push	r14
	push	r15
	sub	rsp, 176				; 000000b0H

; 98   : 	double d = 0;			// Initialize variable to avoid error C4701
; 99   : 	double d3[3];
; 100  : 	double f3[3];
; 101  : 	unsigned long seed, this_id;
; 102  : 
; 103  : 	seed = 702395077*xi + 915488749*yi + 2120969693*zi;

	imul	eax, r8d, 2120969693			; 7e6b6dddH

; 104  : 	int count = Poisson_count[seed>>24];

	lea	r12, OFFSET FLAT:__ImageBase
	imul	r10d, ecx, 702395077			; 29ddb2c5H
	mov	r15, r9
	vxorpd	xmm5, xmm5, xmm5
	add	r10d, eax
	imul	eax, edx, 915488749			; 36913fedH
	add	r10d, eax

; 105  : 	ROLL(seed);

	imul	r14d, r10d, 1402024253			; 5391313dH
	mov	eax, r10d
	shr	rax, 24
	add	r14d, 586950981				; 22fc2945H
	movsx	r9d, BYTE PTR ?Poisson_count@@3PADA[rax+r12]

; 106  : 
; 107  : 	for (int j=0; j<count; j++) {

	test	r9d, r9d
	jle	$LN3@add

; 97   : void Worley::add(long xi, long yi, long zi, double at[3], int order, double *F, int function) {

	mov	QWORD PTR [r11+8], rbx
	mov	rbx, QWORD PTR F$[rsp]
	mov	QWORD PTR [r11+16], rbp
	movsxd	rbp, DWORD PTR function$[rsp]
	mov	QWORD PTR [r11+24], rsi
	mov	QWORD PTR [r11+32], rdi
	movsxd	rdi, DWORD PTR order$[rsp]
	vmovaps	XMMWORD PTR [r11-56], xmm7
	vmovaps	XMMWORD PTR [r11-72], xmm8
	vmovaps	XMMWORD PTR [r11-88], xmm9
	vmovsd	xmm9, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	vmovaps	XMMWORD PTR [r11-104], xmm10
	vmovsd	xmm10, QWORD PTR __real@3fe0000000000000
	vmovaps	XMMWORD PTR [r11-120], xmm11
	vmovsd	xmm11, QWORD PTR __real@3df0000000000000
	vmovaps	XMMWORD PTR [rsp+64], xmm12
	vmovaps	XMMWORD PTR [rsp+48], xmm13
	vmovaps	XMMWORD PTR [rsp+32], xmm14
	vxorps	xmm14, xmm14, xmm14
	vxorps	xmm12, xmm12, xmm12
	vxorps	xmm13, xmm13, xmm13
	vcvtsi2sd xmm14, xmm14, r8d
	vcvtsi2sd xmm12, xmm12, ecx
	vcvtsi2sd xmm13, xmm13, edx
	mov	esi, r9d
	vmovaps	XMMWORD PTR [r11-40], xmm6
$LL4@add:

; 108  : 		this_id = seed;
; 109  : 		ROLL(seed);

	vxorps	xmm0, xmm0, xmm0
	imul	ecx, r14d, 1402024253			; 5391313dH
	add	ecx, 586950981				; 22fc2945H

; 110  : 
; 111  : 		for (int i=0; i<3; i++) {
; 112  : 			f3[i] = (seed+0.5)*(1.0/4294967296.0);			
; 113  : 			ROLL(seed);

	imul	edx, ecx, 1402024253			; 5391313dH
	mov	eax, ecx
	vcvtsi2sd xmm0, xmm0, rax
	vaddsd	xmm1, xmm0, xmm10
	vxorps	xmm0, xmm0, xmm0
	vmulsd	xmm4, xmm1, xmm11
	add	edx, 586950981				; 22fc2945H
	imul	ecx, edx, 1402024253			; 5391313dH
	mov	eax, edx
	vcvtsi2sd xmm0, xmm0, rax
	vaddsd	xmm1, xmm0, xmm10
	vxorps	xmm0, xmm0, xmm0
	add	ecx, 586950981				; 22fc2945H
	imul	r14d, ecx, 1402024253			; 5391313dH
	vmulsd	xmm3, xmm1, xmm11
	mov	eax, ecx
	vcvtsi2sd xmm0, xmm0, rax
	vaddsd	xmm1, xmm0, xmm10

; 114  : 		}
; 115  : 
; 116  : 		d3[0] = xi + f3[0] - at[0]; 

	vaddsd	xmm0, xmm12, xmm4
	vsubsd	xmm7, xmm0, QWORD PTR [r15]
	vmulsd	xmm2, xmm1, xmm11
	add	r14d, 586950981				; 22fc2945H

; 117  : 		d3[1] = yi + f3[1] - at[1];
; 118  : 		d3[2] = zi + f3[2] - at[2];

	vaddsd	xmm0, xmm14, xmm2
	vsubsd	xmm8, xmm0, QWORD PTR [r15+16]
	vaddsd	xmm1, xmm13, xmm3
	vsubsd	xmm4, xmm1, QWORD PTR [r15+8]

; 119  : 
; 120  : 		// Distance function to the point
; 121  : 		switch (function) {

	cmp	ebp, 5
	ja	$LN8@add
	mov	ecx, DWORD PTR $LN57@add[r12+rbp*4]
	add	rcx, r12
	jmp	rcx
$LN15@add:

; 122  : 			case 0: // Linear
; 123  : 				d = sqrt(d3[0]*d3[0]+d3[1]*d3[1]+d3[2]*d3[2]);

	vmulsd	xmm1, xmm4, xmm4
	vmulsd	xmm0, xmm7, xmm7
	vaddsd	xmm2, xmm1, xmm0
	vmulsd	xmm1, xmm8, xmm8
	vaddsd	xmm0, xmm2, xmm1

; 124  : 				break;

	jmp	$LN59@add
$LN16@add:

; 125  : 			case 1: // Square
; 126  : 				d = d3[0]*d3[0]+d3[1]*d3[1]+d3[2]*d3[2];

	vmulsd	xmm1, xmm4, xmm4
	vmulsd	xmm0, xmm7, xmm7
	vaddsd	xmm2, xmm1, xmm0
	vmulsd	xmm1, xmm8, xmm8
	vaddsd	xmm5, xmm2, xmm1

; 127  : 				break;

	jmp	$LN8@add
$LN17@add:

; 128  : 			case 2: // Manhattan
; 129  : 				d = fabs(d3[0])+fabs(d3[1])+fabs(d3[2]);

	vandpd	xmm4, xmm4, xmm9
	vandpd	xmm7, xmm7, xmm9
	vaddsd	xmm0, xmm4, xmm7
	vandpd	xmm8, xmm8, xmm9
	vaddsd	xmm5, xmm0, xmm8

; 130  : 				break;			

	jmp	SHORT $LN8@add
$LN18@add:

; 131  : 			case 3: {// Chebychev				
; 132  : 				double x = fabs(d3[0]);

	vandpd	xmm7, xmm7, xmm9

; 133  : 				double y = fabs(d3[1]);

	vandpd	xmm4, xmm4, xmm9
	vmaxsd	xmm0, xmm7, xmm4

; 134  : 				double z = fabs(d3[2]);

	vandpd	xmm8, xmm8, xmm9
	vmaxsd	xmm5, xmm8, xmm0

; 135  : 				double t = (x>y)?x:y;
; 136  : 				d = ((z>t)?z:t);
; 137  : 				break; }

	jmp	SHORT $LN8@add
$LN19@add:

; 138  : 			case 4: // Minkovsky 0.5
; 139  : 				d = sqrt(fabs(d3[0])) + sqrt(fabs(d3[1])) + sqrt(fabs(d3[2]));	

	vandpd	xmm0, xmm4, xmm9
	call	sqrt
	vmovaps	xmm6, xmm0
	vandpd	xmm0, xmm7, xmm9
	call	sqrt
	vaddsd	xmm6, xmm6, xmm0
	vandpd	xmm0, xmm8, xmm9
	call	sqrt
	vaddsd	xmm1, xmm6, xmm0

; 140  : 				d *= d;

	vmulsd	xmm5, xmm1, xmm1

; 141  : 				break;

	jmp	SHORT $LN8@add
$LN20@add:

; 142  : 			case 5: {// Minkovsky 4
; 143  : 				double x = d3[0]*d3[0];
; 144  : 				double y = d3[1]*d3[1];

	vmulsd	xmm0, xmm4, xmm4

; 145  : 				double z = d3[2]*d3[2];				
; 146  : 				d = sqrt(sqrt(x*x + y*y + z*z));

	vmulsd	xmm1, xmm0, xmm0
	vmulsd	xmm2, xmm7, xmm7
	vmulsd	xmm0, xmm2, xmm2
	vaddsd	xmm2, xmm1, xmm0
	vmulsd	xmm3, xmm8, xmm8
	vmulsd	xmm1, xmm3, xmm3
	vaddsd	xmm0, xmm2, xmm1
	call	sqrt
$LN59@add:
	call	sqrt
	vmovaps	xmm5, xmm0
$LN8@add:

; 147  : 				break; }
; 148  : 		}		
; 149  : 
; 150  : 		if (d < F[order-1]) {

	vmovsd	xmm0, QWORD PTR [rbx+rdi*8-8]
	vcomisd	xmm0, xmm5
	jbe	$LN2@add

; 151  : 			int index = order;		

	mov	rcx, rdi

; 152  : 			while (index > 0 && d < F[index-1]) index--;

	cmp	rdi, 4
	jl	SHORT $LC43@add

; 151  : 			int index = order;		

	lea	rax, QWORD PTR [rdi-2]
	lea	rax, QWORD PTR [rbx+rax*8]

; 152  : 			while (index > 0 && d < F[index-1]) index--;

$LL48@add:
	vmovsd	xmm0, QWORD PTR [rax+8]
	vcomisd	xmm0, xmm5
	jbe	SHORT $LN58@add
	vmovsd	xmm0, QWORD PTR [rax]
	vcomisd	xmm0, xmm5
	jbe	$LN45@add
	vmovsd	xmm0, QWORD PTR [rax-8]
	vcomisd	xmm0, xmm5
	jbe	$LN46@add
	vmovsd	xmm0, QWORD PTR [rax-16]
	vcomisd	xmm0, xmm5
	jbe	$LN47@add

; 153  : 			for (int i=order-2; i>=index; i--)

	sub	rcx, 4
	sub	rax, 32					; 00000020H
	cmp	rcx, 3
	jg	SHORT $LL48@add
$LC43@add:

; 152  : 			while (index > 0 && d < F[index-1]) index--;

	test	rcx, rcx
	jle	SHORT $LN58@add
	lea	rax, QWORD PTR [rbx-8]
	lea	rax, QWORD PTR [rax+rcx*8]
$LC10@add:
	vmovsd	xmm0, QWORD PTR [rax]
	vcomisd	xmm0, xmm5
	jbe	SHORT $LN58@add

; 153  : 			for (int i=order-2; i>=index; i--)

	dec	rcx
	sub	rax, 8
	test	rcx, rcx
	jg	SHORT $LC10@add
$LN58@add:
	lea	r8, QWORD PTR [rdi-2]
	cmp	r8, rcx
	jl	SHORT $LN49@add
	mov	rax, r8
	sub	rax, rcx
	inc	rax
	cmp	rax, 4
	jl	SHORT $LC50@add
	mov	r9, rdi
	lea	rdx, QWORD PTR [rbx-8]
	sub	r9, rcx
	lea	rdx, QWORD PTR [rdx+r8*8]
	sub	r9, 5
	shr	r9, 2
	inc	r9
	lea	rax, QWORD PTR [r9*4]
	sub	r8, rax
	npad	12
$LL51@add:

; 154  : 				F[i+1] = F[i];

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rdx+16], rax
	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rdx+8], rax
	mov	rax, QWORD PTR [rdx-8]
	mov	QWORD PTR [rdx], rax
	mov	rax, QWORD PTR [rdx-16]
	mov	QWORD PTR [rdx-8], rax
	lea	rdx, QWORD PTR [rdx-32]
	sub	r9, 1
	jne	SHORT $LL51@add
$LC50@add:

; 153  : 			for (int i=order-2; i>=index; i--)

	cmp	r8, rcx
	jl	SHORT $LN49@add
$LC14@add:

; 154  : 				F[i+1] = F[i];

	mov	rax, QWORD PTR [rbx+r8*8]
	mov	QWORD PTR [rbx+r8*8+8], rax
	dec	r8
	cmp	r8, rcx
	jge	SHORT $LC14@add
$LN49@add:

; 155  : 			F[index] = d;

	vmovsd	QWORD PTR [rbx+rcx*8], xmm5
$LN2@add:

; 106  : 
; 107  : 	for (int j=0; j<count; j++) {

	sub	rsi, 1
	jne	$LL4@add
	vmovaps	xmm14, XMMWORD PTR [rsp+32]
	vmovaps	xmm13, XMMWORD PTR [rsp+48]
	vmovaps	xmm12, XMMWORD PTR [rsp+64]
	vmovaps	xmm11, XMMWORD PTR [rsp+80]
	vmovaps	xmm10, XMMWORD PTR [rsp+96]
	vmovaps	xmm9, XMMWORD PTR [rsp+112]
	vmovaps	xmm8, XMMWORD PTR [rsp+128]
	vmovaps	xmm7, XMMWORD PTR [rsp+144]
	vmovaps	xmm6, XMMWORD PTR [rsp+160]
	mov	rdi, QWORD PTR [rsp+232]
	mov	rsi, QWORD PTR [rsp+224]
	mov	rbp, QWORD PTR [rsp+216]
	mov	rbx, QWORD PTR [rsp+208]
$LN3@add:

; 156  : 		}
; 157  : 	}
; 158  : }

	add	rsp, 176				; 000000b0H
	pop	r15
	pop	r14
	pop	r12
	ret	0
$LN47@add:

; 152  : 			while (index > 0 && d < F[index-1]) index--;

	sub	rcx, 3
	jmp	$LN58@add
$LN46@add:
	sub	rcx, 2

; 153  : 			for (int i=order-2; i>=index; i--)

	jmp	$LN58@add
$LN45@add:

; 152  : 			while (index > 0 && d < F[index-1]) index--;

	dec	rcx

; 153  : 			for (int i=order-2; i>=index; i--)

	jmp	$LN58@add
$LN57@add:

; 156  : 		}
; 157  : 	}
; 158  : }

	DD	$LN15@add
	DD	$LN16@add
	DD	$LN17@add
	DD	$LN18@add
	DD	$LN19@add
	DD	$LN20@add
?add@Worley@@CAXJJJQEANHPEANH@Z ENDP			; Worley::add
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\dropbox\github\berconmaps\src\worley.cpp
;	COMDAT ?noise@Worley@@SAXQEANHPEANH@Z
_TEXT	SEGMENT
new_at$ = 0
at$ = 320
order$ = 328
F$ = 336
function$ = 344
?noise@Worley@@SAXQEANHPEANH@Z PROC			; Worley::noise, COMDAT

; 36   : void Worley::noise(double at[3], int order, double *F, int function) {

$LN71:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	mov	QWORD PTR [rax+24], rdi
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 272				; 00000110H
	vmovaps	XMMWORD PTR [rax-56], xmm6
	vmovaps	XMMWORD PTR [rax-72], xmm7
	vmovaps	XMMWORD PTR [rax-88], xmm8
	vmovaps	XMMWORD PTR [rax-104], xmm9
	vmovaps	XMMWORD PTR [rax-120], xmm10
	vmovaps	XMMWORD PTR [rax-136], xmm11
	vmovaps	XMMWORD PTR [rax-152], xmm12
	vmovaps	XMMWORD PTR [rax-168], xmm13
	vmovaps	XMMWORD PTR [rax-184], xmm14
	lea	rbp, QWORD PTR [rsp+96]
	and	rbp, -32				; ffffffffffffffe0H
	movsxd	rsi, edx
	mov	r13d, r9d
	mov	rbx, r8
	mov	rdx, rcx

; 37   : 	double x2, y2, z2, mx2, my2, mz2;
; 38   : 	double new_at[3];
; 39   : 	long int_at[3];
; 40   : 
; 41   : 	for (int i=0; i<order; i++) F[i] = 999999.9;

	test	esi, esi
	jle	SHORT $LN3@noise
	mov	rcx, rsi
	mov	rax, 4696837145825692877		; 412e847fcccccccdH
	mov	rdi, rbx
	rep stosq
$LN3@noise:

; 42   : 
; 43   : 	for (int i=0; i<3; i++) {
; 44   : 		new_at[i] = DENSITY_ADJUSTMENT * at[i];

	vmovsd	xmm1, QWORD PTR __real@3fd97b4a2339c0ec
	vmulsd	xmm6, xmm1, QWORD PTR [rdx]
	vxorpd	xmm2, xmm2, xmm2

; 45   : 		int_at[i] = FASTFLOORL(new_at[i]);

	vcomisd	xmm2, xmm6
	vmovsd	QWORD PTR new_at$[rbp], xmm6
	vcvttsd2si r14d, xmm6
	jbe	SHORT $LN39@noise
	dec	r14d
$LN39@noise:

; 42   : 
; 43   : 	for (int i=0; i<3; i++) {
; 44   : 		new_at[i] = DENSITY_ADJUSTMENT * at[i];

	vmulsd	xmm8, xmm1, QWORD PTR [rdx+8]

; 45   : 		int_at[i] = FASTFLOORL(new_at[i]);

	vcomisd	xmm2, xmm8
	vmovsd	QWORD PTR new_at$[rbp+8], xmm8
	vcvttsd2si r15d, xmm8
	jbe	SHORT $LN58@noise
	dec	r15d
$LN58@noise:

; 42   : 
; 43   : 	for (int i=0; i<3; i++) {
; 44   : 		new_at[i] = DENSITY_ADJUSTMENT * at[i];

	vmulsd	xmm7, xmm1, QWORD PTR [rdx+16]

; 45   : 		int_at[i] = FASTFLOORL(new_at[i]);

	vcomisd	xmm2, xmm7
	vmovsd	QWORD PTR new_at$[rbp+16], xmm7
	vcvttsd2si edi, xmm7
	jbe	SHORT $LN61@noise
	dec	edi
$LN61@noise:

; 46   : 	}
; 47   : 	
; 48   : 	add(int_at[0], int_at[1], int_at[2], new_at, order, F, function);

	mov	DWORD PTR [rsp+48], r13d
	lea	r9, QWORD PTR new_at$[rbp]
	mov	QWORD PTR [rsp+40], rbx
	mov	r8d, edi
	mov	edx, r15d
	mov	DWORD PTR [rsp+32], esi
	mov	ecx, r14d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add

; 49   : 
; 50   : 	x2=new_at[0]-int_at[0];
; 51   : 	y2=new_at[1]-int_at[1];
; 52   : 	z2=new_at[2]-int_at[2];
; 53   : 	mx2=(1.0-x2)*(1.0-x2);

	vmovsd	xmm2, QWORD PTR __real@3ff0000000000000
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2sd xmm0, xmm0, r14d
	vsubsd	xmm5, xmm6, xmm0
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2sd xmm0, xmm0, edi
	vsubsd	xmm3, xmm7, xmm0
	vsubsd	xmm0, xmm2, xmm5
	vxorps	xmm1, xmm1, xmm1
	vmulsd	xmm9, xmm0, xmm0

; 54   : 	my2=(1.0-y2)*(1.0-y2);
; 55   : 	mz2=(1.0-z2)*(1.0-z2);

	vsubsd	xmm0, xmm2, xmm3
	vcvtsi2sd xmm1, xmm1, r15d
	vsubsd	xmm4, xmm8, xmm1

; 56   : 	x2*=x2;
; 57   : 	y2*=y2;
; 58   : 	z2*=z2;
; 59   : 
; 60   : 	// Faces
; 61   : 	if (x2          < F[order-1]) ADD(-1,  0,  0);

	lea	eax, DWORD PTR [rsi-1]
	movsxd	r12, eax
	vmulsd	xmm7, xmm0, xmm0
	vmulsd	xmm12, xmm5, xmm5
	vsubsd	xmm1, xmm2, xmm4
	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vcomisd	xmm0, xmm12
	vmulsd	xmm11, xmm1, xmm1
	vmulsd	xmm8, xmm4, xmm4
	vmulsd	xmm6, xmm3, xmm3
	jbe	SHORT $LN11@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	ecx, DWORD PTR [r14-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	r9, QWORD PTR new_at$[rbp]
	mov	r8d, edi
	mov	DWORD PTR [rsp+32], esi
	mov	edx, r15d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN11@noise:

; 62   : 	if (y2          < F[order-1]) ADD( 0, -1,  0);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vcomisd	xmm0, xmm8
	jbe	SHORT $LN12@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	edx, DWORD PTR [r15-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	r9, QWORD PTR new_at$[rbp]
	mov	r8d, edi
	mov	DWORD PTR [rsp+32], esi
	mov	ecx, r14d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN12@noise:

; 63   : 	if (z2          < F[order-1]) ADD( 0,  0, -1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vcomisd	xmm0, xmm6
	jbe	SHORT $LN13@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	r9, QWORD PTR new_at$[rbp]
	mov	edx, r15d
	mov	DWORD PTR [rsp+32], esi
	mov	ecx, r14d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN13@noise:

; 64   : 	if (mx2         < F[order-1]) ADD( 1,  0,  0);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vcomisd	xmm0, xmm9
	jbe	SHORT $LN14@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	ecx, DWORD PTR [r14+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	r9, QWORD PTR new_at$[rbp]
	mov	r8d, edi
	mov	DWORD PTR [rsp+32], esi
	mov	edx, r15d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN14@noise:

; 65   : 	if (my2         < F[order-1]) ADD( 0,  1,  0);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vcomisd	xmm0, xmm11
	jbe	SHORT $LN15@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	edx, DWORD PTR [r15+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	r9, QWORD PTR new_at$[rbp]
	mov	r8d, edi
	mov	DWORD PTR [rsp+32], esi
	mov	ecx, r14d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN15@noise:

; 66   : 	if (mz2         < F[order-1]) ADD( 0,  0,  1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vcomisd	xmm0, xmm7
	jbe	SHORT $LN16@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	r9, QWORD PTR new_at$[rbp]
	mov	edx, r15d
	mov	DWORD PTR [rsp+32], esi
	mov	ecx, r14d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN16@noise:

; 67   : 	// Edges
; 68   : 	if ( x2+ y2     < F[order-1]) ADD(-1, -1,  0);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm13, xmm8, xmm12
	vcomisd	xmm0, xmm13
	jbe	SHORT $LN17@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	edx, DWORD PTR [r15-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	ecx, DWORD PTR [r14-1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	r8d, edi
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN17@noise:

; 69   : 	if ( x2+ z2     < F[order-1]) ADD(-1,  0, -1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm6, xmm12
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN18@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	ecx, DWORD PTR [r14-1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	edx, r15d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN18@noise:

; 70   : 	if ( y2+ z2     < F[order-1]) ADD( 0, -1, -1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm6, xmm8
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN19@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15-1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	ecx, r14d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN19@noise:

; 71   : 	if (mx2+my2     < F[order-1]) ADD( 1,  1,  0);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm14, xmm11, xmm9
	vcomisd	xmm0, xmm14
	jbe	SHORT $LN20@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	edx, DWORD PTR [r15+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	ecx, DWORD PTR [r14+1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	r8d, edi
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN20@noise:

; 72   : 	if (mx2+mz2     < F[order-1]) ADD( 1,  0,  1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm7, xmm9
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN21@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	ecx, DWORD PTR [r14+1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	edx, r15d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN21@noise:

; 73   : 	if (my2+mz2     < F[order-1]) ADD( 0,  1,  1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm7, xmm11
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN22@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15+1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	ecx, r14d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN22@noise:

; 74   : 	if ( x2+my2     < F[order-1]) ADD(-1,  1,  0);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm10, xmm11, xmm12
	vcomisd	xmm0, xmm10
	jbe	SHORT $LN23@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	edx, DWORD PTR [r15+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	ecx, DWORD PTR [r14-1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	r8d, edi
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN23@noise:

; 75   : 	if ( x2+mz2     < F[order-1]) ADD(-1,  0,  1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm7, xmm12
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN24@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	ecx, DWORD PTR [r14-1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	edx, r15d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN24@noise:

; 76   : 	if ( y2+mz2     < F[order-1]) ADD( 0, -1,  1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm7, xmm8
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN25@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15-1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	ecx, r14d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN25@noise:

; 77   : 	if (mx2+ y2     < F[order-1]) ADD( 1, -1,  0);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm8, xmm9, xmm8
	vcomisd	xmm0, xmm8
	jbe	SHORT $LN26@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	edx, DWORD PTR [r15-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	ecx, DWORD PTR [r14+1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	r8d, edi
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN26@noise:

; 78   : 	if (mx2+ z2     < F[order-1]) ADD( 1,  0, -1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm9, xmm6
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN27@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	ecx, DWORD PTR [r14+1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	edx, r15d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN27@noise:

; 79   : 	if (my2+ z2     < F[order-1]) ADD( 0,  1, -1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm11, xmm6
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN28@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15+1]
	lea	r9, QWORD PTR new_at$[rbp]
	mov	DWORD PTR [rsp+32], esi
	mov	ecx, r14d
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN28@noise:

; 80   : 	// Corners
; 81   : 	if ( x2+ y2+ z2 < F[order-1]) ADD(-1, -1, -1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm13, xmm6
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN29@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15-1]
	lea	ecx, DWORD PTR [r14-1]
	mov	DWORD PTR [rsp+32], esi
	lea	r9, QWORD PTR new_at$[rbp]
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN29@noise:

; 82   : 	if ( x2+ y2+mz2 < F[order-1]) ADD(-1, -1,  1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm13, xmm7
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN30@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15-1]
	lea	ecx, DWORD PTR [r14-1]
	mov	DWORD PTR [rsp+32], esi
	lea	r9, QWORD PTR new_at$[rbp]
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN30@noise:

; 83   : 	if ( x2+my2+ z2 < F[order-1]) ADD(-1,  1, -1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm10, xmm6
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN31@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15+1]
	lea	ecx, DWORD PTR [r14-1]
	mov	DWORD PTR [rsp+32], esi
	lea	r9, QWORD PTR new_at$[rbp]
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN31@noise:

; 84   : 	if ( x2+my2+mz2 < F[order-1]) ADD(-1,  1,  1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm10, xmm7
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN32@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15+1]
	lea	ecx, DWORD PTR [r14-1]
	mov	DWORD PTR [rsp+32], esi
	lea	r9, QWORD PTR new_at$[rbp]
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN32@noise:

; 85   : 	if (mx2+ y2+ z2 < F[order-1]) ADD( 1, -1, -1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm8, xmm6
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN33@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15-1]
	lea	ecx, DWORD PTR [r14+1]
	mov	DWORD PTR [rsp+32], esi
	lea	r9, QWORD PTR new_at$[rbp]
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN33@noise:

; 86   : 	if (mx2+ y2+mz2 < F[order-1]) ADD( 1, -1,  1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm8, xmm7
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN34@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15-1]
	lea	ecx, DWORD PTR [r14+1]
	mov	DWORD PTR [rsp+32], esi
	lea	r9, QWORD PTR new_at$[rbp]
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN34@noise:

; 87   : 	if (mx2+my2+ z2 < F[order-1]) ADD( 1,  1, -1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm14, xmm6
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN35@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi-1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15+1]
	lea	ecx, DWORD PTR [r14+1]
	mov	DWORD PTR [rsp+32], esi
	lea	r9, QWORD PTR new_at$[rbp]
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN35@noise:

; 88   : 	if (mx2+my2+mz2 < F[order-1]) ADD( 1,  1,  1);

	vmovsd	xmm0, QWORD PTR [rbx+r12*8]
	vaddsd	xmm1, xmm14, xmm7
	vcomisd	xmm0, xmm1
	jbe	SHORT $LN36@noise
	mov	DWORD PTR [rsp+48], r13d
	lea	r8d, DWORD PTR [rdi+1]
	mov	QWORD PTR [rsp+40], rbx
	lea	edx, DWORD PTR [r15+1]
	lea	ecx, DWORD PTR [r14+1]
	mov	DWORD PTR [rsp+32], esi
	lea	r9, QWORD PTR new_at$[rbp]
	call	?add@Worley@@CAXJJJQEANHPEANH@Z		; Worley::add
$LN36@noise:

; 89   : 
; 90   : 	for (int i=0; i<order; i++)

	xor	ecx, ecx
	mov	edi, ecx
	test	esi, esi
	jle	SHORT $LN47@noise
	cmp	esi, 4
	jb	SHORT $LN47@noise
	mov	edx, esi
	and	edx, -2147483645			; ffffffff80000003H
	jge	SHORT $LN69@noise
	dec	edx
	or	edx, -4
	inc	edx
$LN69@noise:
	vmovupd	ymm0, YMMWORD PTR __ymm@400417ca3f5539e6400417ca3f5539e6400417ca3f5539e6400417ca3f5539e6
	mov	eax, esi
	sub	eax, edx
	movsxd	rdx, eax
	npad	6
$LL10@noise:

; 91   : 		F[i] = sqrt(F[i])*(1.0/DENSITY_ADJUSTMENT);      

	vsqrtpd	ymm1, YMMWORD PTR [rbx+rcx*8]
	vmulpd	ymm2, ymm1, ymm0
	vmovupd	YMMWORD PTR [rbx+rcx*8], ymm2
	add	rcx, 4
	add	edi, 4
	cmp	rcx, rdx
	jl	SHORT $LL10@noise
$LN47@noise:
	movsxd	rdi, edi

; 89   : 
; 90   : 	for (int i=0; i<order; i++)

	mov	r15, rsi
	cmp	rdi, rsi
	jge	$LN62@noise
	vmovsd	xmm6, QWORD PTR __real@400417ca3f5539e6
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 4
	jl	SHORT $LC63@noise
	mov	r14, r15
	lea	rsi, QWORD PTR [rbx+16]
	sub	r14, rdi
	lea	rsi, QWORD PTR [rsi+rdi*8]
	sub	r14, 4
	shr	r14, 2
	inc	r14
	lea	rdi, QWORD PTR [rdi+r14*4]
	npad	6
$LL64@noise:

; 91   : 		F[i] = sqrt(F[i])*(1.0/DENSITY_ADJUSTMENT);      

	vmovsd	xmm0, QWORD PTR [rsi-16]
	vzeroupper
	call	sqrt
	vmulsd	xmm1, xmm0, xmm6
	vmovsd	xmm0, QWORD PTR [rsi-8]
	vmovsd	QWORD PTR [rsi-16], xmm1
	call	sqrt
	vmulsd	xmm1, xmm0, xmm6
	vmovsd	xmm0, QWORD PTR [rsi]
	vmovsd	QWORD PTR [rsi-8], xmm1
	call	sqrt
	vmulsd	xmm1, xmm0, xmm6
	vmovsd	xmm0, QWORD PTR [rsi+8]
	vmovsd	QWORD PTR [rsi], xmm1
	call	sqrt
	lea	rsi, QWORD PTR [rsi+32]
	vmulsd	xmm1, xmm0, xmm6
	vmovsd	QWORD PTR [rsi-24], xmm1
	sub	r14, 1
	jne	SHORT $LL64@noise
$LC63@noise:

; 89   : 
; 90   : 	for (int i=0; i<order; i++)

	cmp	rdi, r15
	jge	SHORT $LN62@noise
$LC46@noise:

; 91   : 		F[i] = sqrt(F[i])*(1.0/DENSITY_ADJUSTMENT);      

	vmovsd	xmm0, QWORD PTR [rbx+rdi*8]
	vzeroupper
	call	sqrt
	vmulsd	xmm1, xmm0, xmm6
	vmovsd	QWORD PTR [rbx+rdi*8], xmm1
	inc	rdi
	cmp	rdi, r15
	jl	SHORT $LC46@noise
$LN62@noise:
	vzeroupper

; 92   : 
; 93   : 	return;
; 94   : }

	lea	r11, QWORD PTR [rsp+272]
	mov	rbx, QWORD PTR [r11+48]
	mov	rsi, QWORD PTR [r11+56]
	mov	rdi, QWORD PTR [r11+64]
	vmovaps	xmm6, XMMWORD PTR [r11-16]
	vmovaps	xmm7, XMMWORD PTR [r11-32]
	vmovaps	xmm8, XMMWORD PTR [r11-48]
	vmovaps	xmm9, XMMWORD PTR [r11-64]
	vmovaps	xmm10, XMMWORD PTR [r11-80]
	vmovaps	xmm11, XMMWORD PTR [r11-96]
	vmovaps	xmm12, XMMWORD PTR [r11-112]
	vmovaps	xmm13, XMMWORD PTR [r11-128]
	vmovaps	xmm14, XMMWORD PTR [r11-144]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
?noise@Worley@@SAXQEANHPEANH@Z ENDP			; Worley::noise
_TEXT	ENDS
END
